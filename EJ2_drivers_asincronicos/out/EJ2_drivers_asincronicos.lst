
sotr2/EJ2_drivers_asincronicos/out/EJ2_drivers_asincronicos.elf:     file format elf32-littlearm
sotr2/EJ2_drivers_asincronicos/out/EJ2_drivers_asincronicos.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000c5d

Program Header:
0x70000001 off    0x0000c238 vaddr 0x1a004238 paddr 0x1a004238 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**15
         filesz 0x000000b4 memsz 0x0000443c flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x00004240 memsz 0x00004240 flags rwx
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x1a004240 align 2**15
         filesz 0x000001a4 memsz 0x000001a4 flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004234  1a000000  1a000000  00008000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a4  10000000  1a004240  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000101a4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000101a4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000101a4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000101a4  2**2
                  CONTENTS
  6 .bss          00004294  100001a8  100001a8  000001a8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000101a4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000101a4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000101a4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000101a4  2**2
                  CONTENTS
 11 .init_array   00000004  1a004234  1a004234  0000c234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a004238  1a004238  0000c238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000101a4  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000101a4  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000101a4  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000101a4  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000101a4  2**2
                  CONTENTS
 18 .noinit       00000000  1000443c  1000443c  000101a4  2**2
                  CONTENTS
 19 .debug_info   0001df50  00000000  00000000  000101a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004723  00000000  00000000  0002e0f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00009623  00000000  00000000  00032817  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000e60  00000000  00000000  0003be3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000d28  00000000  00000000  0003cc9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000f6e9  00000000  00000000  0003d9c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00012c98  00000000  00000000  0004d0ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002e1f7  00000000  00000000  0005fd43  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000070  00000000  00000000  0008df3a  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000039  00000000  00000000  0008dfaa  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00002528  00000000  00000000  0008dfe4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100001a8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a004234 l    d  .init_array	00000000 .init_array
1a004238 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000443c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0031bc l     F .text	00000094 uartProcessIRQ
10003fe4 l     O .bss	00000004 rxIsrCallbackUART0
10003fe8 l     O .bss	00000004 txIsrCallbackUART0
10003fec l     O .bss	00000004 txIsrCallbackUART2
10003ff0 l     O .bss	00000004 txIsrCallbackUART3
1a0040a4 l     O .text	00000048 lpcUarts
10003ff4 l     O .bss	00000004 rxIsrCallbackUART2
10003ff8 l     O .bss	00000004 rxIsrCallbackUART3
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 driver_uart.c
100001a8 l     O .bss	00000004 pxHigherPriorityTaskWoken.12722
00000000 l    df *ABS*	00000000 qf_mem.c
00000000 l    df *ABS*	00000000 main.c
1a0005f4 l     F .text	0000005c taskMedirPerformance
1a000650 l     F .text	00000050 taskMinusculas
1a0006a0 l     F .text	00000050 taskMayusculas
1a0006f0 l     F .text	00000200 taskValidarTx
1a0008f0 l     F .text	00000124 taskValidarRx
100001ac l     O .bss	00000400 memoria_para_pool_1
100005ac l     O .bss	00000400 memoria_para_pool_2
100009ac l     O .bss	00000400 memoria_para_pool_3
10000dac l     O .bss	00000400 memoria_para_pool_4
100011ac l     O .bss	00000400 memoria_para_token
00000000 l    df *ABS*	00000000 fsm_bufferRx.c
00000000 l    df *ABS*	00000000 heap_1.c
100015ac l     O .bss	00000004 xNextFreeByte
100015b0 l     O .bss	00000004 pucAlignedHeap.10041
100015b4 l     O .bss	00002000 ucHeap
00000000 l    df *ABS*	00000000 queue.c
1a000d60 l     F .text	0000001e prvIsQueueFull
1a000d80 l     F .text	0000001a prvIsQueueEmpty
1a000d9c l     F .text	00000076 prvCopyDataToQueue
1a000e14 l     F .text	00000024 prvCopyDataFromQueue
1a000e38 l     F .text	0000006a prvUnlockQueue
1a000f24 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
100035b4 l     O .bss	000005a0 uxTimerTaskStack.9436
10003b54 l     O .bss	00000168 uxIdleTaskStack.9429
10003cbc l     O .bss	00000060 xIdleTaskTCB.9428
10003d1c l     O .bss	00000060 xTimerTaskTCB.9435
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001550 l     F .text	00000034 prvResetNextTaskUnblockTime
1a001584 l     F .text	00000092 prvInitialiseNewTask
1a001618 l     F .text	00000068 prvInitialiseTaskLists
1a001680 l     F .text	000000a8 prvAddNewTaskToReadyList
1a001728 l     F .text	0000003a prvDeleteTCB
1a001764 l     F .text	00000044 prvCheckTasksWaitingTermination
1a0017a8 l     F .text	00000028 prvIdleTask
1a0017d0 l     F .text	00000094 prvAddCurrentTaskToDelayedList
10003d7c l     O .bss	00000004 xNumOfOverflows
10003d80 l     O .bss	00000004 pxDelayedTaskList
10003d84 l     O .bss	00000004 xSchedulerRunning
10003d88 l     O .bss	00000014 xTasksWaitingTermination
10003d9c l     O .bss	00000004 pxOverflowDelayedTaskList
10003da0 l     O .bss	00000004 uxPendedTicks
10003da4 l     O .bss	0000008c pxReadyTasksLists
10003e30 l     O .bss	00000004 uxSchedulerSuspended
10003e34 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10003e38 l     O .bss	00000004 uxCurrentNumberOfTasks
10003e40 l     O .bss	00000014 xPendingReadyList
10003e54 l     O .bss	00000004 xIdleTaskHandle
10003e58 l     O .bss	00000004 xTickCount
10003e5c l     O .bss	00000004 xNextTaskUnblockTime
10003e60 l     O .bss	00000004 uxTaskNumber
10003e64 l     O .bss	00000014 xDelayedTaskList1
10003e78 l     O .bss	00000014 xDelayedTaskList2
10003e8c l     O .bss	00000014 xSuspendedTaskList
10003ea0 l     O .bss	00000004 uxTopReadyPriority
10003ea4 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a001ffc l     F .text	00000020 prvGetNextExpireTime
1a00201c l     F .text	00000048 prvInsertTimerInActiveList
1a002064 l     F .text	0000006c prvCheckForValidListAndQueue
1a0020d0 l     F .text	00000040 prvInitialiseNewTimer
1a002484 l     F .text	00000016 prvTimerTask
1a00223c l     F .text	0000007c prvSwitchTimerLists
1a0022b8 l     F .text	0000002c prvSampleTimeNow
1a0022e4 l     F .text	0000005c prvProcessExpiredTimer
1a002340 l     F .text	00000074 prvProcessTimerOrBlockTask
1a0023b4 l     F .text	000000d0 prvProcessReceivedCommands
10003ea8 l     O .bss	00000004 pxCurrentTimerList
10003eac l     O .bss	00000014 xActiveTimerList1
10003ec0 l     O .bss	00000014 xActiveTimerList2
10003ed4 l     O .bss	000000a0 ucStaticTimerQueueStorage.10431
10003f74 l     O .bss	00000050 xStaticTimerQueue.10430
10003fc4 l     O .bss	00000004 xLastTime.10380
10003fc8 l     O .bss	00000004 xTimerQueue
10003fcc l     O .bss	00000004 pxOverflowTimerList
10003fd0 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a00249c l     F .text	00000040 prvTaskExitError
1a0024dc l     F .text	00000022 prvPortStartFirstTask
1a002504 l     F .text	0000000e vPortEnableVFP
1a002570 l       .text	00000000 pxCurrentTCBConst2
1a002650 l       .text	00000000 pxCurrentTCBConst
10003fd4 l     O .bss	00000001 ucMaxSysCallPriority
10003fd8 l     O .bss	00000004 ulMaxPRIGROUPValue
10000110 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 board.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a003f5c l     O .text	00000004 InitClkStates
1a003f60 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002920 l     F .text	0000002c Chip_UART_GetIndex
1a003fd4 l     O .text	00000008 UART_BClock
1a003fdc l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002ac4 l     F .text	000000a8 pll_calc_divs
1a002b6c l     F .text	00000104 pll_get_frac
1a002c70 l     F .text	00000048 Chip_Clock_FindBaseClock
1a002edc l     F .text	00000022 Chip_Clock_GetDivRate
10003fdc l     O .bss	00000008 audio_usb_pll_freq
1a003ff0 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00405c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000118 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
10003ffc l     O .bss	00000004 tickHookFunction
10004000 l     O .bss	00000030 tickerObject.10593
10004030 l     O .bss	00000008 tickCounter
10004038 l     O .bss	00000004 callBackFuncParams
00000000 l    df *ABS*	00000000 sapi_timer.c
1a00340c l     F .text	00000002 errorOcurred
1a003410 l     F .text	00000002 doNothing
1000011c l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a003510 l     F .text	0000002c gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
1000403c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a003840 l     F .text	00000010 clearInterrupt
1a003850 l     F .text	00000060 serveInterrupt
1000015c l     O .data	00000048 ultrasonicSensors
1a004230 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a004240 l       .ARM.exidx	00000000 __exidx_end
1a004240 l       .ARM.exidx	00000000 _etext
00000000 l       *UND*	00000000 USB_StringDescriptor
00000000 l       *UND*	00000000 USB_DeviceDescriptor
20008000 l       *ABS*	00000000 __top_RamAHB32
1a004238 l       .ARM.exidx	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
00000000 l       *UND*	00000000 Keyboard_ReportDescSize
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1a004238 l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 Keyboard_ReportDescriptor
00000000 l       *UND*	00000000 USB_DeviceQualifier
1a004234 l       .bss_RAM5	00000000 __preinit_array_end
00000000 l       *UND*	00000000 USB_HsConfigDescriptor
1000443c l       .bss	00000000 _pvHeapStart
00000000 l       *UND*	00000000 USB_FsConfigDescriptor
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a004234 l       .init_array	00000000 __init_array_start
1a004234 l       .bss_RAM5	00000000 __preinit_array_start
1000000c g     O .data	00000104 buffer_test
10004040 g     O .bss	00000004 queIsrTx
1a002d04 g     F .text	0000001c Chip_Clock_GetDividerSource
1a003934 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a003490 g     F .text	00000040 TIMER2_IRQHandler
1a0032e4 g     F .text	00000014 uartRxRead
1a000190  w    F .text	00000002 DebugMon_Handler
1a0001cc  w    F .text	00000002 RIT_IRQHandler
10004044 g     O .bss	0000010e Driver_Buffer_RX
1a0001cc  w    F .text	00000002 ADCHS_IRQHandler
1a003968 g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a0001cc  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0025c4 g     F .text	0000002c vPortExitCritical
10004270 g     O .bss	00000014 mem_pool_2
1a0001cc  w    F .text	00000002 I2C0_IRQHandler
10004284 g     O .bss	00000014 mem_token_pool
1a00286c g     F .text	00000008 __stdio_init
1a00017c  w    F .text	00000002 HardFault_Handler
1a001438 g     F .text	0000004c vQueueWaitForMessageRestricted
1a000000 g       *ABS*	00000000 __vectors_start__
1a002660 g     F .text	0000002c SysTick_Handler
1a0029a0 g     F .text	00000040 Chip_UART_SetBaud
1a0001cc  w    F .text	00000002 SDIO_IRQHandler
1a0001cc  w    F .text	00000002 ATIMER_IRQHandler
1a0025f0 g     F .text	00000064 PendSV_Handler
1a0011d4 g     F .text	000000e4 xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a00043c g     F .text	00000050 driver_uart_extern_write_string_to_buffer_tx
1a000150 g       .text	00000000 __data_section_table_end
1a0001cc  w    F .text	00000002 I2C1_IRQHandler
10004152 g     O .bss	00000001 uart_name
1a0001cc  w    F .text	00000002 UART1_IRQHandler
1a0001cc  w    F .text	00000002 GPIO5_IRQHandler
1a0001cc  w    F .text	00000002 CAN1_IRQHandler
10003e3c g     O .bss	00000004 pxCurrentTCB
53ff6c1e g       *ABS*	00000000 __valid_user_code_checksum
1a0001cc  w    F .text	00000002 USB1_IRQHandler
1a0001cc  w    F .text	00000002 I2S0_IRQHandler
1a001e84 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0034d0 g     F .text	00000040 TIMER3_IRQHandler
1a002f68 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001d0 g     F .text	0000000a UART0_IRQHandler
1a0001b8 g     F .text	00000012 bss_init
1a0026c4 g     F .text	00000128 xPortStartScheduler
1a003ebc g     F .text	00000016 memcpy
1a001d90 g     F .text	00000030 vTaskPlaceOnEventList
1a0001cc  w    F .text	00000002 SGPIO_IRQHandler
1a00268c  w    F .text	00000038 vPortSetupTimerInterrupt
1a0038d4 g     F .text	00000000 .hidden __aeabi_uldivmod
1000443c g       .noinit	00000000 _noinit
1a000c44 g     F .text	00000016 receptionStatus
1a000d48 g     F .text	00000016 vPortFree
10004434 g     O .bss	00000004 SystemCoreClock
1a00294c g     F .text	00000054 Chip_UART_Init
1a003394 g     F .text	0000002c tickerCallback
1a0001cc  w    F .text	00000002 ADC0_IRQHandler
1a0027ec g     F .text	0000005c vPortValidateInterruptPriority
1a000188  w    F .text	00000002 UsageFault_Handler
1a002fb0 g     F .text	0000004c Chip_Clock_GetRate
1a0014a4 g     F .text	00000018 vListInsertEnd
1a0001cc  w    F .text	00000002 GPIO6_IRQHandler
1a0028a8 g     F .text	0000006c Board_SetupClocking
1a003f58 g     O .text	00000004 ExtRateIn
1a0001cc  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00149c g     F .text	00000006 vListInitialiseItem
1a000b68 g     F .text	00000010 fsmBufferRxInit
1a0038bc g     F .text	0000000a GPIO1_IRQHandler
1a0012b8 g     F .text	00000158 xQueueReceive
100043f4 g     O .bss	00000040 xQueueRegistry
10004298 g     O .bss	00000004 queTransmision
1a001530 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001cc  w    F .text	00000002 SSP0_IRQHandler
1a0002fc g     O .text	00000004 CRP_WORD
1000429c g     O .bss	0000010e pDriver_Buffer_RX
1a003e70 g     F .text	0000004c __libc_init_array
10004154 g     O .bss	00000004 driver_uart_semaforo_rx
1a003c04 g     F .text	0000026a .hidden __udivdi3
1a0001cc  w    F .text	00000002 ADC1_IRQHandler
1a000ce4 g     F .text	00000064 pvPortMalloc
1a000ce0 g     F .text	00000002 _init
1a001484 g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
10000000 g     O .data	0000000c driver_uarts
1a0019f8 g     F .text	0000000c xTaskGetTickCount
1a001044 g     F .text	00000190 xQueueGenericSend
1a0001cc  w    F .text	00000002 RTC_IRQHandler
1000443c g       .bss	00000000 _ebss
1a003414 g     F .text	0000003c TIMER0_IRQHandler
1a0005ac g     F .text	00000046 QMPool_get
100043ac g     O .bss	00000014 mem_pool_3
1a000c5c g     F .text	00000084 Reset_Handler
1a0033c0 g     F .text	0000004c tickInit
1a0001cc  w    F .text	00000002 SPI_IRQHandler
1a001f48 g     F .text	000000b4 xTaskPriorityDisinherit
1a0001cc  w    F .text	00000002 LCD_IRQHandler
1a002cb8 g     F .text	0000004c Chip_Clock_EnableCrystal
1a00048c g     F .text	000000b4 driver_uart_init
1a000b78 g     F .text	000000cc fsmBufferRxAct
1a001df8 g     F .text	0000008c xTaskRemoveFromEventList
1a00154c g     F .text	00000002 vApplicationMallocFailedHook
1a00019c g     F .text	0000001a data_init
1a003450 g     F .text	00000040 TIMER1_IRQHandler
1a000348 g     F .text	00000094 UART2_IRQHandler
1a002e74 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a0040f8 g     O .text	00000136 gpioPinsInit
1a003250 g     F .text	00000094 uartInterrupt
1a00041c g     F .text	00000020 driver_uart_write_string_to_buffer
1a0038c8 g     F .text	0000000a GPIO2_IRQHandler
1a001e9c g     F .text	00000080 xTaskCheckForTimeOut
1a002f44 g     F .text	00000024 Chip_Clock_GetBaseClock
1a0003dc g     F .text	00000040 driver_uart_write_char_to_buffer
100001a8 g       .bss	00000000 _bss
1a0019e8 g     F .text	00000010 vTaskSuspendAll
1a0001cc  w    F .text	00000002 I2S1_IRQHandler
1a0014f0 g     F .text	00000026 uxListRemove
10004158 g     O .bss	0000010e Driver_Buffer_TX
1a003010 g     F .text	00000002 Chip_GPIO_Init
1a003f54 g     O .text	00000004 OscRateIn
1a00330c g     F .text	0000007c uartInit
1a001864 g     F .text	0000007c xTaskCreateStatic
1000443c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
100043c0 g     O .bss	00000004 queMedirPerformance
1a001ccc g     F .text	000000c4 vTaskSwitchContext
1a0001cc  w    F .text	00000002 SSP1_IRQHandler
1a000f48 g     F .text	000000aa xQueueGenericCreateStatic
1a001dc0 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a00353c g     F .text	0000019c gpioInit
1a001518 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a0021d0 g     F .text	0000006c xTimerGenericCommand
1a001548 g     F .text	00000002 vApplicationStackOverflowHook
1a003964  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003730 g     F .text	0000001c USB0_IRQHandler
1a0001cc  w    F .text	00000002 GPIO3_IRQHandler
1a0001cc  w    F .text	00000002 SCT_IRQHandler
1a002d20 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003ed2 g     F .text	00000010 memset
1a000180  w    F .text	00000002 MemManage_Handler
1a000a14 g     F .text	00000154 main
1a0001cc  w    F .text	00000002 WDT_IRQHandler
1a0014bc g     F .text	00000034 vListInsert
1a002550 g     F .text	00000024 SVC_Handler
10000114 g     O .data	00000004 DWT_CTRL
1a002110 g     F .text	00000070 xTimerCreateTimerTask
10004268 g     O .bss	00000004 queIsrRx
1a001c20 g     F .text	000000ac vTaskDelayUntil
1a0001cc  w    F .text	00000002 GPIO7_IRQHandler
1a002f74 g     F .text	0000003c Chip_Clock_EnableOpts
100043c4 g     O .bss	00000004 queMayusculizar
1a000ff4 g     F .text	00000050 xQueueGenericCreate
1a002d3c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000300 g     F .text	00000048 driver_uart_get_char_from_buffer
1a002df4 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003164 g     F .text	0000003c SystemInit
1a0001cc  w    F .text	00000002 SPIFI_IRQHandler
1a0001cc  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0036d8 g     F .text	00000058 gpioWrite
1a001b28 g     F .text	000000f8 xTaskResumeAll
1a001948 g     F .text	000000a0 vTaskStartScheduler
10004438 g     O .bss	00000004 g_pUsbApi
1a002874 g     F .text	00000034 Board_SetupMuxing
1a00058c g     F .text	0000001e QMPool_put
1a0029e0 g     F .text	000000e4 Chip_UART_SetBaudFDR
1a0001cc  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0032f8 g     F .text	00000014 uartTxWrite
1a0001cc  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001f1c g     F .text	0000000c vTaskMissedYield
1a000178 g       .text	00000000 __section_table_end
1a001410 g     F .text	00000028 vQueueAddToRegistry
1a0001cc  w    F .text	00000002 GINT0_IRQHandler
1a001a04 g     F .text	00000124 xTaskIncrementTick
1a0001cc  w    F .text	00000002 DAC_IRQHandler
1a002848 g     F .text	00000024 Board_Debug_Init
1a000ea4 g     F .text	00000080 xQueueGenericReset
100001a4 g       .data	00000000 _edata
1a0001cc  w    F .text	00000002 M0SUB_IRQHandler
1a0018e0 g     F .text	00000066 xTaskCreate
1a003014 g     F .text	00000150 Chip_SetupCoreClock
1a0038b0 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a002ffc g     F .text	00000014 SystemCoreClockUpdate
1a0001cc  w    F .text	00000002 DMA_IRQHandler
1a0001cc  w    F .text	00000002 EVRT_IRQHandler
1a000540 g     F .text	0000004c QMPool_init
1a001f28 g     F .text	00000020 xTaskGetSchedulerState
1a003964  w    F .text	00000002 .hidden __aeabi_idiv0
100043c8 g     O .bss	00000014 mem_pool_1
1a000184  w    F .text	00000002 BusFault_Handler
1a002518 g     F .text	0000002c pxPortInitialiseStack
100043dc g     O .bss	00000004 queMinusculizar
1000426c g     O .bss	00000004 uart_addr
1a003388 g     F .text	0000000a UART3_IRQHandler
1a0001cc  w    F .text	00000002 MCPWM_IRQHandler
1a002180 g     F .text	0000004e xTimerCreateStatic
1a003904 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a0001cc  w    F .text	00000002 M0APP_IRQHandler
1a00374c g     F .text	000000f4 boardInit
1a002580 g     F .text	00000044 vPortEnterCritical
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001cc  w    F .text	00000002 GINT1_IRQHandler
100043e0 g     O .bss	00000014 mem_pool_4
1a002f00 g     F .text	00000044 Chip_Clock_SetBaseClock
1a0031a0 g     F .text	0000001c cyclesCounterInit
1a0001cc  w    F .text	00000002 GPIO4_IRQHandler
1a002914 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 5d 0c 00 1a 79 01 00 1a 7d 01 00 1a     ....]...y...}...
1a000010:	81 01 00 1a 85 01 00 1a 89 01 00 1a 1e 6c ff 53     .............l.S
	...
1a00002c:	51 25 00 1a 91 01 00 1a 00 00 00 00 f1 25 00 1a     Q%...........%..
1a00003c:	61 26 00 1a                                         a&..

1a000040 <g_pfnVendorVectors>:
1a000040:	cd 01 00 1a cd 01 00 1a cd 01 00 1a 00 00 00 00     ................
1a000050:	cd 01 00 1a cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a000060:	31 37 00 1a cd 01 00 1a cd 01 00 1a cd 01 00 1a     17..............
1a000070:	15 34 00 1a 51 34 00 1a 91 34 00 1a d1 34 00 1a     .4..Q4...4...4..
1a000080:	cd 01 00 1a cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a000090:	cd 01 00 1a cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a0000a0:	d1 01 00 1a cd 01 00 1a 49 03 00 1a 89 33 00 1a     ........I....3..
1a0000b0:	cd 01 00 1a cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a0000c0:	b1 38 00 1a bd 38 00 1a c9 38 00 1a cd 01 00 1a     .8...8...8......
1a0000d0:	cd 01 00 1a cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a0000e0:	cd 01 00 1a cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a0000f0:	00 00 00 00 cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a000100:	00 00 00 00 cd 01 00 1a cd 01 00 1a cd 01 00 1a     ................
1a000110:	cd 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a004240 	.word	0x1a004240
1a000118:	10000000 	.word	0x10000000
1a00011c:	000001a4 	.word	0x000001a4
1a000120:	1a004240 	.word	0x1a004240
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a004240 	.word	0x1a004240
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a004240 	.word	0x1a004240
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a004240 	.word	0x1a004240
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100001a8 	.word	0x100001a8
1a000154:	00004294 	.word	0x00004294
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>
1a00017a:	bf00      	nop

1a00017c <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <HardFault_Handler>
1a00017e:	bf00      	nop

1a000180 <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <MemManage_Handler>
1a000182:	bf00      	nop

1a000184 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <BusFault_Handler>
1a000186:	bf00      	nop

1a000188 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <UsageFault_Handler>
1a00018a:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <UsageFault_Handler+0x4>
1a00018e:	bf00      	nop

1a000190 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <DebugMon_Handler>
1a000192:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <DebugMon_Handler+0x4>
1a000196:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <DebugMon_Handler+0x8>
1a00019a:	bf00      	nop

1a00019c <data_init>:
    PendSV_Handler,                 // The PendSV handler
    SysTick_Handler,                // The SysTick handler
};

__attribute__((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a00019c:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a00019e:	2300      	movs	r3, #0
1a0001a0:	e004      	b.n	1a0001ac <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001a2:	6804      	ldr	r4, [r0, #0]
1a0001a4:	600c      	str	r4, [r1, #0]
__attribute__((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a6:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001a8:	3004      	adds	r0, #4
1a0001aa:	3104      	adds	r1, #4
__attribute__((section(".after_vectors")))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ac:	4293      	cmp	r3, r2
1a0001ae:	d3f8      	bcc.n	1a0001a2 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001b0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001b4:	4770      	bx	lr
1a0001b6:	bf00      	nop

1a0001b8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b8:	2300      	movs	r3, #0
1a0001ba:	e003      	b.n	1a0001c4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001bc:	2200      	movs	r2, #0
1a0001be:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001c2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c4:	428b      	cmp	r3, r1
1a0001c6:	d3f9      	bcc.n	1a0001bc <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001c8:	4770      	bx	lr
1a0001ca:	bf00      	nop

1a0001cc <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001cc:	e7fe      	b.n	1a0001cc <ADC0_IRQHandler>
1a0001ce:	bf00      	nop

1a0001d0 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001d0:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001d2:	2000      	movs	r0, #0
1a0001d4:	f002 fff2 	bl	1a0031bc <uartProcessIRQ>
1a0001d8:	bd08      	pop	{r3, pc}
1a0001da:	bf00      	nop
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <driver_uart_get_char_from_buffer>:

// Obtengo un dato del buffer indicado
uint8_t driver_uart_get_char_from_buffer(uint8_t * dato, Drivers_t * buffer) {

	// Hay nuevo dato en el buffer?
	if(buffer->Ind_lectura != buffer->Ind_escritura) {
1a000300:	f8b1 3104 	ldrh.w	r3, [r1, #260]	; 0x104
1a000304:	f8b1 2106 	ldrh.w	r2, [r1, #262]	; 0x106
1a000308:	4293      	cmp	r3, r2
1a00030a:	d018      	beq.n	1a00033e <driver_uart_get_char_from_buffer+0x3e>
		* dato = buffer->Buffer[buffer->Ind_lectura];
1a00030c:	5ccb      	ldrb	r3, [r1, r3]
1a00030e:	7003      	strb	r3, [r0, #0]
		buffer->Ind_lectura = (buffer->Ind_lectura+1) % buffer->CantidadDatos;
1a000310:	f8b1 3104 	ldrh.w	r3, [r1, #260]	; 0x104
1a000314:	3301      	adds	r3, #1
1a000316:	f8b1 010a 	ldrh.w	r0, [r1, #266]	; 0x10a
1a00031a:	fb93 f2f0 	sdiv	r2, r3, r0
1a00031e:	fb00 3312 	mls	r3, r0, r2, r3
1a000322:	f8a1 3104 	strh.w	r3, [r1, #260]	; 0x104
		buffer->Ultimo_char = buffer->Buffer[buffer->Ind_escritura];// leemos el utlimo char
1a000326:	f8b1 3106 	ldrh.w	r3, [r1, #262]	; 0x106
1a00032a:	5ccb      	ldrb	r3, [r1, r3]
1a00032c:	f881 310c 	strb.w	r3, [r1, #268]	; 0x10c
		buffer->Buffer_Vacio = 0;
1a000330:	2300      	movs	r3, #0
1a000332:	f881 3108 	strb.w	r3, [r1, #264]	; 0x108
		buffer->Buffer_Error = 0;
1a000336:	f881 3109 	strb.w	r3, [r1, #265]	; 0x109
		return 1;	// Hay nuevo dato
1a00033a:	2001      	movs	r0, #1
1a00033c:	4770      	bx	lr
	}
	else {
		buffer->Buffer_Vacio = 1;
1a00033e:	2301      	movs	r3, #1
1a000340:	f881 3108 	strb.w	r3, [r1, #264]	; 0x108
		return 0;	// No Hay
1a000344:	2000      	movs	r0, #0
	}
}
1a000346:	4770      	bx	lr

1a000348 <UART2_IRQHandler>:
	driver_uart_extern_write_string_to_buffer_tx(&buffer_test, 9);   //  Probamos la transmision de datos
}

// funcion de interrupcion
void UART2_IRQHandler(void)
{
1a000348:	b510      	push	{r4, lr}
1a00034a:	b082      	sub	sp, #8
	uint32_t status;
	uint8_t DatoRX, DatoTX;
	static BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
	uint32_t intMask;

	status = Chip_UART_ReadLineStatus( uart_addr );
1a00034c:	4b1d      	ldr	r3, [pc, #116]	; (1a0003c4 <UART2_IRQHandler+0x7c>)
1a00034e:	681b      	ldr	r3, [r3, #0]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000350:	695c      	ldr	r4, [r3, #20]

	// Rx Interrupt
	if(status & UART_LSR_RDR) { // uartRxReady
1a000352:	f014 0f01 	tst.w	r4, #1
1a000356:	d00c      	beq.n	1a000372 <UART2_IRQHandler+0x2a>
		// Execute
		DatoRX = uartRxRead(uart_name);
1a000358:	4b1b      	ldr	r3, [pc, #108]	; (1a0003c8 <UART2_IRQHandler+0x80>)
1a00035a:	7818      	ldrb	r0, [r3, #0]
1a00035c:	f002 ffc2 	bl	1a0032e4 <uartRxRead>
1a000360:	a902      	add	r1, sp, #8
1a000362:	f801 0d01 	strb.w	r0, [r1, #-1]!
		xQueueSendFromISR(queIsrRx, &DatoRX, &pxHigherPriorityTaskWoken);// se envia por cola el char recibido por uart
1a000366:	4b19      	ldr	r3, [pc, #100]	; (1a0003cc <UART2_IRQHandler+0x84>)
1a000368:	6818      	ldr	r0, [r3, #0]
1a00036a:	4a19      	ldr	r2, [pc, #100]	; (1a0003d0 <UART2_IRQHandler+0x88>)
1a00036c:	2300      	movs	r3, #0
1a00036e:	f000 ff31 	bl	1a0011d4 <xQueueGenericSendFromISR>
	}

	// Tx Interrupt
	if( ( status & UART_LSR_THRE ) && // uartTxReady
1a000372:	f014 0f20 	tst.w	r4, #32
1a000376:	d018      	beq.n	1a0003aa <UART2_IRQHandler+0x62>
			( Chip_UART_GetIntsEnabled( uart_addr ) & UART_IER_THREINT ) ) {
1a000378:	4b12      	ldr	r3, [pc, #72]	; (1a0003c4 <UART2_IRQHandler+0x7c>)
1a00037a:	681b      	ldr	r3, [r3, #0]
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a00037c:	685b      	ldr	r3, [r3, #4]
		DatoRX = uartRxRead(uart_name);
		xQueueSendFromISR(queIsrRx, &DatoRX, &pxHigherPriorityTaskWoken);// se envia por cola el char recibido por uart
	}

	// Tx Interrupt
	if( ( status & UART_LSR_THRE ) && // uartTxReady
1a00037e:	f013 0f02 	tst.w	r3, #2
1a000382:	d012      	beq.n	1a0003aa <UART2_IRQHandler+0x62>
			( Chip_UART_GetIntsEnabled( uart_addr ) & UART_IER_THREINT ) ) {

		// Leo dato del buffer, si el buffer esta vacio no entre a enviar dato
		if(driver_uart_get_char_from_buffer(&DatoTX,&Driver_Buffer_TX)){
1a000384:	f10d 0006 	add.w	r0, sp, #6
1a000388:	4912      	ldr	r1, [pc, #72]	; (1a0003d4 <UART2_IRQHandler+0x8c>)
1a00038a:	f7ff ffb9 	bl	1a000300 <driver_uart_get_char_from_buffer>
1a00038e:	b130      	cbz	r0, 1a00039e <UART2_IRQHandler+0x56>
			uartTxWrite( uart_name, DatoTX );// Pongo dato en elregistro TX ; Enciendo interrupcion TX
1a000390:	4b0d      	ldr	r3, [pc, #52]	; (1a0003c8 <UART2_IRQHandler+0x80>)
1a000392:	7818      	ldrb	r0, [r3, #0]
1a000394:	f89d 1006 	ldrb.w	r1, [sp, #6]
1a000398:	f002 ffae 	bl	1a0032f8 <uartTxWrite>
1a00039c:	e005      	b.n	1a0003aa <UART2_IRQHandler+0x62>
		}
		else {
			intMask = UART_IER_THREINT;
			Chip_UART_IntDisable(uart_addr, intMask);
1a00039e:	4b09      	ldr	r3, [pc, #36]	; (1a0003c4 <UART2_IRQHandler+0x7c>)
1a0003a0:	681a      	ldr	r2, [r3, #0]
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntDisable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER &= ~intMask;
1a0003a2:	6853      	ldr	r3, [r2, #4]
1a0003a4:	f023 0302 	bic.w	r3, r3, #2
1a0003a8:	6053      	str	r3, [r2, #4]
		}
	}

	portYIELD_FROM_ISR( pxHigherPriorityTaskWoken );
1a0003aa:	4b09      	ldr	r3, [pc, #36]	; (1a0003d0 <UART2_IRQHandler+0x88>)
1a0003ac:	681b      	ldr	r3, [r3, #0]
1a0003ae:	b13b      	cbz	r3, 1a0003c0 <UART2_IRQHandler+0x78>
1a0003b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0003b4:	4b08      	ldr	r3, [pc, #32]	; (1a0003d8 <UART2_IRQHandler+0x90>)
1a0003b6:	601a      	str	r2, [r3, #0]
1a0003b8:	f3bf 8f4f 	dsb	sy
1a0003bc:	f3bf 8f6f 	isb	sy
}
1a0003c0:	b002      	add	sp, #8
1a0003c2:	bd10      	pop	{r4, pc}
1a0003c4:	1000426c 	.word	0x1000426c
1a0003c8:	10004152 	.word	0x10004152
1a0003cc:	10004268 	.word	0x10004268
1a0003d0:	100001a8 	.word	0x100001a8
1a0003d4:	10004158 	.word	0x10004158
1a0003d8:	e000ed04 	.word	0xe000ed04

1a0003dc <driver_uart_write_char_to_buffer>:
	}
}

// Escribo un dato en el buffer indicado
uint8_t driver_uart_write_char_to_buffer(uint8_t  dato, Drivers_t * buffer)
{
1a0003dc:	b430      	push	{r4, r5}
	if(((buffer->Ind_escritura + 1) % buffer->CantidadDatos) != buffer->Ind_lectura) {
1a0003de:	f8b1 5106 	ldrh.w	r5, [r1, #262]	; 0x106
1a0003e2:	1c6c      	adds	r4, r5, #1
1a0003e4:	f8b1 310a 	ldrh.w	r3, [r1, #266]	; 0x10a
1a0003e8:	fb94 f2f3 	sdiv	r2, r4, r3
1a0003ec:	fb03 4312 	mls	r3, r3, r2, r4
1a0003f0:	f8b1 2104 	ldrh.w	r2, [r1, #260]	; 0x104
1a0003f4:	4293      	cmp	r3, r2
1a0003f6:	d00b      	beq.n	1a000410 <driver_uart_write_char_to_buffer+0x34>
		buffer->Buffer[buffer->Ind_escritura] = dato;
1a0003f8:	5548      	strb	r0, [r1, r5]
		buffer->Ultimo_char = buffer->Buffer[buffer->Ind_escritura];// leemos el utlimo char ingresado
1a0003fa:	f881 010c 	strb.w	r0, [r1, #268]	; 0x10c
		buffer->Ind_escritura = (buffer->Ind_escritura + 1) % buffer->CantidadDatos;
1a0003fe:	f8a1 3106 	strh.w	r3, [r1, #262]	; 0x106
		buffer->Buffer_Vacio = 0;
1a000402:	2300      	movs	r3, #0
1a000404:	f881 3108 	strb.w	r3, [r1, #264]	; 0x108
		buffer->Buffer_Error = 0;
1a000408:	f881 3109 	strb.w	r3, [r1, #265]	; 0x109
		return 1;	// Se pudo escribir correctamente
1a00040c:	2001      	movs	r0, #1
1a00040e:	e003      	b.n	1a000418 <driver_uart_write_char_to_buffer+0x3c>
	}
	else {
		buffer->Buffer_Error = 1;	// Buffer lleno
1a000410:	2301      	movs	r3, #1
1a000412:	f881 3109 	strb.w	r3, [r1, #265]	; 0x109
		return 0;						// No se pudo escribir correctamente
1a000416:	2000      	movs	r0, #0
	}
}
1a000418:	bc30      	pop	{r4, r5}
1a00041a:	4770      	bx	lr

1a00041c <driver_uart_write_string_to_buffer>:

// Escribo un string al buffer indicado
uint8_t driver_uart_write_string_to_buffer(uint8_t * strdato, uint16_t sizestr, Drivers_t * buffer) {
1a00041c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00041e:	4607      	mov	r7, r0
1a000420:	460d      	mov	r5, r1
1a000422:	4616      	mov	r6, r2

	uint16_t i = 0;

	for(i = 0; i < sizestr; i++)
1a000424:	2400      	movs	r4, #0
1a000426:	e006      	b.n	1a000436 <driver_uart_write_string_to_buffer+0x1a>
		if(0 == driver_uart_write_char_to_buffer(strdato[i], buffer)) return 0;
1a000428:	5d38      	ldrb	r0, [r7, r4]
1a00042a:	4631      	mov	r1, r6
1a00042c:	f7ff ffd6 	bl	1a0003dc <driver_uart_write_char_to_buffer>
1a000430:	b118      	cbz	r0, 1a00043a <driver_uart_write_string_to_buffer+0x1e>
// Escribo un string al buffer indicado
uint8_t driver_uart_write_string_to_buffer(uint8_t * strdato, uint16_t sizestr, Drivers_t * buffer) {

	uint16_t i = 0;

	for(i = 0; i < sizestr; i++)
1a000432:	3401      	adds	r4, #1
1a000434:	b2a4      	uxth	r4, r4
1a000436:	42ac      	cmp	r4, r5
1a000438:	d3f6      	bcc.n	1a000428 <driver_uart_write_string_to_buffer+0xc>
		if(0 == driver_uart_write_char_to_buffer(strdato[i], buffer)) return 0;
}
1a00043a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a00043c <driver_uart_extern_write_string_to_buffer_tx>:

// Escribimos un string en el Buffer TX
void driver_uart_extern_write_string_to_buffer_tx(uint8_t * strdato, uint16_t sizestr) {
1a00043c:	b500      	push	{lr}
1a00043e:	b083      	sub	sp, #12

	uint8_t DatoTX=0;
1a000440:	2300      	movs	r3, #0
1a000442:	f88d 3007 	strb.w	r3, [sp, #7]
	uint32_t intMask;


	if(driver_uart_write_string_to_buffer(strdato, sizestr, &Driver_Buffer_TX)) {
1a000446:	4a0e      	ldr	r2, [pc, #56]	; (1a000480 <driver_uart_extern_write_string_to_buffer_tx+0x44>)
1a000448:	f7ff ffe8 	bl	1a00041c <driver_uart_write_string_to_buffer>
1a00044c:	b1a8      	cbz	r0, 1a00047a <driver_uart_extern_write_string_to_buffer_tx+0x3e>
		if(0 == (Driver_Buffer_TX.Buffer_Vacio || Driver_Buffer_TX.Buffer_Error)) {
1a00044e:	4b0c      	ldr	r3, [pc, #48]	; (1a000480 <driver_uart_extern_write_string_to_buffer_tx+0x44>)
1a000450:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
1a000454:	b98b      	cbnz	r3, 1a00047a <driver_uart_extern_write_string_to_buffer_tx+0x3e>
			// Leo dato del buffer, si el buffer esta vacio no entre a enviar dato
			if(driver_uart_get_char_from_buffer(&DatoTX, &Driver_Buffer_TX)){
1a000456:	f10d 0007 	add.w	r0, sp, #7
1a00045a:	4909      	ldr	r1, [pc, #36]	; (1a000480 <driver_uart_extern_write_string_to_buffer_tx+0x44>)
1a00045c:	f7ff ff50 	bl	1a000300 <driver_uart_get_char_from_buffer>
1a000460:	b158      	cbz	r0, 1a00047a <driver_uart_extern_write_string_to_buffer_tx+0x3e>
				// Pongo dato en elregistro TX ; Enciendo interrupcion TX
				uartTxWrite(uart_name, DatoTX);
1a000462:	4b08      	ldr	r3, [pc, #32]	; (1a000484 <driver_uart_extern_write_string_to_buffer_tx+0x48>)
1a000464:	7818      	ldrb	r0, [r3, #0]
1a000466:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00046a:	f002 ff45 	bl	1a0032f8 <uartTxWrite>
   				intMask = UART_IER_THREINT;
    			Chip_UART_IntEnable(uart_addr, intMask);
1a00046e:	4b06      	ldr	r3, [pc, #24]	; (1a000488 <driver_uart_extern_write_string_to_buffer_tx+0x4c>)
1a000470:	681a      	ldr	r2, [r3, #0]
 *			(DLAB) in LCR must be cleared in order to access the IER register.
 *			This function doesn't alter the DLAB state
 */
STATIC INLINE void Chip_UART_IntEnable(LPC_USART_T *pUART, uint32_t intMask)
{
	pUART->IER |= intMask;
1a000472:	6853      	ldr	r3, [r2, #4]
1a000474:	f043 0302 	orr.w	r3, r3, #2
1a000478:	6053      	str	r3, [r2, #4]
			}
		}
	}
}
1a00047a:	b003      	add	sp, #12
1a00047c:	f85d fb04 	ldr.w	pc, [sp], #4
1a000480:	10004158 	.word	0x10004158
1a000484:	10004152 	.word	0x10004152
1a000488:	1000426c 	.word	0x1000426c

1a00048c <driver_uart_init>:
/*==================[external data declaration]==============================*/

/*==================[external functions declaration]=========================*/

// inicializar driver uart
void driver_uart_init(uartMap_t uart, uint32_t baudRate) {
1a00048c:	b538      	push	{r3, r4, r5, lr}
	uint32_t intMask;
	uart_name = uart;
1a00048e:	4c23      	ldr	r4, [pc, #140]	; (1a00051c <driver_uart_init+0x90>)
1a000490:	7020      	strb	r0, [r4, #0]
	uart_addr = driver_uarts[0].uartAddr;
1a000492:	4b23      	ldr	r3, [pc, #140]	; (1a000520 <driver_uart_init+0x94>)
1a000494:	681b      	ldr	r3, [r3, #0]
1a000496:	4d23      	ldr	r5, [pc, #140]	; (1a000524 <driver_uart_init+0x98>)
1a000498:	602b      	str	r3, [r5, #0]

	uartConfig(uart_name, baudRate);
1a00049a:	f002 ff37 	bl	1a00330c <uartInit>

	// Enable THRE irq (RX)
	intMask = UART_IER_RBRINT | UART_IER_RLSINT;
	Chip_UART_IntEnable(uart_addr, intMask);
1a00049e:	682b      	ldr	r3, [r5, #0]
1a0004a0:	685a      	ldr	r2, [r3, #4]
1a0004a2:	f042 0205 	orr.w	r2, r2, #5
1a0004a6:	605a      	str	r2, [r3, #4]
1a0004a8:	685a      	ldr	r2, [r3, #4]
1a0004aa:	f042 0202 	orr.w	r2, r2, #2
1a0004ae:	605a      	str	r2, [r3, #4]
    // Enable THRE irq (TX)
    intMask = UART_IER_THREINT;
    Chip_UART_IntEnable(uart_addr, intMask);

	uartInterrupt(uart_name, TRUE);
1a0004b0:	7820      	ldrb	r0, [r4, #0]
1a0004b2:	2101      	movs	r1, #1
1a0004b4:	f002 fecc 	bl	1a003250 <uartInterrupt>


	queIsrTx = xQueueCreate(UART_N_QUEUES, sizeof(Drivers_t));
1a0004b8:	2001      	movs	r0, #1
1a0004ba:	f44f 7187 	mov.w	r1, #270	; 0x10e
1a0004be:	2200      	movs	r2, #0
1a0004c0:	f000 fd98 	bl	1a000ff4 <xQueueGenericCreate>
1a0004c4:	4b18      	ldr	r3, [pc, #96]	; (1a000528 <driver_uart_init+0x9c>)
1a0004c6:	6018      	str	r0, [r3, #0]
	queIsrRx = xQueueCreate(UART_N_QUEUES, sizeof(uint8_t)); // solo vamos a transmitir un char por cada vez
1a0004c8:	2001      	movs	r0, #1
1a0004ca:	4601      	mov	r1, r0
1a0004cc:	2200      	movs	r2, #0
1a0004ce:	f000 fd91 	bl	1a000ff4 <xQueueGenericCreate>
1a0004d2:	4b16      	ldr	r3, [pc, #88]	; (1a00052c <driver_uart_init+0xa0>)
1a0004d4:	6018      	str	r0, [r3, #0]

	driver_uart_semaforo_rx = xSemaphoreCreateBinary();
1a0004d6:	2001      	movs	r0, #1
1a0004d8:	2100      	movs	r1, #0
1a0004da:	2203      	movs	r2, #3
1a0004dc:	f000 fd8a 	bl	1a000ff4 <xQueueGenericCreate>
1a0004e0:	4b13      	ldr	r3, [pc, #76]	; (1a000530 <driver_uart_init+0xa4>)
1a0004e2:	6018      	str	r0, [r3, #0]

	Driver_Buffer_RX.CantidadDatos = NDATOS;
1a0004e4:	4a13      	ldr	r2, [pc, #76]	; (1a000534 <driver_uart_init+0xa8>)
1a0004e6:	f44f 7182 	mov.w	r1, #260	; 0x104
1a0004ea:	f8a2 110a 	strh.w	r1, [r2, #266]	; 0x10a
	Driver_Buffer_RX.Ind_escritura = 0;
1a0004ee:	2300      	movs	r3, #0
1a0004f0:	f8a2 3106 	strh.w	r3, [r2, #262]	; 0x106
	Driver_Buffer_RX.Ind_lectura 	 = 0;
1a0004f4:	f8a2 3104 	strh.w	r3, [r2, #260]	; 0x104

	Driver_Buffer_TX.CantidadDatos = NDATOS;
1a0004f8:	4a0f      	ldr	r2, [pc, #60]	; (1a000538 <driver_uart_init+0xac>)
1a0004fa:	f8a2 110a 	strh.w	r1, [r2, #266]	; 0x10a
	Driver_Buffer_TX.Ind_escritura = 0;
1a0004fe:	f8a2 3106 	strh.w	r3, [r2, #262]	; 0x106
	Driver_Buffer_TX.Ind_lectura 	 = 0;
1a000502:	f8a2 3104 	strh.w	r3, [r2, #260]	; 0x104

	// linea de test
	driver_uart_extern_write_string_to_buffer_tx(&buffer_test, 9);   //  Probamos la transmision de datos
1a000506:	4c0d      	ldr	r4, [pc, #52]	; (1a00053c <driver_uart_init+0xb0>)
1a000508:	4620      	mov	r0, r4
1a00050a:	2109      	movs	r1, #9
1a00050c:	f7ff ff96 	bl	1a00043c <driver_uart_extern_write_string_to_buffer_tx>
	driver_uart_extern_write_string_to_buffer_tx(&buffer_test, 9);   //  Probamos la transmision de datos
1a000510:	4620      	mov	r0, r4
1a000512:	2109      	movs	r1, #9
1a000514:	f7ff ff92 	bl	1a00043c <driver_uart_extern_write_string_to_buffer_tx>
1a000518:	bd38      	pop	{r3, r4, r5, pc}
1a00051a:	bf00      	nop
1a00051c:	10004152 	.word	0x10004152
1a000520:	10000000 	.word	0x10000000
1a000524:	1000426c 	.word	0x1000426c
1a000528:	10004040 	.word	0x10004040
1a00052c:	10004268 	.word	0x10004268
1a000530:	10004154 	.word	0x10004154
1a000534:	10004044 	.word	0x10004044
1a000538:	10004158 	.word	0x10004158
1a00053c:	1000000c 	.word	0x1000000c

1a000540 <QMPool_init>:
* The following example illustrates how to invoke QMPool_init():
* @include qmp_init.c
*/
void QMPool_init(QMPool * const me, void * const poolSto,
                 uint_fast32_t poolSize, uint_fast16_t blockSize)
{
1a000540:	b4f0      	push	{r4, r5, r6, r7}
    QFreeBlock *fb;
    uint_fast16_t nblocks;
	
    me->free_head = poolSto;
1a000542:	6001      	str	r1, [r0, #0]

    /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
1a000544:	2404      	movs	r4, #4
1a000546:	8184      	strh	r4, [r0, #12]
    nblocks = (uint_fast16_t)1;/* #free blocks that fit in one memory block */
1a000548:	2601      	movs	r6, #1
    while (me->blockSize < (QMPoolSize)blockSize) {
1a00054a:	e002      	b.n	1a000552 <QMPool_init+0x12>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
1a00054c:	3404      	adds	r4, #4
1a00054e:	8184      	strh	r4, [r0, #12]
        ++nblocks;
1a000550:	3601      	adds	r6, #1
    me->free_head = poolSto;

    /* round up the blockSize to fit an integer # free blocks, no division */
    me->blockSize = (QMPoolSize)sizeof(QFreeBlock);  /* start with just one */
    nblocks = (uint_fast16_t)1;/* #free blocks that fit in one memory block */
    while (me->blockSize < (QMPoolSize)blockSize) {
1a000552:	8984      	ldrh	r4, [r0, #12]
1a000554:	b29d      	uxth	r5, r3
1a000556:	42ac      	cmp	r4, r5
1a000558:	d3f8      	bcc.n	1a00054c <QMPool_init+0xc>
        me->blockSize += (QMPoolSize)sizeof(QFreeBlock);
        ++nblocks;
    }
    blockSize = (uint_fast16_t)me->blockSize; /* round-up to nearest block */
1a00055a:	4627      	mov	r7, r4

    /* chain all blocks together in a free-list... */
    poolSize -= (uint_fast32_t)blockSize; /* don't count the last block */
1a00055c:	1b14      	subs	r4, r2, r4
    me->nTot  = (QMPoolCtr)1;    /* the last block already in the pool */
1a00055e:	2301      	movs	r3, #1
1a000560:	81c3      	strh	r3, [r0, #14]
    fb = (QFreeBlock *)me->free_head; /* start at the head of the free list */
1a000562:	6803      	ldr	r3, [r0, #0]

    /* chain all blocks together in a free-list... */
    while (poolSize >= (uint_fast32_t)blockSize) {
1a000564:	e007      	b.n	1a000576 <QMPool_init+0x36>
        fb->next = &QF_PTR_AT_(fb, nblocks);/*point next link to next block */
1a000566:	eb03 0286 	add.w	r2, r3, r6, lsl #2
1a00056a:	601a      	str	r2, [r3, #0]
        fb = fb->next;           /* advance to the next block */
1a00056c:	681b      	ldr	r3, [r3, #0]
        poolSize -= (uint_fast32_t)blockSize; /* reduce available pool size */
1a00056e:	1be4      	subs	r4, r4, r7
        ++me->nTot;              /* increment the number of blocks so far */
1a000570:	89c5      	ldrh	r5, [r0, #14]
1a000572:	3501      	adds	r5, #1
1a000574:	81c5      	strh	r5, [r0, #14]
    poolSize -= (uint_fast32_t)blockSize; /* don't count the last block */
    me->nTot  = (QMPoolCtr)1;    /* the last block already in the pool */
    fb = (QFreeBlock *)me->free_head; /* start at the head of the free list */

    /* chain all blocks together in a free-list... */
    while (poolSize >= (uint_fast32_t)blockSize) {
1a000576:	42bc      	cmp	r4, r7
1a000578:	d2f5      	bcs.n	1a000566 <QMPool_init+0x26>
        fb = fb->next;           /* advance to the next block */
        poolSize -= (uint_fast32_t)blockSize; /* reduce available pool size */
        ++me->nTot;              /* increment the number of blocks so far */
    }

    fb->next  = (QFreeBlock *)0; /* the last link points to NULL */
1a00057a:	2200      	movs	r2, #0
1a00057c:	601a      	str	r2, [r3, #0]
    me->nFree = me->nTot;        /* all blocks are free */
1a00057e:	89c2      	ldrh	r2, [r0, #14]
1a000580:	8202      	strh	r2, [r0, #16]
    me->nMin  = me->nTot;        /* the minimum number of free blocks */
1a000582:	8242      	strh	r2, [r0, #18]
    me->start = poolSto;         /* the original start this pool buffer */
1a000584:	6041      	str	r1, [r0, #4]
    me->end   = fb;              /* the last block in this pool */
1a000586:	6083      	str	r3, [r0, #8]
}
1a000588:	bcf0      	pop	{r4, r5, r6, r7}
1a00058a:	4770      	bx	lr

1a00058c <QMPool_put>:
*
* @usage
* The following example illustrates how to use QMPool_put():
* @include qmp_use.c
*/
void QMPool_put(QMPool * const me, void *b) {
1a00058c:	b538      	push	{r3, r4, r5, lr}
1a00058e:	4604      	mov	r4, r0
1a000590:	460d      	mov	r5, r1
    
    /** @pre # free blocks cannot exceed the total # blocks and
    * the block pointer must be from this pool.
    */
	portENTER_CRITICAL(); //Enter on critical section
1a000592:	f001 fff5 	bl	1a002580 <vPortEnterCritical>

    ((QFreeBlock *)b)->next = (QFreeBlock *)me->free_head;/* link into list */
1a000596:	6823      	ldr	r3, [r4, #0]
1a000598:	602b      	str	r3, [r5, #0]
    me->free_head = b;      /* set as new head of the free list */
1a00059a:	6025      	str	r5, [r4, #0]
    ++me->nFree;            /* one more free block in this pool */
1a00059c:	8a23      	ldrh	r3, [r4, #16]
1a00059e:	3301      	adds	r3, #1
1a0005a0:	b29b      	uxth	r3, r3
1a0005a2:	8223      	strh	r3, [r4, #16]
    
    portEXIT_CRITICAL(); //Exit from critical section
1a0005a4:	f002 f80e 	bl	1a0025c4 <vPortExitCritical>
1a0005a8:	bd38      	pop	{r3, r4, r5, pc}
1a0005aa:	bf00      	nop

1a0005ac <QMPool_get>:
*
* @usage
* The following example illustrates how to use QMPool_get():
* @include qmp_use.c
*/
void *QMPool_get(QMPool * const me, uint_fast16_t const margin) {
1a0005ac:	b538      	push	{r3, r4, r5, lr}
1a0005ae:	4604      	mov	r4, r0
1a0005b0:	460d      	mov	r5, r1
    QFreeBlock *fb;
    
    portENTER_CRITICAL(); //Enter on critical section
1a0005b2:	f001 ffe5 	bl	1a002580 <vPortEnterCritical>

    /* have more free blocks than the requested margin? */
    if (me->nFree > (QMPoolCtr)margin) {
1a0005b6:	8a23      	ldrh	r3, [r4, #16]
1a0005b8:	b29b      	uxth	r3, r3
1a0005ba:	b2ad      	uxth	r5, r5
1a0005bc:	42ab      	cmp	r3, r5
1a0005be:	d913      	bls.n	1a0005e8 <QMPool_get+0x3c>
        void *fb_next;
        fb = (QFreeBlock *)me->free_head; /* get a free block */
1a0005c0:	6825      	ldr	r5, [r4, #0]

        fb_next = fb->next; /* put volatile to a temporary to avoid UB */
1a0005c2:	682a      	ldr	r2, [r5, #0]

        /* is the pool becoming empty? */
        --me->nFree; /* one less free block */
1a0005c4:	8a23      	ldrh	r3, [r4, #16]
1a0005c6:	3b01      	subs	r3, #1
1a0005c8:	b29b      	uxth	r3, r3
1a0005ca:	8223      	strh	r3, [r4, #16]
        if (me->nFree == (QMPoolCtr)0) {
1a0005cc:	8a23      	ldrh	r3, [r4, #16]
1a0005ce:	b29b      	uxth	r3, r3
1a0005d0:	b90b      	cbnz	r3, 1a0005d6 <QMPool_get+0x2a>

            me->nMin = (QMPoolCtr)0; /* remember that the pool got empty */
1a0005d2:	8263      	strh	r3, [r4, #18]
1a0005d4:	e006      	b.n	1a0005e4 <QMPool_get+0x38>
            * when the client code writes past the memory block, thus
            * corrupting the next block.
            */

            /* is the number of free blocks the new minimum so far? */
            if (me->nMin > me->nFree) {
1a0005d6:	8a61      	ldrh	r1, [r4, #18]
1a0005d8:	8a23      	ldrh	r3, [r4, #16]
1a0005da:	b29b      	uxth	r3, r3
1a0005dc:	4299      	cmp	r1, r3
1a0005de:	d901      	bls.n	1a0005e4 <QMPool_get+0x38>
                me->nMin = me->nFree; /* remember the new minimum */
1a0005e0:	8a23      	ldrh	r3, [r4, #16]
1a0005e2:	8263      	strh	r3, [r4, #18]
            }
        }

        me->free_head = fb_next; /* set the head to the next free block */
1a0005e4:	6022      	str	r2, [r4, #0]
1a0005e6:	e000      	b.n	1a0005ea <QMPool_get+0x3e>

    }
    /* don't have enough free blocks at this point */
    else {

    	fb = (QFreeBlock *)0;
1a0005e8:	2500      	movs	r5, #0

    }

    portEXIT_CRITICAL(); //Exit from critical section
1a0005ea:	f001 ffeb 	bl	1a0025c4 <vPortExitCritical>

    return fb;  /* return the block or NULL pointer to the caller */
}
1a0005ee:	4628      	mov	r0, r5
1a0005f0:	bd38      	pop	{r3, r4, r5, pc}
1a0005f2:	bf00      	nop

1a0005f4 <taskMedirPerformance>:
	}

	return 0;
}
/*========================[definiciones de tareas]===========================*/
static void taskMedirPerformance(void* taskParmPtr) {
1a0005f4:	b510      	push	{r4, lr}
1a0005f6:	b082      	sub	sp, #8

	while (TRUE) {

		i = 0;

		if (xQueueReceive(queMedirPerformance, &token, portMAX_DELAY) == pdTRUE){
1a0005f8:	4b13      	ldr	r3, [pc, #76]	; (1a000648 <taskMedirPerformance+0x54>)
1a0005fa:	6818      	ldr	r0, [r3, #0]
1a0005fc:	a901      	add	r1, sp, #4
1a0005fe:	f04f 32ff 	mov.w	r2, #4294967295
1a000602:	f000 fe59 	bl	1a0012b8 <xQueueReceive>
1a000606:	2801      	cmp	r0, #1
1a000608:	d1f6      	bne.n	1a0005f8 <taskMedirPerformance+0x4>
			token->tiempo_de_inicio = xTaskGetTickCount();
1a00060a:	9c01      	ldr	r4, [sp, #4]
1a00060c:	f001 f9f4 	bl	1a0019f8 <xTaskGetTickCount>
1a000610:	6120      	str	r0, [r4, #16]
	token_t * token;
	uint32_t i;

	while (TRUE) {

		i = 0;
1a000612:	2300      	movs	r3, #0

		if (xQueueReceive(queMedirPerformance, &token, portMAX_DELAY) == pdTRUE){
			token->tiempo_de_inicio = xTaskGetTickCount();
			while (i < token->payload[0]) {	// T bytes
1a000614:	e008      	b.n	1a000628 <taskMedirPerformance+0x34>
				i++;
1a000616:	3301      	adds	r3, #1

				if (token->payload[i] >= 'a' && token->payload[i] <= 'z') {
1a000618:	5cc8      	ldrb	r0, [r1, r3]
1a00061a:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
1a00061e:	b2d2      	uxtb	r2, r2
1a000620:	2a19      	cmp	r2, #25
1a000622:	d801      	bhi.n	1a000628 <taskMedirPerformance+0x34>
					token->payload[i] -= CTE_CONV_Mm;
1a000624:	3820      	subs	r0, #32
1a000626:	54c8      	strb	r0, [r1, r3]

		i = 0;

		if (xQueueReceive(queMedirPerformance, &token, portMAX_DELAY) == pdTRUE){
			token->tiempo_de_inicio = xTaskGetTickCount();
			while (i < token->payload[0]) {	// T bytes
1a000628:	9c01      	ldr	r4, [sp, #4]
1a00062a:	6861      	ldr	r1, [r4, #4]
1a00062c:	780a      	ldrb	r2, [r1, #0]
1a00062e:	429a      	cmp	r2, r3
1a000630:	d8f1      	bhi.n	1a000616 <taskMedirPerformance+0x22>

				if (token->payload[i] >= 'a' && token->payload[i] <= 'z') {
					token->payload[i] -= CTE_CONV_Mm;
				}
			}
			token->tiempo_de_fin = xTaskGetTickCount();
1a000632:	f001 f9e1 	bl	1a0019f8 <xTaskGetTickCount>
1a000636:	6160      	str	r0, [r4, #20]
			if (xQueueSend(queTransmision, &token, 0) == pdFALSE) {
1a000638:	4b04      	ldr	r3, [pc, #16]	; (1a00064c <taskMedirPerformance+0x58>)
1a00063a:	6818      	ldr	r0, [r3, #0]
1a00063c:	a901      	add	r1, sp, #4
1a00063e:	2200      	movs	r2, #0
1a000640:	4613      	mov	r3, r2
1a000642:	f000 fcff 	bl	1a001044 <xQueueGenericSend>
1a000646:	e7d7      	b.n	1a0005f8 <taskMedirPerformance+0x4>
1a000648:	100043c0 	.word	0x100043c0
1a00064c:	10004298 	.word	0x10004298

1a000650 <taskMinusculas>:
		}
	}
}

// Tarea Minusculizar
static void taskMinusculas(void* taskParmPtr) {
1a000650:	b500      	push	{lr}
1a000652:	b083      	sub	sp, #12
	uint32_t i;
	token_t * token;

	while (TRUE) {
		i = 0;
		if (xQueueReceive(queMinusculizar, &token, portMAX_DELAY) == pdTRUE) {
1a000654:	4b10      	ldr	r3, [pc, #64]	; (1a000698 <taskMinusculas+0x48>)
1a000656:	6818      	ldr	r0, [r3, #0]
1a000658:	a901      	add	r1, sp, #4
1a00065a:	f04f 32ff 	mov.w	r2, #4294967295
1a00065e:	f000 fe2b 	bl	1a0012b8 <xQueueReceive>
1a000662:	2801      	cmp	r0, #1
1a000664:	d1f6      	bne.n	1a000654 <taskMinusculas+0x4>
1a000666:	e009      	b.n	1a00067c <taskMinusculas+0x2c>

			while (i < token->payload[0]) {	// T bytes
				i++;
1a000668:	3301      	adds	r3, #1
				// Convierto a minusculas solo los caracteres en mayusculas
				if (token->payload[i] >= 'A' && token->payload[i] <= 'Z') {
1a00066a:	5cc8      	ldrb	r0, [r1, r3]
1a00066c:	f1a0 0241 	sub.w	r2, r0, #65	; 0x41
1a000670:	b2d2      	uxtb	r2, r2
1a000672:	2a19      	cmp	r2, #25
1a000674:	d803      	bhi.n	1a00067e <taskMinusculas+0x2e>
					token->payload[i] += CTE_CONV_Mm;
1a000676:	3020      	adds	r0, #32
1a000678:	54c8      	strb	r0, [r1, r3]
1a00067a:	e000      	b.n	1a00067e <taskMinusculas+0x2e>
1a00067c:	2300      	movs	r3, #0

	while (TRUE) {
		i = 0;
		if (xQueueReceive(queMinusculizar, &token, portMAX_DELAY) == pdTRUE) {

			while (i < token->payload[0]) {	// T bytes
1a00067e:	9a01      	ldr	r2, [sp, #4]
1a000680:	6851      	ldr	r1, [r2, #4]
1a000682:	780a      	ldrb	r2, [r1, #0]
1a000684:	429a      	cmp	r2, r3
1a000686:	d8ef      	bhi.n	1a000668 <taskMinusculas+0x18>
				// Convierto a minusculas solo los caracteres en mayusculas
				if (token->payload[i] >= 'A' && token->payload[i] <= 'Z') {
					token->payload[i] += CTE_CONV_Mm;
				}
			}
			if (xQueueSend(queTransmision, &token, 0) == pdFALSE) {
1a000688:	4b04      	ldr	r3, [pc, #16]	; (1a00069c <taskMinusculas+0x4c>)
1a00068a:	6818      	ldr	r0, [r3, #0]
1a00068c:	a901      	add	r1, sp, #4
1a00068e:	2200      	movs	r2, #0
1a000690:	4613      	mov	r3, r2
1a000692:	f000 fcd7 	bl	1a001044 <xQueueGenericSend>
1a000696:	e7dd      	b.n	1a000654 <taskMinusculas+0x4>
1a000698:	100043dc 	.word	0x100043dc
1a00069c:	10004298 	.word	0x10004298

1a0006a0 <taskMayusculas>:
		}
	}
}

// Tarea Mayusculizar
static void taskMayusculas(void* taskParmPtr) {
1a0006a0:	b500      	push	{lr}
1a0006a2:	b083      	sub	sp, #12
	uint32_t i;
	token_t * token;

	while (TRUE) {
		i = 0;
		if (xQueueReceive(queMayusculizar, &token, portMAX_DELAY) == pdTRUE) {
1a0006a4:	4b10      	ldr	r3, [pc, #64]	; (1a0006e8 <taskMayusculas+0x48>)
1a0006a6:	6818      	ldr	r0, [r3, #0]
1a0006a8:	a901      	add	r1, sp, #4
1a0006aa:	f04f 32ff 	mov.w	r2, #4294967295
1a0006ae:	f000 fe03 	bl	1a0012b8 <xQueueReceive>
1a0006b2:	2801      	cmp	r0, #1
1a0006b4:	d1f6      	bne.n	1a0006a4 <taskMayusculas+0x4>
1a0006b6:	e009      	b.n	1a0006cc <taskMayusculas+0x2c>

			while (i < token->payload[0]) {
				i++;
1a0006b8:	3301      	adds	r3, #1
				// Convierto a mayusculas solo los caracteres en minusculas
				if (token->payload[i] >= 'a' && token->payload[i] <= 'z') {
1a0006ba:	5cc8      	ldrb	r0, [r1, r3]
1a0006bc:	f1a0 0261 	sub.w	r2, r0, #97	; 0x61
1a0006c0:	b2d2      	uxtb	r2, r2
1a0006c2:	2a19      	cmp	r2, #25
1a0006c4:	d803      	bhi.n	1a0006ce <taskMayusculas+0x2e>
					token->payload[i] -= CTE_CONV_Mm;
1a0006c6:	3820      	subs	r0, #32
1a0006c8:	54c8      	strb	r0, [r1, r3]
1a0006ca:	e000      	b.n	1a0006ce <taskMayusculas+0x2e>
1a0006cc:	2300      	movs	r3, #0

	while (TRUE) {
		i = 0;
		if (xQueueReceive(queMayusculizar, &token, portMAX_DELAY) == pdTRUE) {

			while (i < token->payload[0]) {
1a0006ce:	9a01      	ldr	r2, [sp, #4]
1a0006d0:	6851      	ldr	r1, [r2, #4]
1a0006d2:	780a      	ldrb	r2, [r1, #0]
1a0006d4:	429a      	cmp	r2, r3
1a0006d6:	d8ef      	bhi.n	1a0006b8 <taskMayusculas+0x18>
				// Convierto a mayusculas solo los caracteres en minusculas
				if (token->payload[i] >= 'a' && token->payload[i] <= 'z') {
					token->payload[i] -= CTE_CONV_Mm;
				}
			}
			if (xQueueSend(queTransmision, &token, 0) == pdFALSE) {
1a0006d8:	4b04      	ldr	r3, [pc, #16]	; (1a0006ec <taskMayusculas+0x4c>)
1a0006da:	6818      	ldr	r0, [r3, #0]
1a0006dc:	a901      	add	r1, sp, #4
1a0006de:	2200      	movs	r2, #0
1a0006e0:	4613      	mov	r3, r2
1a0006e2:	f000 fcaf 	bl	1a001044 <xQueueGenericSend>
1a0006e6:	e7dd      	b.n	1a0006a4 <taskMayusculas+0x4>
1a0006e8:	100043c4 	.word	0x100043c4
1a0006ec:	10004298 	.word	0x10004298

1a0006f0 <taskValidarTx>:
		}
	}
}

// Tarea de transmision
static void taskValidarTx(void* taskParmPtr) {
1a0006f0:	b570      	push	{r4, r5, r6, lr}
1a0006f2:	b0c6      	sub	sp, #280	; 0x118
	uint8_t dataPointer[260], dataSize, OP,j = 0;
	uint16_t i;
	token_t *token;
	uint8_t *timePtr;

	tiempoInicioCiclo = xTaskGetTickCount();
1a0006f4:	f001 f980 	bl	1a0019f8 <xTaskGetTickCount>
1a0006f8:	9045      	str	r0, [sp, #276]	; 0x114

	while (TRUE) {

		vTaskDelayUntil(&tiempoInicioCiclo, 100 / portTICK_RATE_MS);
1a0006fa:	a845      	add	r0, sp, #276	; 0x114
1a0006fc:	2164      	movs	r1, #100	; 0x64
1a0006fe:	f001 fa8f 	bl	1a001c20 <vTaskDelayUntil>

		if (xQueueReceive(queTransmision, &token, 0) == pdTRUE) {
1a000702:	4b75      	ldr	r3, [pc, #468]	; (1a0008d8 <taskValidarTx+0x1e8>)
1a000704:	6818      	ldr	r0, [r3, #0]
1a000706:	a901      	add	r1, sp, #4
1a000708:	2200      	movs	r2, #0
1a00070a:	f000 fdd5 	bl	1a0012b8 <xQueueReceive>
1a00070e:	2801      	cmp	r0, #1
1a000710:	d1f3      	bne.n	1a0006fa <taskValidarTx+0xa>
			//Se rearma la trama de salida
			dataPointer[0] = STX;
1a000712:	2355      	movs	r3, #85	; 0x55
1a000714:	f88d 3008 	strb.w	r3, [sp, #8]
			dataPointer[1] = token->op;
1a000718:	9c01      	ldr	r4, [sp, #4]
1a00071a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
1a00071e:	f88d 3009 	strb.w	r3, [sp, #9]
			for (i = 0; i <= token->payload[0]; i++) {
1a000722:	2300      	movs	r3, #0
1a000724:	e005      	b.n	1a000732 <taskValidarTx+0x42>
				dataPointer[2 + i] = token->payload[i];
1a000726:	1c99      	adds	r1, r3, #2
1a000728:	5cd0      	ldrb	r0, [r2, r3]
1a00072a:	aa02      	add	r2, sp, #8
1a00072c:	5450      	strb	r0, [r2, r1]

		if (xQueueReceive(queTransmision, &token, 0) == pdTRUE) {
			//Se rearma la trama de salida
			dataPointer[0] = STX;
			dataPointer[1] = token->op;
			for (i = 0; i <= token->payload[0]; i++) {
1a00072e:	3301      	adds	r3, #1
1a000730:	b29b      	uxth	r3, r3
1a000732:	6862      	ldr	r2, [r4, #4]
1a000734:	7811      	ldrb	r1, [r2, #0]
1a000736:	b288      	uxth	r0, r1
1a000738:	4298      	cmp	r0, r3
1a00073a:	d2f4      	bcs.n	1a000726 <taskValidarTx+0x36>
				dataPointer[2 + i] = token->payload[i];
			}
			dataPointer[3 + token->payload[0]] = ETX;
1a00073c:	3103      	adds	r1, #3
1a00073e:	ae02      	add	r6, sp, #8
1a000740:	2340      	movs	r3, #64	; 0x40
1a000742:	5473      	strb	r3, [r6, r1]

			dataSize = dataPointer[2];
1a000744:	f89d 500a 	ldrb.w	r5, [sp, #10]

			//Cuando se envia la trama de salida a la interfaz de la
			//uart tx se toma el tiempo de salida
			token->tiempo_de_salida = xTaskGetTickCount();
1a000748:	f001 f956 	bl	1a0019f8 <xTaskGetTickCount>
1a00074c:	61a0      	str	r0, [r4, #24]

			driver_uart_extern_write_string_to_buffer_tx(&dataPointer,
					dataPointer[2] + N_BYTES_HEADER);
1a00074e:	78b1      	ldrb	r1, [r6, #2]

			//Cuando se envia la trama de salida a la interfaz de la
			//uart tx se toma el tiempo de salida
			token->tiempo_de_salida = xTaskGetTickCount();

			driver_uart_extern_write_string_to_buffer_tx(&dataPointer,
1a000750:	4630      	mov	r0, r6
1a000752:	3104      	adds	r1, #4
1a000754:	f7ff fe72 	bl	1a00043c <driver_uart_extern_write_string_to_buffer_tx>
					dataPointer[2] + N_BYTES_HEADER);

			memset(dataPointer, '\0', 260);
1a000758:	4630      	mov	r0, r6
1a00075a:	2100      	movs	r1, #0
1a00075c:	f44f 7282 	mov.w	r2, #260	; 0x104
1a000760:	f003 fbb7 	bl	1a003ed2 <memset>

			//cuando se finaliza se toma el tiempo de transmision
			token->tiempo_de_transmision = xTaskGetTickCount();
1a000764:	9c01      	ldr	r4, [sp, #4]
1a000766:	f001 f947 	bl	1a0019f8 <xTaskGetTickCount>
1a00076a:	61e0      	str	r0, [r4, #28]

			//Se parsean los tiempos y se cargan en un vector
			//para enviarlos por la uart
			unionByte.time = token->tiempo_de_llegada;
1a00076c:	9a01      	ldr	r2, [sp, #4]
1a00076e:	6893      	ldr	r3, [r2, #8]
1a000770:	9344      	str	r3, [sp, #272]	; 0x110
			for(j=0;j<4;j++){
1a000772:	2300      	movs	r3, #0
1a000774:	e007      	b.n	1a000786 <taskValidarTx+0x96>
				dataPointer[j] = unionByte.timePtr[3-j];
1a000776:	a946      	add	r1, sp, #280	; 0x118
1a000778:	1ac9      	subs	r1, r1, r3
1a00077a:	f811 0c05 	ldrb.w	r0, [r1, #-5]
1a00077e:	a902      	add	r1, sp, #8
1a000780:	54c8      	strb	r0, [r1, r3]
			token->tiempo_de_transmision = xTaskGetTickCount();

			//Se parsean los tiempos y se cargan en un vector
			//para enviarlos por la uart
			unionByte.time = token->tiempo_de_llegada;
			for(j=0;j<4;j++){
1a000782:	3301      	adds	r3, #1
1a000784:	b2db      	uxtb	r3, r3
1a000786:	2b03      	cmp	r3, #3
1a000788:	d9f5      	bls.n	1a000776 <taskValidarTx+0x86>
				dataPointer[j] = unionByte.timePtr[3-j];
			}

			unionByte.time = token->tiempo_de_recepcion;
1a00078a:	68d3      	ldr	r3, [r2, #12]
1a00078c:	9344      	str	r3, [sp, #272]	; 0x110
			for(j=0;j<4;j++){
1a00078e:	2300      	movs	r3, #0
1a000790:	e008      	b.n	1a0007a4 <taskValidarTx+0xb4>
				dataPointer[4 + j] = unionByte.timePtr[3-j];
1a000792:	1d19      	adds	r1, r3, #4
1a000794:	a846      	add	r0, sp, #280	; 0x118
1a000796:	1ac0      	subs	r0, r0, r3
1a000798:	f810 4c05 	ldrb.w	r4, [r0, #-5]
1a00079c:	a802      	add	r0, sp, #8
1a00079e:	5444      	strb	r4, [r0, r1]
			for(j=0;j<4;j++){
				dataPointer[j] = unionByte.timePtr[3-j];
			}

			unionByte.time = token->tiempo_de_recepcion;
			for(j=0;j<4;j++){
1a0007a0:	3301      	adds	r3, #1
1a0007a2:	b2db      	uxtb	r3, r3
1a0007a4:	2b03      	cmp	r3, #3
1a0007a6:	d9f4      	bls.n	1a000792 <taskValidarTx+0xa2>
				dataPointer[4 + j] = unionByte.timePtr[3-j];
			}

			unionByte.time = token->tiempo_de_inicio;
1a0007a8:	6913      	ldr	r3, [r2, #16]
1a0007aa:	9344      	str	r3, [sp, #272]	; 0x110
			for(j=0;j<4;j++){
1a0007ac:	2300      	movs	r3, #0
1a0007ae:	e009      	b.n	1a0007c4 <taskValidarTx+0xd4>
				dataPointer[8 + j] = unionByte.timePtr[3-j];
1a0007b0:	f103 0108 	add.w	r1, r3, #8
1a0007b4:	a846      	add	r0, sp, #280	; 0x118
1a0007b6:	1ac0      	subs	r0, r0, r3
1a0007b8:	f810 4c05 	ldrb.w	r4, [r0, #-5]
1a0007bc:	a802      	add	r0, sp, #8
1a0007be:	5444      	strb	r4, [r0, r1]
			for(j=0;j<4;j++){
				dataPointer[4 + j] = unionByte.timePtr[3-j];
			}

			unionByte.time = token->tiempo_de_inicio;
			for(j=0;j<4;j++){
1a0007c0:	3301      	adds	r3, #1
1a0007c2:	b2db      	uxtb	r3, r3
1a0007c4:	2b03      	cmp	r3, #3
1a0007c6:	d9f3      	bls.n	1a0007b0 <taskValidarTx+0xc0>
				dataPointer[8 + j] = unionByte.timePtr[3-j];
			}
			unionByte.time = token->tiempo_de_fin;
1a0007c8:	6953      	ldr	r3, [r2, #20]
1a0007ca:	9344      	str	r3, [sp, #272]	; 0x110
			for(j=0;j<4;j++){
1a0007cc:	2300      	movs	r3, #0
1a0007ce:	e009      	b.n	1a0007e4 <taskValidarTx+0xf4>
				dataPointer[12 + j] = unionByte.timePtr[3-j];
1a0007d0:	f103 010c 	add.w	r1, r3, #12
1a0007d4:	a846      	add	r0, sp, #280	; 0x118
1a0007d6:	1ac0      	subs	r0, r0, r3
1a0007d8:	f810 4c05 	ldrb.w	r4, [r0, #-5]
1a0007dc:	a802      	add	r0, sp, #8
1a0007de:	5444      	strb	r4, [r0, r1]
			unionByte.time = token->tiempo_de_inicio;
			for(j=0;j<4;j++){
				dataPointer[8 + j] = unionByte.timePtr[3-j];
			}
			unionByte.time = token->tiempo_de_fin;
			for(j=0;j<4;j++){
1a0007e0:	3301      	adds	r3, #1
1a0007e2:	b2db      	uxtb	r3, r3
1a0007e4:	2b03      	cmp	r3, #3
1a0007e6:	d9f3      	bls.n	1a0007d0 <taskValidarTx+0xe0>
				dataPointer[12 + j] = unionByte.timePtr[3-j];
			}

			unionByte.time = token->tiempo_de_salida;
1a0007e8:	6993      	ldr	r3, [r2, #24]
1a0007ea:	9344      	str	r3, [sp, #272]	; 0x110
			for(j=0;j<4;j++){
1a0007ec:	2300      	movs	r3, #0
1a0007ee:	e009      	b.n	1a000804 <taskValidarTx+0x114>
				dataPointer[16 + j] = unionByte.timePtr[3-j];
1a0007f0:	f103 0110 	add.w	r1, r3, #16
1a0007f4:	a846      	add	r0, sp, #280	; 0x118
1a0007f6:	1ac0      	subs	r0, r0, r3
1a0007f8:	f810 4c05 	ldrb.w	r4, [r0, #-5]
1a0007fc:	a802      	add	r0, sp, #8
1a0007fe:	5444      	strb	r4, [r0, r1]
			for(j=0;j<4;j++){
				dataPointer[12 + j] = unionByte.timePtr[3-j];
			}

			unionByte.time = token->tiempo_de_salida;
			for(j=0;j<4;j++){
1a000800:	3301      	adds	r3, #1
1a000802:	b2db      	uxtb	r3, r3
1a000804:	2b03      	cmp	r3, #3
1a000806:	d9f3      	bls.n	1a0007f0 <taskValidarTx+0x100>
				dataPointer[16 + j] = unionByte.timePtr[3-j];
			}

			unionByte.time = token->tiempo_de_transmision;
1a000808:	69d3      	ldr	r3, [r2, #28]
1a00080a:	9344      	str	r3, [sp, #272]	; 0x110
			for(j=0;j<4;j++){
1a00080c:	2300      	movs	r3, #0
1a00080e:	e009      	b.n	1a000824 <taskValidarTx+0x134>
				dataPointer[20 + j] = unionByte.timePtr[3-j];
1a000810:	a946      	add	r1, sp, #280	; 0x118
1a000812:	1ac9      	subs	r1, r1, r3
1a000814:	f811 0c05 	ldrb.w	r0, [r1, #-5]
1a000818:	a946      	add	r1, sp, #280	; 0x118
1a00081a:	4419      	add	r1, r3
1a00081c:	f801 0cfc 	strb.w	r0, [r1, #-252]
			for(j=0;j<4;j++){
				dataPointer[16 + j] = unionByte.timePtr[3-j];
			}

			unionByte.time = token->tiempo_de_transmision;
			for(j=0;j<4;j++){
1a000820:	3301      	adds	r3, #1
1a000822:	b2db      	uxtb	r3, r3
1a000824:	2b03      	cmp	r3, #3
1a000826:	d9f3      	bls.n	1a000810 <taskValidarTx+0x120>
				dataPointer[20 + j] = unionByte.timePtr[3-j];
			}

			unionByte16.var = token->largo_del_paquete;
1a000828:	8c13      	ldrh	r3, [r2, #32]
1a00082a:	f8ad 310c 	strh.w	r3, [sp, #268]	; 0x10c
			for(j=0;j<2;j++){
1a00082e:	2300      	movs	r3, #0
1a000830:	e009      	b.n	1a000846 <taskValidarTx+0x156>
				dataPointer[24 + j] = unionByte16.varPtr[1-j];
1a000832:	a946      	add	r1, sp, #280	; 0x118
1a000834:	1ac9      	subs	r1, r1, r3
1a000836:	f811 0c0b 	ldrb.w	r0, [r1, #-11]
1a00083a:	a946      	add	r1, sp, #280	; 0x118
1a00083c:	4419      	add	r1, r3
1a00083e:	f801 0cf8 	strb.w	r0, [r1, #-248]
			for(j=0;j<4;j++){
				dataPointer[20 + j] = unionByte.timePtr[3-j];
			}

			unionByte16.var = token->largo_del_paquete;
			for(j=0;j<2;j++){
1a000842:	3301      	adds	r3, #1
1a000844:	b2db      	uxtb	r3, r3
1a000846:	2b01      	cmp	r3, #1
1a000848:	d9f3      	bls.n	1a000832 <taskValidarTx+0x142>
				dataPointer[24 + j] = unionByte16.varPtr[1-j];
			}

			unionByte16.var = token->memoria_alojada;
1a00084a:	8c53      	ldrh	r3, [r2, #34]	; 0x22
1a00084c:	f8ad 310c 	strh.w	r3, [sp, #268]	; 0x10c
			for(j=0;j<2;j++){
1a000850:	2300      	movs	r3, #0
1a000852:	e009      	b.n	1a000868 <taskValidarTx+0x178>
				dataPointer[26 + j] = unionByte16.varPtr[1-j];
1a000854:	a946      	add	r1, sp, #280	; 0x118
1a000856:	1ac9      	subs	r1, r1, r3
1a000858:	f811 0c0b 	ldrb.w	r0, [r1, #-11]
1a00085c:	a946      	add	r1, sp, #280	; 0x118
1a00085e:	4419      	add	r1, r3
1a000860:	f801 0cf6 	strb.w	r0, [r1, #-246]
			for(j=0;j<2;j++){
				dataPointer[24 + j] = unionByte16.varPtr[1-j];
			}

			unionByte16.var = token->memoria_alojada;
			for(j=0;j<2;j++){
1a000864:	3301      	adds	r3, #1
1a000866:	b2db      	uxtb	r3, r3
1a000868:	2b01      	cmp	r3, #1
1a00086a:	d9f3      	bls.n	1a000854 <taskValidarTx+0x164>
				dataPointer[26 + j] = unionByte16.varPtr[1-j];
			}

			unionByte.time = token->id_de_paquete;
1a00086c:	6813      	ldr	r3, [r2, #0]
1a00086e:	9344      	str	r3, [sp, #272]	; 0x110
			for(j=0;j<4;j++){
1a000870:	2300      	movs	r3, #0
1a000872:	e009      	b.n	1a000888 <taskValidarTx+0x198>
				dataPointer[28 + j] = unionByte.timePtr[3-j];
1a000874:	aa46      	add	r2, sp, #280	; 0x118
1a000876:	1ad2      	subs	r2, r2, r3
1a000878:	f812 1c05 	ldrb.w	r1, [r2, #-5]
1a00087c:	aa46      	add	r2, sp, #280	; 0x118
1a00087e:	441a      	add	r2, r3
1a000880:	f802 1cf4 	strb.w	r1, [r2, #-244]
			for(j=0;j<2;j++){
				dataPointer[26 + j] = unionByte16.varPtr[1-j];
			}

			unionByte.time = token->id_de_paquete;
			for(j=0;j<4;j++){
1a000884:	3301      	adds	r3, #1
1a000886:	b2db      	uxtb	r3, r3
1a000888:	2b03      	cmp	r3, #3
1a00088a:	d9f3      	bls.n	1a000874 <taskValidarTx+0x184>
				dataPointer[28 + j] = unionByte.timePtr[3-j];
			}

			//Se envia el vector de tiempos por la uart
			driver_uart_extern_write_string_to_buffer_tx(&dataPointer,
1a00088c:	a802      	add	r0, sp, #8
1a00088e:	2120      	movs	r1, #32
1a000890:	f7ff fdd4 	bl	1a00043c <driver_uart_extern_write_string_to_buffer_tx>
					TIME_LENGTH_VECTOR);

			// Se liberan los pools de memoria alocados
			if (dataSize <= 10) {
1a000894:	2d0a      	cmp	r5, #10
1a000896:	d805      	bhi.n	1a0008a4 <taskValidarTx+0x1b4>
				QMPool_put(&mem_pool_1, token->payload);
1a000898:	9b01      	ldr	r3, [sp, #4]
1a00089a:	4810      	ldr	r0, [pc, #64]	; (1a0008dc <taskValidarTx+0x1ec>)
1a00089c:	6859      	ldr	r1, [r3, #4]
1a00089e:	f7ff fe75 	bl	1a00058c <QMPool_put>
1a0008a2:	e014      	b.n	1a0008ce <taskValidarTx+0x1de>
			} else if (dataSize <= 50) {
1a0008a4:	2d32      	cmp	r5, #50	; 0x32
1a0008a6:	d805      	bhi.n	1a0008b4 <taskValidarTx+0x1c4>
				QMPool_put(&mem_pool_2, token->payload);
1a0008a8:	9b01      	ldr	r3, [sp, #4]
1a0008aa:	480d      	ldr	r0, [pc, #52]	; (1a0008e0 <taskValidarTx+0x1f0>)
1a0008ac:	6859      	ldr	r1, [r3, #4]
1a0008ae:	f7ff fe6d 	bl	1a00058c <QMPool_put>
1a0008b2:	e00c      	b.n	1a0008ce <taskValidarTx+0x1de>
			} else if (dataSize <= 100) {
1a0008b4:	2d64      	cmp	r5, #100	; 0x64
1a0008b6:	d805      	bhi.n	1a0008c4 <taskValidarTx+0x1d4>
				QMPool_put(&mem_pool_3, token->payload);
1a0008b8:	9b01      	ldr	r3, [sp, #4]
1a0008ba:	480a      	ldr	r0, [pc, #40]	; (1a0008e4 <taskValidarTx+0x1f4>)
1a0008bc:	6859      	ldr	r1, [r3, #4]
1a0008be:	f7ff fe65 	bl	1a00058c <QMPool_put>
1a0008c2:	e004      	b.n	1a0008ce <taskValidarTx+0x1de>
			} else {
				QMPool_put(&mem_pool_4, token->payload);
1a0008c4:	9b01      	ldr	r3, [sp, #4]
1a0008c6:	4808      	ldr	r0, [pc, #32]	; (1a0008e8 <taskValidarTx+0x1f8>)
1a0008c8:	6859      	ldr	r1, [r3, #4]
1a0008ca:	f7ff fe5f 	bl	1a00058c <QMPool_put>
			}
			QMPool_put(&mem_token_pool, token);
1a0008ce:	4807      	ldr	r0, [pc, #28]	; (1a0008ec <taskValidarTx+0x1fc>)
1a0008d0:	9901      	ldr	r1, [sp, #4]
1a0008d2:	f7ff fe5b 	bl	1a00058c <QMPool_put>
1a0008d6:	e710      	b.n	1a0006fa <taskValidarTx+0xa>
1a0008d8:	10004298 	.word	0x10004298
1a0008dc:	100043c8 	.word	0x100043c8
1a0008e0:	10004270 	.word	0x10004270
1a0008e4:	100043ac 	.word	0x100043ac
1a0008e8:	100043e0 	.word	0x100043e0
1a0008ec:	10004284 	.word	0x10004284

1a0008f0 <taskValidarRx>:
		}
	}
}

// Implementacion de funcion de la tarea
static void taskValidarRx(void* taskParmPtr) {
1a0008f0:	b570      	push	{r4, r5, r6, lr}
1a0008f2:	b0c6      	sub	sp, #280	; 0x118
	fsmStruct_t fsmStruct;
	uint8_t dataPointer[260], dataSize, OP;
	uint8_t * block1;
	token_t * blockToken;
	uint8_t i;
	uint8_t datoRx = 0;
1a0008f4:	2500      	movs	r5, #0
1a0008f6:	f88d 5003 	strb.w	r5, [sp, #3]
	uint32_t id = 0;

	// inicializo la maquina de estados de recepcion de la trama
	fsmBufferRxInit(&bufferStruct, &fsmStruct);
1a0008fa:	a803      	add	r0, sp, #12
1a0008fc:	a902      	add	r1, sp, #8
1a0008fe:	f000 f933 	bl	1a000b68 <fsmBufferRxInit>

	while (TRUE) {

		if (xQueueReceive(queIsrRx, &datoRx, portMAX_DELAY) == pdTRUE) {
1a000902:	4b3b      	ldr	r3, [pc, #236]	; (1a0009f0 <taskValidarRx+0x100>)
1a000904:	6818      	ldr	r0, [r3, #0]
1a000906:	f10d 0103 	add.w	r1, sp, #3
1a00090a:	f04f 32ff 	mov.w	r2, #4294967295
1a00090e:	f000 fcd3 	bl	1a0012b8 <xQueueReceive>
1a000912:	2801      	cmp	r0, #1
1a000914:	d1f5      	bne.n	1a000902 <taskValidarRx+0x12>

			fsmBufferRxAct(datoRx, &bufferStruct, &fsmStruct);
1a000916:	f89d 0003 	ldrb.w	r0, [sp, #3]
1a00091a:	a903      	add	r1, sp, #12
1a00091c:	aa02      	add	r2, sp, #8
1a00091e:	f000 f92b 	bl	1a000b78 <fsmBufferRxAct>

			if (receptionStatus(&bufferStruct) == COMPLETE) {
1a000922:	a803      	add	r0, sp, #12
1a000924:	f000 f98e 	bl	1a000c44 <receptionStatus>
1a000928:	2801      	cmp	r0, #1
1a00092a:	d1ea      	bne.n	1a000902 <taskValidarRx+0x12>
				/* Realizar funcion */
				dataSize = bufferStruct.bufferRx[2];
1a00092c:	f89d 4010 	ldrb.w	r4, [sp, #16]
				OP = bufferStruct.bufferRx[1];
1a000930:	f89d 600f 	ldrb.w	r6, [sp, #15]

				blockToken = QMPool_get(&mem_token_pool, 0U);
1a000934:	482f      	ldr	r0, [pc, #188]	; (1a0009f4 <taskValidarRx+0x104>)
1a000936:	2100      	movs	r1, #0
1a000938:	f7ff fe38 	bl	1a0005ac <QMPool_get>
1a00093c:	9001      	str	r0, [sp, #4]

				blockToken->op = OP;
1a00093e:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24

				if (dataSize <= 10) {
1a000942:	2c0a      	cmp	r4, #10
1a000944:	d806      	bhi.n	1a000954 <taskValidarRx+0x64>
					blockToken->memoria_alojada = 10;
1a000946:	230a      	movs	r3, #10
1a000948:	8443      	strh	r3, [r0, #34]	; 0x22
					block1 = QMPool_get(&mem_pool_1, 0U);
1a00094a:	482b      	ldr	r0, [pc, #172]	; (1a0009f8 <taskValidarRx+0x108>)
1a00094c:	2100      	movs	r1, #0
1a00094e:	f7ff fe2d 	bl	1a0005ac <QMPool_get>
1a000952:	e017      	b.n	1a000984 <taskValidarRx+0x94>
				} else if (dataSize <= 50) {
1a000954:	2c32      	cmp	r4, #50	; 0x32
1a000956:	d806      	bhi.n	1a000966 <taskValidarRx+0x76>
					blockToken->memoria_alojada = 50;
1a000958:	2332      	movs	r3, #50	; 0x32
1a00095a:	8443      	strh	r3, [r0, #34]	; 0x22
					block1 = QMPool_get(&mem_pool_2, 0U);
1a00095c:	4827      	ldr	r0, [pc, #156]	; (1a0009fc <taskValidarRx+0x10c>)
1a00095e:	2100      	movs	r1, #0
1a000960:	f7ff fe24 	bl	1a0005ac <QMPool_get>
1a000964:	e00e      	b.n	1a000984 <taskValidarRx+0x94>
				} else if (dataSize <= 100) {
1a000966:	2c64      	cmp	r4, #100	; 0x64
1a000968:	d806      	bhi.n	1a000978 <taskValidarRx+0x88>
					blockToken->memoria_alojada = 100;
1a00096a:	2364      	movs	r3, #100	; 0x64
1a00096c:	8443      	strh	r3, [r0, #34]	; 0x22
					block1 = QMPool_get(&mem_pool_3, 0U);
1a00096e:	4824      	ldr	r0, [pc, #144]	; (1a000a00 <taskValidarRx+0x110>)
1a000970:	2100      	movs	r1, #0
1a000972:	f7ff fe1b 	bl	1a0005ac <QMPool_get>
1a000976:	e005      	b.n	1a000984 <taskValidarRx+0x94>
				} else {
					blockToken->memoria_alojada = 250;
1a000978:	23fa      	movs	r3, #250	; 0xfa
1a00097a:	8443      	strh	r3, [r0, #34]	; 0x22
					block1 = QMPool_get(&mem_pool_4, 0U);
1a00097c:	4821      	ldr	r0, [pc, #132]	; (1a000a04 <taskValidarRx+0x114>)
1a00097e:	2100      	movs	r1, #0
1a000980:	f7ff fe14 	bl	1a0005ac <QMPool_get>
				}

				for (i = 0; i <= dataSize; i++) {
1a000984:	2300      	movs	r3, #0
1a000986:	e007      	b.n	1a000998 <taskValidarRx+0xa8>
					block1[i] = bufferStruct.bufferRx[2 + i];
1a000988:	aa46      	add	r2, sp, #280	; 0x118
1a00098a:	441a      	add	r2, r3
1a00098c:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
1a000990:	7892      	ldrb	r2, [r2, #2]
1a000992:	54c2      	strb	r2, [r0, r3]
				} else {
					blockToken->memoria_alojada = 250;
					block1 = QMPool_get(&mem_pool_4, 0U);
				}

				for (i = 0; i <= dataSize; i++) {
1a000994:	3301      	adds	r3, #1
1a000996:	b2db      	uxtb	r3, r3
1a000998:	42a3      	cmp	r3, r4
1a00099a:	d9f5      	bls.n	1a000988 <taskValidarRx+0x98>
					block1[i] = bufferStruct.bufferRx[2 + i];
				}

				blockToken->payload = block1;
1a00099c:	9b01      	ldr	r3, [sp, #4]
1a00099e:	6058      	str	r0, [r3, #4]

				switch (OP) {
1a0009a0:	2e31      	cmp	r6, #49	; 0x31
1a0009a2:	d00b      	beq.n	1a0009bc <taskValidarRx+0xcc>
1a0009a4:	2e35      	cmp	r6, #53	; 0x35
1a0009a6:	d011      	beq.n	1a0009cc <taskValidarRx+0xdc>
1a0009a8:	2e30      	cmp	r6, #48	; 0x30
1a0009aa:	d1aa      	bne.n	1a000902 <taskValidarRx+0x12>
				case MAY:
					if (xQueueSend(queMayusculizar, &blockToken, 0) == pdFALSE) {
1a0009ac:	4b16      	ldr	r3, [pc, #88]	; (1a000a08 <taskValidarRx+0x118>)
1a0009ae:	6818      	ldr	r0, [r3, #0]
1a0009b0:	a901      	add	r1, sp, #4
1a0009b2:	2200      	movs	r2, #0
1a0009b4:	4613      	mov	r3, r2
1a0009b6:	f000 fb45 	bl	1a001044 <xQueueGenericSend>
						/* Condicion de error */
					}
					break;
1a0009ba:	e7a2      	b.n	1a000902 <taskValidarRx+0x12>
				case MIN:
					if (xQueueSend(queMinusculizar, &blockToken, 0) == pdFALSE) {
1a0009bc:	4b13      	ldr	r3, [pc, #76]	; (1a000a0c <taskValidarRx+0x11c>)
1a0009be:	6818      	ldr	r0, [r3, #0]
1a0009c0:	a901      	add	r1, sp, #4
1a0009c2:	2200      	movs	r2, #0
1a0009c4:	4613      	mov	r3, r2
1a0009c6:	f000 fb3d 	bl	1a001044 <xQueueGenericSend>
						/* Condicion de error */
					}
					break;
1a0009ca:	e79a      	b.n	1a000902 <taskValidarRx+0x12>
				case MED_PER:
					//Se inicializa aca porque antes de inicializarlo se debe alocar
					//la memoria de la estructura
					blockToken->id_de_paquete = id;
1a0009cc:	601d      	str	r5, [r3, #0]
					id++;
1a0009ce:	3501      	adds	r5, #1
					blockToken->largo_del_paquete = dataSize + N_BYTES_HEADER;
1a0009d0:	9b01      	ldr	r3, [sp, #4]
1a0009d2:	3404      	adds	r4, #4
1a0009d4:	841c      	strh	r4, [r3, #32]
					blockToken->tiempo_de_llegada = bufferStruct.tiempoDeLlegada;
1a0009d6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
1a0009d8:	609a      	str	r2, [r3, #8]
					blockToken->tiempo_de_recepcion = bufferStruct.tiempoDeRecepcion;
1a0009da:	9a44      	ldr	r2, [sp, #272]	; 0x110
1a0009dc:	60da      	str	r2, [r3, #12]
					if (xQueueSend(queMedirPerformance, &blockToken, 0) == pdFALSE){
1a0009de:	4b0c      	ldr	r3, [pc, #48]	; (1a000a10 <taskValidarRx+0x120>)
1a0009e0:	6818      	ldr	r0, [r3, #0]
1a0009e2:	a901      	add	r1, sp, #4
1a0009e4:	2200      	movs	r2, #0
1a0009e6:	4613      	mov	r3, r2
1a0009e8:	f000 fb2c 	bl	1a001044 <xQueueGenericSend>
						/* Condicion de error */
					}
					break;
1a0009ec:	e789      	b.n	1a000902 <taskValidarRx+0x12>
1a0009ee:	bf00      	nop
1a0009f0:	10004268 	.word	0x10004268
1a0009f4:	10004284 	.word	0x10004284
1a0009f8:	100043c8 	.word	0x100043c8
1a0009fc:	10004270 	.word	0x10004270
1a000a00:	100043ac 	.word	0x100043ac
1a000a04:	100043e0 	.word	0x100043e0
1a000a08:	100043c4 	.word	0x100043c4
1a000a0c:	100043dc 	.word	0x100043dc
1a000a10:	100043c0 	.word	0x100043c0

1a000a14 <main>:
static void taskValidarRx(void* taskParmPtr);
static void taskValidarTx(void* taskParmPtr);
static void taskMedirPerformance(void* taskParmPtr);

/*==================[funcion principal]======================================*/
int main(void) {
1a000a14:	b500      	push	{lr}
1a000a16:	b083      	sub	sp, #12
	boardConfig();
1a000a18:	f002 fe98 	bl	1a00374c <boardInit>

	driver_uart_init(UART_USB, 115200);
1a000a1c:	2003      	movs	r0, #3
1a000a1e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000a22:	f7ff fd33 	bl	1a00048c <driver_uart_init>

	queMinusculizar = xQueueCreate(LARGO_QUEUES, sizeof(uint8_t *));
1a000a26:	200a      	movs	r0, #10
1a000a28:	2104      	movs	r1, #4
1a000a2a:	2200      	movs	r2, #0
1a000a2c:	f000 fae2 	bl	1a000ff4 <xQueueGenericCreate>
1a000a30:	4b35      	ldr	r3, [pc, #212]	; (1a000b08 <main+0xf4>)
1a000a32:	6018      	str	r0, [r3, #0]
	queMayusculizar = xQueueCreate(LARGO_QUEUES, sizeof(uint8_t *));
1a000a34:	200a      	movs	r0, #10
1a000a36:	2104      	movs	r1, #4
1a000a38:	2200      	movs	r2, #0
1a000a3a:	f000 fadb 	bl	1a000ff4 <xQueueGenericCreate>
1a000a3e:	4b33      	ldr	r3, [pc, #204]	; (1a000b0c <main+0xf8>)
1a000a40:	6018      	str	r0, [r3, #0]
	queMedirPerformance = xQueueCreate(LARGO_QUEUES, sizeof(token_t *));
1a000a42:	200a      	movs	r0, #10
1a000a44:	2104      	movs	r1, #4
1a000a46:	2200      	movs	r2, #0
1a000a48:	f000 fad4 	bl	1a000ff4 <xQueueGenericCreate>
1a000a4c:	4b30      	ldr	r3, [pc, #192]	; (1a000b10 <main+0xfc>)
1a000a4e:	6018      	str	r0, [r3, #0]
	queTransmision = xQueueCreate(LARGO_QUEUES, sizeof(token_t *));
1a000a50:	200a      	movs	r0, #10
1a000a52:	2104      	movs	r1, #4
1a000a54:	2200      	movs	r2, #0
1a000a56:	f000 facd 	bl	1a000ff4 <xQueueGenericCreate>
1a000a5a:	4b2e      	ldr	r3, [pc, #184]	; (1a000b14 <main+0x100>)
1a000a5c:	6018      	str	r0, [r3, #0]

	/* Creacion de tareas */
	xTaskCreate(taskMayusculas, (const char *) "taskMayusculas",
1a000a5e:	2502      	movs	r5, #2
1a000a60:	9500      	str	r5, [sp, #0]
1a000a62:	2400      	movs	r4, #0
1a000a64:	9401      	str	r4, [sp, #4]
1a000a66:	482c      	ldr	r0, [pc, #176]	; (1a000b18 <main+0x104>)
1a000a68:	492c      	ldr	r1, [pc, #176]	; (1a000b1c <main+0x108>)
1a000a6a:	22b4      	movs	r2, #180	; 0xb4
1a000a6c:	4623      	mov	r3, r4
1a000a6e:	f000 ff37 	bl	1a0018e0 <xTaskCreate>
	configMINIMAL_STACK_SIZE * 2, 0,
	tskIDLE_PRIORITY + 2,			// Prioridad = + 2
	0);

	/* Creacion de tareas */
	xTaskCreate(taskMinusculas, (const char *) "taskMinusculas",
1a000a72:	9500      	str	r5, [sp, #0]
1a000a74:	9401      	str	r4, [sp, #4]
1a000a76:	482a      	ldr	r0, [pc, #168]	; (1a000b20 <main+0x10c>)
1a000a78:	492a      	ldr	r1, [pc, #168]	; (1a000b24 <main+0x110>)
1a000a7a:	22b4      	movs	r2, #180	; 0xb4
1a000a7c:	4623      	mov	r3, r4
1a000a7e:	f000 ff2f 	bl	1a0018e0 <xTaskCreate>
	configMINIMAL_STACK_SIZE * 2, 0,
	tskIDLE_PRIORITY + 2,			// Prioridad = + 2
	0);

	/* Creacion de tareas */
	xTaskCreate(taskValidarRx, (const char *) "taskValidarRx",
1a000a82:	9500      	str	r5, [sp, #0]
1a000a84:	9401      	str	r4, [sp, #4]
1a000a86:	4828      	ldr	r0, [pc, #160]	; (1a000b28 <main+0x114>)
1a000a88:	4928      	ldr	r1, [pc, #160]	; (1a000b2c <main+0x118>)
1a000a8a:	22b4      	movs	r2, #180	; 0xb4
1a000a8c:	4623      	mov	r3, r4
1a000a8e:	f000 ff27 	bl	1a0018e0 <xTaskCreate>
	configMINIMAL_STACK_SIZE * 2, 0,
	tskIDLE_PRIORITY + 2,			// Prioridad = + 2
	0);

	/* Creacion de tareas */
	xTaskCreate(taskValidarTx, (const char *) "taskValidarTx",
1a000a92:	9500      	str	r5, [sp, #0]
1a000a94:	9401      	str	r4, [sp, #4]
1a000a96:	4826      	ldr	r0, [pc, #152]	; (1a000b30 <main+0x11c>)
1a000a98:	4926      	ldr	r1, [pc, #152]	; (1a000b34 <main+0x120>)
1a000a9a:	22b4      	movs	r2, #180	; 0xb4
1a000a9c:	4623      	mov	r3, r4
1a000a9e:	f000 ff1f 	bl	1a0018e0 <xTaskCreate>
	configMINIMAL_STACK_SIZE * 2, 0,
	tskIDLE_PRIORITY + 2,			// Prioridad = + 2
	0);

	/* Creacion de tareas */
	xTaskCreate(taskMedirPerformance, (const char *) "taskMedirPerformance",
1a000aa2:	9500      	str	r5, [sp, #0]
1a000aa4:	9401      	str	r4, [sp, #4]
1a000aa6:	4824      	ldr	r0, [pc, #144]	; (1a000b38 <main+0x124>)
1a000aa8:	4924      	ldr	r1, [pc, #144]	; (1a000b3c <main+0x128>)
1a000aaa:	22b4      	movs	r2, #180	; 0xb4
1a000aac:	4623      	mov	r3, r4
1a000aae:	f000 ff17 	bl	1a0018e0 <xTaskCreate>
	configMINIMAL_STACK_SIZE * 2, 0,
	tskIDLE_PRIORITY + 2,			// Prioridad = + 2
	0);

	// Led para dar señal de vida
	gpioWrite(LED2, ON);
1a000ab2:	202c      	movs	r0, #44	; 0x2c
1a000ab4:	2101      	movs	r1, #1
1a000ab6:	f002 fe0f 	bl	1a0036d8 <gpioWrite>

	/* Inicialización del Pools */
	/* Bloques de 10 bytes cada uno */
	QMPool_init(&mem_pool_1, memoria_para_pool_1, sizeof(memoria_para_pool_1),
1a000aba:	4821      	ldr	r0, [pc, #132]	; (1a000b40 <main+0x12c>)
1a000abc:	4921      	ldr	r1, [pc, #132]	; (1a000b44 <main+0x130>)
1a000abe:	f44f 6280 	mov.w	r2, #1024	; 0x400
1a000ac2:	230a      	movs	r3, #10
1a000ac4:	f7ff fd3c 	bl	1a000540 <QMPool_init>
			10U);

	/* Bloques de 50 bytes cada uno */
	QMPool_init(&mem_pool_2, memoria_para_pool_2, sizeof(memoria_para_pool_2),
1a000ac8:	481f      	ldr	r0, [pc, #124]	; (1a000b48 <main+0x134>)
1a000aca:	4920      	ldr	r1, [pc, #128]	; (1a000b4c <main+0x138>)
1a000acc:	f44f 6280 	mov.w	r2, #1024	; 0x400
1a000ad0:	2332      	movs	r3, #50	; 0x32
1a000ad2:	f7ff fd35 	bl	1a000540 <QMPool_init>
			50U);

	/* Bloques de 100 bytes cada uno */
	QMPool_init(&mem_pool_3, memoria_para_pool_3, sizeof(memoria_para_pool_3),
1a000ad6:	481e      	ldr	r0, [pc, #120]	; (1a000b50 <main+0x13c>)
1a000ad8:	491e      	ldr	r1, [pc, #120]	; (1a000b54 <main+0x140>)
1a000ada:	f44f 6280 	mov.w	r2, #1024	; 0x400
1a000ade:	2364      	movs	r3, #100	; 0x64
1a000ae0:	f7ff fd2e 	bl	1a000540 <QMPool_init>
			100U);

	/* Bloques de 256 bytes cada uno */
	QMPool_init(&mem_pool_4, memoria_para_pool_4, sizeof(memoria_para_pool_4),
1a000ae4:	481c      	ldr	r0, [pc, #112]	; (1a000b58 <main+0x144>)
1a000ae6:	491d      	ldr	r1, [pc, #116]	; (1a000b5c <main+0x148>)
1a000ae8:	f44f 6280 	mov.w	r2, #1024	; 0x400
1a000aec:	f44f 7380 	mov.w	r3, #256	; 0x100
1a000af0:	f7ff fd26 	bl	1a000540 <QMPool_init>
			256U);
	/* Bloques de 256 bytes cada uno */
	QMPool_init(&mem_token_pool, memoria_para_token, sizeof(memoria_para_token),
1a000af4:	481a      	ldr	r0, [pc, #104]	; (1a000b60 <main+0x14c>)
1a000af6:	491b      	ldr	r1, [pc, #108]	; (1a000b64 <main+0x150>)
1a000af8:	f44f 6280 	mov.w	r2, #1024	; 0x400
1a000afc:	2328      	movs	r3, #40	; 0x28
1a000afe:	f7ff fd1f 	bl	1a000540 <QMPool_init>
			sizeof(token_t));

	// Iniciar scheduler
	vTaskStartScheduler();
1a000b02:	f000 ff21 	bl	1a001948 <vTaskStartScheduler>

	while ( TRUE) {
		// Si cae en este while 1 significa que no pudo iniciar el scheduler
	}
1a000b06:	e7fe      	b.n	1a000b06 <main+0xf2>
1a000b08:	100043dc 	.word	0x100043dc
1a000b0c:	100043c4 	.word	0x100043c4
1a000b10:	100043c0 	.word	0x100043c0
1a000b14:	10004298 	.word	0x10004298
1a000b18:	1a0006a1 	.word	0x1a0006a1
1a000b1c:	1a003ee4 	.word	0x1a003ee4
1a000b20:	1a000651 	.word	0x1a000651
1a000b24:	1a003ef4 	.word	0x1a003ef4
1a000b28:	1a0008f1 	.word	0x1a0008f1
1a000b2c:	1a003f04 	.word	0x1a003f04
1a000b30:	1a0006f1 	.word	0x1a0006f1
1a000b34:	1a003f14 	.word	0x1a003f14
1a000b38:	1a0005f5 	.word	0x1a0005f5
1a000b3c:	1a003f24 	.word	0x1a003f24
1a000b40:	100043c8 	.word	0x100043c8
1a000b44:	100001ac 	.word	0x100001ac
1a000b48:	10004270 	.word	0x10004270
1a000b4c:	100005ac 	.word	0x100005ac
1a000b50:	100043ac 	.word	0x100043ac
1a000b54:	100009ac 	.word	0x100009ac
1a000b58:	100043e0 	.word	0x100043e0
1a000b5c:	10000dac 	.word	0x10000dac
1a000b60:	10004284 	.word	0x10004284
1a000b64:	100011ac 	.word	0x100011ac

1a000b68 <fsmBufferRxInit>:
/*==================[definiciones de funciones externas]=====================*/
/*
 * Funcion de inicilizacion de la maquina de estados de recepcion de trama
 */
void fsmBufferRxInit(bufferStruct_t *bufferStruct, fsmStruct_t *fsmStruct){
	bufferStruct->bufferRxIndex = 0;
1a000b68:	2300      	movs	r3, #0
1a000b6a:	8003      	strh	r3, [r0, #0]
	bufferStruct->receptionCompleteFlag = FALSE;
1a000b6c:	f880 30fd 	strb.w	r3, [r0, #253]	; 0xfd
	bufferStruct->dataCounter = 0;
1a000b70:	f880 3109 	strb.w	r3, [r0, #265]	; 0x109
	fsmStruct->fsmActualState = RECEIVE_STX;
1a000b74:	700b      	strb	r3, [r1, #0]
1a000b76:	4770      	bx	lr

1a000b78 <fsmBufferRxAct>:
}
/*
 * Para verificar si se finalizo la recepcion de la trama se debe utilizar
 * la funcion uint8_t receptionStatus(bufferStruct_t *bufferStruct)
 */
void fsmBufferRxAct(uint8_t dataRx, bufferStruct_t *bufferStruct, fsmStruct_t *fsmStruct){
1a000b78:	b510      	push	{r4, lr}
1a000b7a:	460c      	mov	r4, r1

	switch(fsmStruct->fsmActualState){
1a000b7c:	7813      	ldrb	r3, [r2, #0]
1a000b7e:	2b03      	cmp	r3, #3
1a000b80:	d85c      	bhi.n	1a000c3c <fsmBufferRxAct+0xc4>
1a000b82:	e8df f003 	tbb	[pc, r3]
1a000b86:	1302      	.short	0x1302
1a000b88:	2e24      	.short	0x2e24
	case RECEIVE_STX:
		if(dataRx == STX){
1a000b8a:	2855      	cmp	r0, #85	; 0x55
1a000b8c:	d10b      	bne.n	1a000ba6 <fsmBufferRxAct+0x2e>
			bufferStruct->bufferRx[bufferStruct->bufferRxIndex] = dataRx;
1a000b8e:	8823      	ldrh	r3, [r4, #0]
1a000b90:	18e1      	adds	r1, r4, r3
1a000b92:	7088      	strb	r0, [r1, #2]
			bufferStruct->bufferRxIndex++;
1a000b94:	3301      	adds	r3, #1
1a000b96:	8023      	strh	r3, [r4, #0]
			fsmStruct->fsmActualState = RECEIVE_OP;
1a000b98:	2301      	movs	r3, #1
1a000b9a:	7013      	strb	r3, [r2, #0]
			bufferStruct->tiempoDeLlegada = xTaskGetTickCount();
1a000b9c:	f000 ff2c 	bl	1a0019f8 <xTaskGetTickCount>
1a000ba0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
1a000ba4:	bd10      	pop	{r4, pc}
		}
		else{
			fsmStruct->fsmActualState = RECEIVE_STX;
1a000ba6:	2300      	movs	r3, #0
1a000ba8:	7013      	strb	r3, [r2, #0]
1a000baa:	bd10      	pop	{r4, pc}
		}
		break;
	case RECEIVE_OP:
		if((dataRx=='0')||(dataRx=='1')||(dataRx=='2')||(dataRx=='3')||(dataRx=='4')||(dataRx=='5')){
1a000bac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
1a000bb0:	b2db      	uxtb	r3, r3
1a000bb2:	2b05      	cmp	r3, #5
1a000bb4:	d807      	bhi.n	1a000bc6 <fsmBufferRxAct+0x4e>
			bufferStruct->bufferRx[bufferStruct->bufferRxIndex] = dataRx;
1a000bb6:	8823      	ldrh	r3, [r4, #0]
1a000bb8:	18e1      	adds	r1, r4, r3
1a000bba:	7088      	strb	r0, [r1, #2]
			bufferStruct->bufferRxIndex++;
1a000bbc:	3301      	adds	r3, #1
1a000bbe:	8023      	strh	r3, [r4, #0]
			fsmStruct->fsmActualState = RECEIVE_T;
1a000bc0:	2302      	movs	r3, #2
1a000bc2:	7013      	strb	r3, [r2, #0]
1a000bc4:	bd10      	pop	{r4, pc}
		}
		else{
			bufferStruct->bufferRxIndex = 0;
1a000bc6:	2300      	movs	r3, #0
1a000bc8:	8023      	strh	r3, [r4, #0]
			fsmStruct->fsmActualState = RECEIVE_STX;
1a000bca:	7013      	strb	r3, [r2, #0]
1a000bcc:	bd10      	pop	{r4, pc}
		}
		break;
	case RECEIVE_T:
			bufferStruct->bufferRx[bufferStruct->bufferRxIndex] = dataRx;
1a000bce:	8823      	ldrh	r3, [r4, #0]
1a000bd0:	18e1      	adds	r1, r4, r3
1a000bd2:	7088      	strb	r0, [r1, #2]
			bufferStruct->bufferRxIndex++;
1a000bd4:	3301      	adds	r3, #1
1a000bd6:	8023      	strh	r3, [r4, #0]
			bufferStruct->dataLength = dataRx;
1a000bd8:	f884 0108 	strb.w	r0, [r4, #264]	; 0x108
			fsmStruct->fsmActualState = RECEIVE_DATA;
1a000bdc:	2303      	movs	r3, #3
1a000bde:	7013      	strb	r3, [r2, #0]
		break;
1a000be0:	bd10      	pop	{r4, pc}
	case RECEIVE_DATA:
		if(dataRx!=ETX){
1a000be2:	2840      	cmp	r0, #64	; 0x40
1a000be4:	d00a      	beq.n	1a000bfc <fsmBufferRxAct+0x84>
			bufferStruct->bufferRx[bufferStruct->bufferRxIndex] = dataRx;
1a000be6:	8823      	ldrh	r3, [r4, #0]
1a000be8:	18e2      	adds	r2, r4, r3
1a000bea:	7090      	strb	r0, [r2, #2]
			bufferStruct->bufferRxIndex++;
1a000bec:	3301      	adds	r3, #1
1a000bee:	8023      	strh	r3, [r4, #0]
			bufferStruct->dataCounter++;
1a000bf0:	f894 3109 	ldrb.w	r3, [r4, #265]	; 0x109
1a000bf4:	3301      	adds	r3, #1
1a000bf6:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
1a000bfa:	bd10      	pop	{r4, pc}
		}
		else{
			if(bufferStruct->dataCounter == bufferStruct->dataLength){
1a000bfc:	f894 1109 	ldrb.w	r1, [r4, #265]	; 0x109
1a000c00:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
1a000c04:	4299      	cmp	r1, r3
1a000c06:	d111      	bne.n	1a000c2c <fsmBufferRxAct+0xb4>
				fsmStruct->fsmActualState = RECEIVE_STX;
1a000c08:	2300      	movs	r3, #0
1a000c0a:	7013      	strb	r3, [r2, #0]
				bufferStruct->bufferRx[bufferStruct->bufferRxIndex] = dataRx;
1a000c0c:	8822      	ldrh	r2, [r4, #0]
1a000c0e:	18a1      	adds	r1, r4, r2
1a000c10:	7088      	strb	r0, [r1, #2]
				bufferStruct->bufferLength = bufferStruct->bufferRxIndex;
1a000c12:	f884 20fc 	strb.w	r2, [r4, #252]	; 0xfc
				bufferStruct->bufferRxIndex = 0;
1a000c16:	8023      	strh	r3, [r4, #0]
				bufferStruct->dataCounter = 0;
1a000c18:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
				bufferStruct->tiempoDeRecepcion = xTaskGetTickCount();
1a000c1c:	f000 feec 	bl	1a0019f8 <xTaskGetTickCount>
1a000c20:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
				bufferStruct->receptionCompleteFlag = TRUE;
1a000c24:	2301      	movs	r3, #1
1a000c26:	f884 30fd 	strb.w	r3, [r4, #253]	; 0xfd
1a000c2a:	bd10      	pop	{r4, pc}
			}
			else{
				fsmStruct->fsmActualState = RECEIVE_STX;
1a000c2c:	2300      	movs	r3, #0
1a000c2e:	7013      	strb	r3, [r2, #0]
				bufferStruct->bufferRxIndex = 0;
1a000c30:	8023      	strh	r3, [r4, #0]
				bufferStruct->receptionCompleteFlag = FALSE;
1a000c32:	f884 30fd 	strb.w	r3, [r4, #253]	; 0xfd
				bufferStruct->dataCounter = 0;
1a000c36:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
1a000c3a:	bd10      	pop	{r4, pc}
			}
		}
		break;
	default:
		bufferStruct->bufferRxIndex = 0;
1a000c3c:	2300      	movs	r3, #0
1a000c3e:	8023      	strh	r3, [r4, #0]
		fsmStruct->fsmActualState = RECEIVE_STX;
1a000c40:	7013      	strb	r3, [r2, #0]
1a000c42:	bd10      	pop	{r4, pc}

1a000c44 <receptionStatus>:
/*
 * Devuelve 1 si se completo la recepcion de la trama
 * Devuelve 0 si no se completo la recepcion
 */
uint8_t receptionStatus(bufferStruct_t *bufferStruct){
	if(bufferStruct->receptionCompleteFlag == TRUE){
1a000c44:	f890 30fd 	ldrb.w	r3, [r0, #253]	; 0xfd
1a000c48:	2b01      	cmp	r3, #1
1a000c4a:	d103      	bne.n	1a000c54 <receptionStatus+0x10>
		bufferStruct->receptionCompleteFlag = FALSE;
1a000c4c:	2200      	movs	r2, #0
1a000c4e:	f880 20fd 	strb.w	r2, [r0, #253]	; 0xfd
		return TRUE;
1a000c52:	e000      	b.n	1a000c56 <receptionStatus+0x12>
	}
	else{
		return FALSE;
1a000c54:	2300      	movs	r3, #0
	}
}
1a000c56:	4618      	mov	r0, r3
1a000c58:	4770      	bx	lr
1a000c5a:	bf00      	nop

1a000c5c <Reset_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1a000c5c:	b672      	cpsid	i

void Reset_Handler(void) {
    __disable_irq();

    volatile unsigned int *RESET_CONTROL = (unsigned int *) 0x40053100;
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000c5e:	4a19      	ldr	r2, [pc, #100]	; (1a000cc4 <Reset_Handler+0x68>)
1a000c60:	4b19      	ldr	r3, [pc, #100]	; (1a000cc8 <Reset_Handler+0x6c>)
1a000c62:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000c64:	4a19      	ldr	r2, [pc, #100]	; (1a000ccc <Reset_Handler+0x70>)
1a000c66:	3304      	adds	r3, #4
1a000c68:	601a      	str	r2, [r3, #0]

    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000c6a:	2300      	movs	r3, #0
1a000c6c:	e005      	b.n	1a000c7a <Reset_Handler+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000c6e:	f04f 31ff 	mov.w	r1, #4294967295
1a000c72:	4a17      	ldr	r2, [pc, #92]	; (1a000cd0 <Reset_Handler+0x74>)
1a000c74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    *(RESET_CONTROL + 0) = 0x10DF1000;
    *(RESET_CONTROL + 1) = 0x01DFF7FF;

    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000c78:	3301      	adds	r3, #1
1a000c7a:	2b07      	cmp	r3, #7
1a000c7c:	d9f7      	bls.n	1a000c6e <Reset_Handler+0x12>
extern unsigned int __data_section_table;
extern unsigned int __data_section_table_end;
extern unsigned int __bss_section_table;
extern unsigned int __bss_section_table_end;

void Reset_Handler(void) {
1a000c7e:	b510      	push	{r4, lr}
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
1a000c80:	b662      	cpsie	i
    __enable_irq();

    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    SectionTableAddr = &__data_section_table;
1a000c82:	4b14      	ldr	r3, [pc, #80]	; (1a000cd4 <Reset_Handler+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000c84:	e007      	b.n	1a000c96 <Reset_Handler+0x3a>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a000c86:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000c8a:	6818      	ldr	r0, [r3, #0]
1a000c8c:	6859      	ldr	r1, [r3, #4]
1a000c8e:	689a      	ldr	r2, [r3, #8]
1a000c90:	f7ff fa84 	bl	1a00019c <data_init>

    SectionTableAddr = &__data_section_table;
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a000c94:	4623      	mov	r3, r4

    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    SectionTableAddr = &__data_section_table;
    while (SectionTableAddr < &__data_section_table_end) {
1a000c96:	4a10      	ldr	r2, [pc, #64]	; (1a000cd8 <Reset_Handler+0x7c>)
1a000c98:	4293      	cmp	r3, r2
1a000c9a:	d3f4      	bcc.n	1a000c86 <Reset_Handler+0x2a>
1a000c9c:	e006      	b.n	1a000cac <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a000c9e:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a000ca0:	f854 0b08 	ldr.w	r0, [r4], #8
1a000ca4:	6859      	ldr	r1, [r3, #4]
1a000ca6:	f7ff fa87 	bl	1a0001b8 <bss_init>
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a000caa:	4623      	mov	r3, r4
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    while (SectionTableAddr < &__bss_section_table_end) {
1a000cac:	4a0b      	ldr	r2, [pc, #44]	; (1a000cdc <Reset_Handler+0x80>)
1a000cae:	4293      	cmp	r3, r2
1a000cb0:	d3f5      	bcc.n	1a000c9e <Reset_Handler+0x42>
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
    }

    SystemInit();
1a000cb2:	f002 fa57 	bl	1a003164 <SystemInit>

    __libc_init_array();
1a000cb6:	f003 f8db 	bl	1a003e70 <__libc_init_array>
    main();
1a000cba:	f7ff feab 	bl	1a000a14 <main>
    while (1) {
        __WFI();
1a000cbe:	bf30      	wfi
    }
1a000cc0:	e7fd      	b.n	1a000cbe <Reset_Handler+0x62>
1a000cc2:	bf00      	nop
1a000cc4:	10df1000 	.word	0x10df1000
1a000cc8:	40053100 	.word	0x40053100
1a000ccc:	01dff7ff 	.word	0x01dff7ff
1a000cd0:	e000e280 	.word	0xe000e280
1a000cd4:	1a000114 	.word	0x1a000114
1a000cd8:	1a000150 	.word	0x1a000150
1a000cdc:	1a000178 	.word	0x1a000178

1a000ce0 <_init>:
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

void _init(void) {}
1a000ce0:	4770      	bx	lr
1a000ce2:	bf00      	nop

1a000ce4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
1a000ce4:	b538      	push	{r3, r4, r5, lr}
1a000ce6:	4604      	mov	r4, r0
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
1a000ce8:	f010 0f07 	tst.w	r0, #7
1a000cec:	d002      	beq.n	1a000cf4 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a000cee:	f020 0407 	bic.w	r4, r0, #7
1a000cf2:	3408      	adds	r4, #8
		}
	}
	#endif

	vTaskSuspendAll();
1a000cf4:	f000 fe78 	bl	1a0019e8 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
1a000cf8:	4b10      	ldr	r3, [pc, #64]	; (1a000d3c <pvPortMalloc+0x58>)
1a000cfa:	681b      	ldr	r3, [r3, #0]
1a000cfc:	b923      	cbnz	r3, 1a000d08 <pvPortMalloc+0x24>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a000cfe:	4b10      	ldr	r3, [pc, #64]	; (1a000d40 <pvPortMalloc+0x5c>)
1a000d00:	f023 0307 	bic.w	r3, r3, #7
1a000d04:	4a0d      	ldr	r2, [pc, #52]	; (1a000d3c <pvPortMalloc+0x58>)
1a000d06:	6013      	str	r3, [r2, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
1a000d08:	4b0e      	ldr	r3, [pc, #56]	; (1a000d44 <pvPortMalloc+0x60>)
1a000d0a:	681b      	ldr	r3, [r3, #0]
1a000d0c:	441c      	add	r4, r3
1a000d0e:	f641 72f7 	movw	r2, #8183	; 0x1ff7
1a000d12:	4294      	cmp	r4, r2
1a000d14:	d807      	bhi.n	1a000d26 <pvPortMalloc+0x42>
1a000d16:	42a3      	cmp	r3, r4
1a000d18:	d207      	bcs.n	1a000d2a <pvPortMalloc+0x46>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
1a000d1a:	4a08      	ldr	r2, [pc, #32]	; (1a000d3c <pvPortMalloc+0x58>)
1a000d1c:	6815      	ldr	r5, [r2, #0]
1a000d1e:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
1a000d20:	4b08      	ldr	r3, [pc, #32]	; (1a000d44 <pvPortMalloc+0x60>)
1a000d22:	601c      	str	r4, [r3, #0]
1a000d24:	e002      	b.n	1a000d2c <pvPortMalloc+0x48>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
1a000d26:	2500      	movs	r5, #0
1a000d28:	e000      	b.n	1a000d2c <pvPortMalloc+0x48>
1a000d2a:	2500      	movs	r5, #0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
1a000d2c:	f000 fefc 	bl	1a001b28 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
1a000d30:	b90d      	cbnz	r5, 1a000d36 <pvPortMalloc+0x52>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
1a000d32:	f000 fc0b 	bl	1a00154c <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
}
1a000d36:	4628      	mov	r0, r5
1a000d38:	bd38      	pop	{r3, r4, r5, pc}
1a000d3a:	bf00      	nop
1a000d3c:	100015b0 	.word	0x100015b0
1a000d40:	100015bc 	.word	0x100015bc
1a000d44:	100015ac 	.word	0x100015ac

1a000d48 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
1a000d48:	b140      	cbz	r0, 1a000d5c <vPortFree+0x14>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a000d4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000d4e:	f383 8811 	msr	BASEPRI, r3
1a000d52:	f3bf 8f6f 	isb	sy
1a000d56:	f3bf 8f4f 	dsb	sy
1a000d5a:	e7fe      	b.n	1a000d5a <vPortFree+0x12>
1a000d5c:	4770      	bx	lr
1a000d5e:	bf00      	nop

1a000d60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a000d60:	b510      	push	{r4, lr}
1a000d62:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000d64:	f001 fc0c 	bl	1a002580 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a000d68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a000d6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a000d6c:	429a      	cmp	r2, r3
1a000d6e:	d101      	bne.n	1a000d74 <prvIsQueueFull+0x14>
		{
			xReturn = pdTRUE;
1a000d70:	2401      	movs	r4, #1
1a000d72:	e000      	b.n	1a000d76 <prvIsQueueFull+0x16>
		}
		else
		{
			xReturn = pdFALSE;
1a000d74:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000d76:	f001 fc25 	bl	1a0025c4 <vPortExitCritical>

	return xReturn;
}
1a000d7a:	4620      	mov	r0, r4
1a000d7c:	bd10      	pop	{r4, pc}
1a000d7e:	bf00      	nop

1a000d80 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
1a000d80:	b510      	push	{r4, lr}
1a000d82:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a000d84:	f001 fbfc 	bl	1a002580 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a000d88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a000d8a:	b90b      	cbnz	r3, 1a000d90 <prvIsQueueEmpty+0x10>
		{
			xReturn = pdTRUE;
1a000d8c:	2401      	movs	r4, #1
1a000d8e:	e000      	b.n	1a000d92 <prvIsQueueEmpty+0x12>
		}
		else
		{
			xReturn = pdFALSE;
1a000d90:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a000d92:	f001 fc17 	bl	1a0025c4 <vPortExitCritical>

	return xReturn;
}
1a000d96:	4620      	mov	r0, r4
1a000d98:	bd10      	pop	{r4, pc}
1a000d9a:	bf00      	nop

1a000d9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
1a000d9c:	b570      	push	{r4, r5, r6, lr}
1a000d9e:	4604      	mov	r4, r0
1a000da0:	4616      	mov	r6, r2
BaseType_t xReturn = pdFALSE;
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a000da2:	6b85      	ldr	r5, [r0, #56]	; 0x38

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a000da4:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000da6:	b93a      	cbnz	r2, 1a000db8 <prvCopyDataToQueue+0x1c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a000da8:	6803      	ldr	r3, [r0, #0]
1a000daa:	bb43      	cbnz	r3, 1a000dfe <prvCopyDataToQueue+0x62>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a000dac:	6840      	ldr	r0, [r0, #4]
1a000dae:	f001 f8cb 	bl	1a001f48 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a000db2:	2300      	movs	r3, #0
1a000db4:	6063      	str	r3, [r4, #4]
1a000db6:	e029      	b.n	1a000e0c <prvCopyDataToQueue+0x70>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
1a000db8:	b96e      	cbnz	r6, 1a000dd6 <prvCopyDataToQueue+0x3a>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a000dba:	6880      	ldr	r0, [r0, #8]
1a000dbc:	f003 f87e 	bl	1a003ebc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a000dc0:	68a2      	ldr	r2, [r4, #8]
1a000dc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000dc4:	4413      	add	r3, r2
1a000dc6:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000dc8:	6862      	ldr	r2, [r4, #4]
1a000dca:	4293      	cmp	r3, r2
1a000dcc:	d319      	bcc.n	1a000e02 <prvCopyDataToQueue+0x66>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a000dce:	6823      	ldr	r3, [r4, #0]
1a000dd0:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
1a000dd2:	2000      	movs	r0, #0
1a000dd4:	e01a      	b.n	1a000e0c <prvCopyDataToQueue+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a000dd6:	68c0      	ldr	r0, [r0, #12]
1a000dd8:	f003 f870 	bl	1a003ebc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a000ddc:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000dde:	425b      	negs	r3, r3
1a000de0:	68e2      	ldr	r2, [r4, #12]
1a000de2:	441a      	add	r2, r3
1a000de4:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a000de6:	6821      	ldr	r1, [r4, #0]
1a000de8:	428a      	cmp	r2, r1
1a000dea:	d202      	bcs.n	1a000df2 <prvCopyDataToQueue+0x56>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a000dec:	6862      	ldr	r2, [r4, #4]
1a000dee:	4413      	add	r3, r2
1a000df0:	60e3      	str	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
1a000df2:	2e02      	cmp	r6, #2
1a000df4:	d107      	bne.n	1a000e06 <prvCopyDataToQueue+0x6a>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a000df6:	b145      	cbz	r5, 1a000e0a <prvCopyDataToQueue+0x6e>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
1a000df8:	3d01      	subs	r5, #1
#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
1a000dfa:	2000      	movs	r0, #0
1a000dfc:	e006      	b.n	1a000e0c <prvCopyDataToQueue+0x70>
1a000dfe:	2000      	movs	r0, #0
1a000e00:	e004      	b.n	1a000e0c <prvCopyDataToQueue+0x70>
1a000e02:	2000      	movs	r0, #0
1a000e04:	e002      	b.n	1a000e0c <prvCopyDataToQueue+0x70>
1a000e06:	2000      	movs	r0, #0
1a000e08:	e000      	b.n	1a000e0c <prvCopyDataToQueue+0x70>
1a000e0a:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a000e0c:	3501      	adds	r5, #1
1a000e0e:	63a5      	str	r5, [r4, #56]	; 0x38

	return xReturn;
}
1a000e10:	bd70      	pop	{r4, r5, r6, pc}
1a000e12:	bf00      	nop

1a000e14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a000e14:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a000e16:	b172      	cbz	r2, 1a000e36 <prvCopyDataFromQueue+0x22>
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
1a000e18:	b510      	push	{r4, lr}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a000e1a:	68c3      	ldr	r3, [r0, #12]
1a000e1c:	4413      	add	r3, r2
1a000e1e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a000e20:	6844      	ldr	r4, [r0, #4]
1a000e22:	42a3      	cmp	r3, r4
1a000e24:	d301      	bcc.n	1a000e2a <prvCopyDataFromQueue+0x16>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a000e26:	6803      	ldr	r3, [r0, #0]
1a000e28:	60c3      	str	r3, [r0, #12]
1a000e2a:	4603      	mov	r3, r0
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a000e2c:	4608      	mov	r0, r1
1a000e2e:	68d9      	ldr	r1, [r3, #12]
1a000e30:	f003 f844 	bl	1a003ebc <memcpy>
1a000e34:	bd10      	pop	{r4, pc}
1a000e36:	4770      	bx	lr

1a000e38 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
1a000e38:	b538      	push	{r3, r4, r5, lr}
1a000e3a:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
1a000e3c:	f001 fba0 	bl	1a002580 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
1a000e40:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a000e44:	b2e4      	uxtb	r4, r4

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000e46:	e00a      	b.n	1a000e5e <prvUnlockQueue+0x26>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a000e48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a000e4a:	b15b      	cbz	r3, 1a000e64 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a000e4c:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a000e50:	f000 ffd2 	bl	1a001df8 <xTaskRemoveFromEventList>
1a000e54:	b108      	cbz	r0, 1a000e5a <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
1a000e56:	f001 f861 	bl	1a001f1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
1a000e5a:	3c01      	subs	r4, #1
1a000e5c:	b2e4      	uxtb	r4, r4
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a000e5e:	b263      	sxtb	r3, r4
1a000e60:	2b00      	cmp	r3, #0
1a000e62:	dcf1      	bgt.n	1a000e48 <prvUnlockQueue+0x10>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
1a000e64:	23ff      	movs	r3, #255	; 0xff
1a000e66:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
1a000e6a:	f001 fbab 	bl	1a0025c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
1a000e6e:	f001 fb87 	bl	1a002580 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
1a000e72:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a000e76:	b2e4      	uxtb	r4, r4

		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000e78:	e00a      	b.n	1a000e90 <prvUnlockQueue+0x58>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000e7a:	692b      	ldr	r3, [r5, #16]
1a000e7c:	b15b      	cbz	r3, 1a000e96 <prvUnlockQueue+0x5e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000e7e:	f105 0010 	add.w	r0, r5, #16
1a000e82:	f000 ffb9 	bl	1a001df8 <xTaskRemoveFromEventList>
1a000e86:	b108      	cbz	r0, 1a000e8c <prvUnlockQueue+0x54>
				{
					vTaskMissedYield();
1a000e88:	f001 f848 	bl	1a001f1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
1a000e8c:	3c01      	subs	r4, #1
1a000e8e:	b2e4      	uxtb	r4, r4
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
1a000e90:	b263      	sxtb	r3, r4
1a000e92:	2b00      	cmp	r3, #0
1a000e94:	dcf1      	bgt.n	1a000e7a <prvUnlockQueue+0x42>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
1a000e96:	23ff      	movs	r3, #255	; 0xff
1a000e98:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
1a000e9c:	f001 fb92 	bl	1a0025c4 <vPortExitCritical>
1a000ea0:	bd38      	pop	{r3, r4, r5, pc}
1a000ea2:	bf00      	nop

1a000ea4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
1a000ea4:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a000ea6:	b940      	cbnz	r0, 1a000eba <xQueueGenericReset+0x16>
1a000ea8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000eac:	f383 8811 	msr	BASEPRI, r3
1a000eb0:	f3bf 8f6f 	isb	sy
1a000eb4:	f3bf 8f4f 	dsb	sy
1a000eb8:	e7fe      	b.n	1a000eb8 <xQueueGenericReset+0x14>
1a000eba:	4604      	mov	r4, r0
1a000ebc:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
1a000ebe:	f001 fb5f 	bl	1a002580 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a000ec2:	6821      	ldr	r1, [r4, #0]
1a000ec4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a000ec6:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000ec8:	fb03 1002 	mla	r0, r3, r2, r1
1a000ecc:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a000ece:	2000      	movs	r0, #0
1a000ed0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a000ed2:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a000ed4:	3a01      	subs	r2, #1
1a000ed6:	fb02 1303 	mla	r3, r2, r3, r1
1a000eda:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a000edc:	23ff      	movs	r3, #255	; 0xff
1a000ede:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a000ee2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
1a000ee6:	b97d      	cbnz	r5, 1a000f08 <xQueueGenericReset+0x64>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a000ee8:	6923      	ldr	r3, [r4, #16]
1a000eea:	b1ab      	cbz	r3, 1a000f18 <xQueueGenericReset+0x74>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a000eec:	f104 0010 	add.w	r0, r4, #16
1a000ef0:	f000 ff82 	bl	1a001df8 <xTaskRemoveFromEventList>
1a000ef4:	b180      	cbz	r0, 1a000f18 <xQueueGenericReset+0x74>
				{
					queueYIELD_IF_USING_PREEMPTION();
1a000ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a000efa:	4b09      	ldr	r3, [pc, #36]	; (1a000f20 <xQueueGenericReset+0x7c>)
1a000efc:	601a      	str	r2, [r3, #0]
1a000efe:	f3bf 8f4f 	dsb	sy
1a000f02:	f3bf 8f6f 	isb	sy
1a000f06:	e007      	b.n	1a000f18 <xQueueGenericReset+0x74>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a000f08:	f104 0010 	add.w	r0, r4, #16
1a000f0c:	f000 faba 	bl	1a001484 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a000f10:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a000f14:	f000 fab6 	bl	1a001484 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
1a000f18:	f001 fb54 	bl	1a0025c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
1a000f1c:	2001      	movs	r0, #1
1a000f1e:	bd38      	pop	{r3, r4, r5, pc}
1a000f20:	e000ed04 	.word	0xe000ed04

1a000f24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
1a000f24:	b538      	push	{r3, r4, r5, lr}
1a000f26:	461d      	mov	r5, r3
1a000f28:	9c04      	ldr	r4, [sp, #16]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
1a000f2a:	460b      	mov	r3, r1
1a000f2c:	b909      	cbnz	r1, 1a000f32 <prvInitialiseNewQueue+0xe>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a000f2e:	6024      	str	r4, [r4, #0]
1a000f30:	e000      	b.n	1a000f34 <prvInitialiseNewQueue+0x10>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a000f32:	6022      	str	r2, [r4, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
1a000f34:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a000f36:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a000f38:	4620      	mov	r0, r4
1a000f3a:	2101      	movs	r1, #1
1a000f3c:	f7ff ffb2 	bl	1a000ea4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
1a000f40:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
1a000f44:	bd38      	pop	{r3, r4, r5, pc}
1a000f46:	bf00      	nop

1a000f48 <xQueueGenericCreateStatic>:

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000f48:	b940      	cbnz	r0, 1a000f5c <xQueueGenericCreateStatic+0x14>
1a000f4a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f4e:	f383 8811 	msr	BASEPRI, r3
1a000f52:	f3bf 8f6f 	isb	sy
1a000f56:	f3bf 8f4f 	dsb	sy
1a000f5a:	e7fe      	b.n	1a000f5a <xQueueGenericCreateStatic+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
1a000f5c:	b510      	push	{r4, lr}
1a000f5e:	b084      	sub	sp, #16
1a000f60:	4604      	mov	r4, r0

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
1a000f62:	b943      	cbnz	r3, 1a000f76 <xQueueGenericCreateStatic+0x2e>
1a000f64:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f68:	f383 8811 	msr	BASEPRI, r3
1a000f6c:	f3bf 8f6f 	isb	sy
1a000f70:	f3bf 8f4f 	dsb	sy
1a000f74:	e7fe      	b.n	1a000f74 <xQueueGenericCreateStatic+0x2c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a000f76:	b112      	cbz	r2, 1a000f7e <xQueueGenericCreateStatic+0x36>
1a000f78:	b119      	cbz	r1, 1a000f82 <xQueueGenericCreateStatic+0x3a>
1a000f7a:	2001      	movs	r0, #1
1a000f7c:	e002      	b.n	1a000f84 <xQueueGenericCreateStatic+0x3c>
1a000f7e:	2001      	movs	r0, #1
1a000f80:	e000      	b.n	1a000f84 <xQueueGenericCreateStatic+0x3c>
1a000f82:	2000      	movs	r0, #0
1a000f84:	b940      	cbnz	r0, 1a000f98 <xQueueGenericCreateStatic+0x50>
1a000f86:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000f8a:	f383 8811 	msr	BASEPRI, r3
1a000f8e:	f3bf 8f6f 	isb	sy
1a000f92:	f3bf 8f4f 	dsb	sy
1a000f96:	e7fe      	b.n	1a000f96 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a000f98:	b912      	cbnz	r2, 1a000fa0 <xQueueGenericCreateStatic+0x58>
1a000f9a:	b919      	cbnz	r1, 1a000fa4 <xQueueGenericCreateStatic+0x5c>
1a000f9c:	2001      	movs	r0, #1
1a000f9e:	e002      	b.n	1a000fa6 <xQueueGenericCreateStatic+0x5e>
1a000fa0:	2001      	movs	r0, #1
1a000fa2:	e000      	b.n	1a000fa6 <xQueueGenericCreateStatic+0x5e>
1a000fa4:	2000      	movs	r0, #0
1a000fa6:	b940      	cbnz	r0, 1a000fba <xQueueGenericCreateStatic+0x72>
1a000fa8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fac:	f383 8811 	msr	BASEPRI, r3
1a000fb0:	f3bf 8f6f 	isb	sy
1a000fb4:	f3bf 8f4f 	dsb	sy
1a000fb8:	e7fe      	b.n	1a000fb8 <xQueueGenericCreateStatic+0x70>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
1a000fba:	2050      	movs	r0, #80	; 0x50
1a000fbc:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a000fbe:	9803      	ldr	r0, [sp, #12]
1a000fc0:	2850      	cmp	r0, #80	; 0x50
1a000fc2:	d008      	beq.n	1a000fd6 <xQueueGenericCreateStatic+0x8e>
1a000fc4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000fc8:	f383 8811 	msr	BASEPRI, r3
1a000fcc:	f3bf 8f6f 	isb	sy
1a000fd0:	f3bf 8f4f 	dsb	sy
1a000fd4:	e7fe      	b.n	1a000fd4 <xQueueGenericCreateStatic+0x8c>
1a000fd6:	4620      	mov	r0, r4
1a000fd8:	461c      	mov	r4, r3
		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

		if( pxNewQueue != NULL )
1a000fda:	b13b      	cbz	r3, 1a000fec <xQueueGenericCreateStatic+0xa4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a000fdc:	2301      	movs	r3, #1
1a000fde:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a000fe2:	9400      	str	r4, [sp, #0]
1a000fe4:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a000fe8:	f7ff ff9c 	bl	1a000f24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
1a000fec:	4620      	mov	r0, r4
1a000fee:	b004      	add	sp, #16
1a000ff0:	bd10      	pop	{r4, pc}
1a000ff2:	bf00      	nop

1a000ff4 <xQueueGenericCreate>:
	{
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a000ff4:	b940      	cbnz	r0, 1a001008 <xQueueGenericCreate+0x14>
1a000ff6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a000ffa:	f383 8811 	msr	BASEPRI, r3
1a000ffe:	f3bf 8f6f 	isb	sy
1a001002:	f3bf 8f4f 	dsb	sy
1a001006:	e7fe      	b.n	1a001006 <xQueueGenericCreate+0x12>
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
1a001008:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00100a:	b083      	sub	sp, #12
1a00100c:	4603      	mov	r3, r0
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
1a00100e:	b111      	cbz	r1, 1a001016 <xQueueGenericCreate+0x22>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001010:	fb01 f000 	mul.w	r0, r1, r0
1a001014:	e000      	b.n	1a001018 <xQueueGenericCreate+0x24>
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
1a001016:	2000      	movs	r0, #0
1a001018:	461e      	mov	r6, r3
1a00101a:	4617      	mov	r7, r2
1a00101c:	460c      	mov	r4, r1
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a00101e:	3050      	adds	r0, #80	; 0x50
1a001020:	f7ff fe60 	bl	1a000ce4 <pvPortMalloc>

		if( pxNewQueue != NULL )
1a001024:	4605      	mov	r5, r0
1a001026:	b150      	cbz	r0, 1a00103e <xQueueGenericCreate+0x4a>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a001028:	2300      	movs	r3, #0
1a00102a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a00102e:	9000      	str	r0, [sp, #0]
1a001030:	4630      	mov	r0, r6
1a001032:	4621      	mov	r1, r4
1a001034:	f105 0250 	add.w	r2, r5, #80	; 0x50
1a001038:	463b      	mov	r3, r7
1a00103a:	f7ff ff73 	bl	1a000f24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
	}
1a00103e:	4628      	mov	r0, r5
1a001040:	b003      	add	sp, #12
1a001042:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a001044 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
1a001044:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001046:	b085      	sub	sp, #20
1a001048:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a00104a:	b940      	cbnz	r0, 1a00105e <xQueueGenericSend+0x1a>
1a00104c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001050:	f383 8811 	msr	BASEPRI, r3
1a001054:	f3bf 8f6f 	isb	sy
1a001058:	f3bf 8f4f 	dsb	sy
1a00105c:	e7fe      	b.n	1a00105c <xQueueGenericSend+0x18>
1a00105e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a001060:	b919      	cbnz	r1, 1a00106a <xQueueGenericSend+0x26>
1a001062:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001064:	b91a      	cbnz	r2, 1a00106e <xQueueGenericSend+0x2a>
1a001066:	2201      	movs	r2, #1
1a001068:	e002      	b.n	1a001070 <xQueueGenericSend+0x2c>
1a00106a:	2201      	movs	r2, #1
1a00106c:	e000      	b.n	1a001070 <xQueueGenericSend+0x2c>
1a00106e:	2200      	movs	r2, #0
1a001070:	b942      	cbnz	r2, 1a001084 <xQueueGenericSend+0x40>
1a001072:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001076:	f383 8811 	msr	BASEPRI, r3
1a00107a:	f3bf 8f6f 	isb	sy
1a00107e:	f3bf 8f4f 	dsb	sy
1a001082:	e7fe      	b.n	1a001082 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001084:	2b02      	cmp	r3, #2
1a001086:	d103      	bne.n	1a001090 <xQueueGenericSend+0x4c>
1a001088:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a00108a:	2a01      	cmp	r2, #1
1a00108c:	d102      	bne.n	1a001094 <xQueueGenericSend+0x50>
1a00108e:	e002      	b.n	1a001096 <xQueueGenericSend+0x52>
1a001090:	2201      	movs	r2, #1
1a001092:	e000      	b.n	1a001096 <xQueueGenericSend+0x52>
1a001094:	2200      	movs	r2, #0
1a001096:	b942      	cbnz	r2, 1a0010aa <xQueueGenericSend+0x66>
1a001098:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00109c:	f383 8811 	msr	BASEPRI, r3
1a0010a0:	f3bf 8f6f 	isb	sy
1a0010a4:	f3bf 8f4f 	dsb	sy
1a0010a8:	e7fe      	b.n	1a0010a8 <xQueueGenericSend+0x64>
1a0010aa:	461d      	mov	r5, r3
1a0010ac:	460e      	mov	r6, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0010ae:	f000 ff3b 	bl	1a001f28 <xTaskGetSchedulerState>
1a0010b2:	b918      	cbnz	r0, 1a0010bc <xQueueGenericSend+0x78>
1a0010b4:	9b01      	ldr	r3, [sp, #4]
1a0010b6:	b91b      	cbnz	r3, 1a0010c0 <xQueueGenericSend+0x7c>
1a0010b8:	2301      	movs	r3, #1
1a0010ba:	e002      	b.n	1a0010c2 <xQueueGenericSend+0x7e>
1a0010bc:	2301      	movs	r3, #1
1a0010be:	e000      	b.n	1a0010c2 <xQueueGenericSend+0x7e>
1a0010c0:	2300      	movs	r3, #0
1a0010c2:	b943      	cbnz	r3, 1a0010d6 <xQueueGenericSend+0x92>
1a0010c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010c8:	f383 8811 	msr	BASEPRI, r3
1a0010cc:	f3bf 8f6f 	isb	sy
1a0010d0:	f3bf 8f4f 	dsb	sy
1a0010d4:	e7fe      	b.n	1a0010d4 <xQueueGenericSend+0x90>
1a0010d6:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
1a0010d8:	f001 fa52 	bl	1a002580 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a0010dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0010de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0010e0:	429a      	cmp	r2, r3
1a0010e2:	d301      	bcc.n	1a0010e8 <xQueueGenericSend+0xa4>
1a0010e4:	2d02      	cmp	r5, #2
1a0010e6:	d121      	bne.n	1a00112c <xQueueGenericSend+0xe8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0010e8:	4620      	mov	r0, r4
1a0010ea:	4631      	mov	r1, r6
1a0010ec:	462a      	mov	r2, r5
1a0010ee:	f7ff fe55 	bl	1a000d9c <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0010f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0010f4:	b16b      	cbz	r3, 1a001112 <xQueueGenericSend+0xce>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0010f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0010fa:	f000 fe7d 	bl	1a001df8 <xTaskRemoveFromEventList>
1a0010fe:	b188      	cbz	r0, 1a001124 <xQueueGenericSend+0xe0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
1a001100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001104:	4b32      	ldr	r3, [pc, #200]	; (1a0011d0 <xQueueGenericSend+0x18c>)
1a001106:	601a      	str	r2, [r3, #0]
1a001108:	f3bf 8f4f 	dsb	sy
1a00110c:	f3bf 8f6f 	isb	sy
1a001110:	e008      	b.n	1a001124 <xQueueGenericSend+0xe0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
1a001112:	b138      	cbz	r0, 1a001124 <xQueueGenericSend+0xe0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
1a001114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001118:	4b2d      	ldr	r3, [pc, #180]	; (1a0011d0 <xQueueGenericSend+0x18c>)
1a00111a:	601a      	str	r2, [r3, #0]
1a00111c:	f3bf 8f4f 	dsb	sy
1a001120:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
1a001124:	f001 fa4e 	bl	1a0025c4 <vPortExitCritical>
				return pdPASS;
1a001128:	2001      	movs	r0, #1
1a00112a:	e04e      	b.n	1a0011ca <xQueueGenericSend+0x186>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1a00112c:	9b01      	ldr	r3, [sp, #4]
1a00112e:	b91b      	cbnz	r3, 1a001138 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
1a001130:	f001 fa48 	bl	1a0025c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
1a001134:	2000      	movs	r0, #0
1a001136:	e048      	b.n	1a0011ca <xQueueGenericSend+0x186>
				}
				else if( xEntryTimeSet == pdFALSE )
1a001138:	b91f      	cbnz	r7, 1a001142 <xQueueGenericSend+0xfe>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00113a:	a802      	add	r0, sp, #8
1a00113c:	f000 fea2 	bl	1a001e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001140:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1a001142:	f001 fa3f 	bl	1a0025c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
1a001146:	f000 fc4f 	bl	1a0019e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a00114a:	f001 fa19 	bl	1a002580 <vPortEnterCritical>
1a00114e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001152:	b25b      	sxtb	r3, r3
1a001154:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001158:	d102      	bne.n	1a001160 <xQueueGenericSend+0x11c>
1a00115a:	2300      	movs	r3, #0
1a00115c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001160:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001164:	b25b      	sxtb	r3, r3
1a001166:	f1b3 3fff 	cmp.w	r3, #4294967295
1a00116a:	d102      	bne.n	1a001172 <xQueueGenericSend+0x12e>
1a00116c:	2300      	movs	r3, #0
1a00116e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001172:	f001 fa27 	bl	1a0025c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001176:	a802      	add	r0, sp, #8
1a001178:	a901      	add	r1, sp, #4
1a00117a:	f000 fe8f 	bl	1a001e9c <xTaskCheckForTimeOut>
1a00117e:	b9f0      	cbnz	r0, 1a0011be <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a001180:	4620      	mov	r0, r4
1a001182:	f7ff fded 	bl	1a000d60 <prvIsQueueFull>
1a001186:	b1a0      	cbz	r0, 1a0011b2 <xQueueGenericSend+0x16e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a001188:	f104 0010 	add.w	r0, r4, #16
1a00118c:	9901      	ldr	r1, [sp, #4]
1a00118e:	f000 fdff 	bl	1a001d90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
1a001192:	4620      	mov	r0, r4
1a001194:	f7ff fe50 	bl	1a000e38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
1a001198:	f000 fcc6 	bl	1a001b28 <xTaskResumeAll>
1a00119c:	2800      	cmp	r0, #0
1a00119e:	d19b      	bne.n	1a0010d8 <xQueueGenericSend+0x94>
				{
					portYIELD_WITHIN_API();
1a0011a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0011a4:	4b0a      	ldr	r3, [pc, #40]	; (1a0011d0 <xQueueGenericSend+0x18c>)
1a0011a6:	601a      	str	r2, [r3, #0]
1a0011a8:	f3bf 8f4f 	dsb	sy
1a0011ac:	f3bf 8f6f 	isb	sy
1a0011b0:	e792      	b.n	1a0010d8 <xQueueGenericSend+0x94>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
1a0011b2:	4620      	mov	r0, r4
1a0011b4:	f7ff fe40 	bl	1a000e38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0011b8:	f000 fcb6 	bl	1a001b28 <xTaskResumeAll>
1a0011bc:	e78c      	b.n	1a0010d8 <xQueueGenericSend+0x94>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
1a0011be:	4620      	mov	r0, r4
1a0011c0:	f7ff fe3a 	bl	1a000e38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0011c4:	f000 fcb0 	bl	1a001b28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
1a0011c8:	2000      	movs	r0, #0
		}
	}
}
1a0011ca:	b005      	add	sp, #20
1a0011cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0011ce:	bf00      	nop
1a0011d0:	e000ed04 	.word	0xe000ed04

1a0011d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
1a0011d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
1a0011d8:	b940      	cbnz	r0, 1a0011ec <xQueueGenericSendFromISR+0x18>
1a0011da:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011de:	f383 8811 	msr	BASEPRI, r3
1a0011e2:	f3bf 8f6f 	isb	sy
1a0011e6:	f3bf 8f4f 	dsb	sy
1a0011ea:	e7fe      	b.n	1a0011ea <xQueueGenericSendFromISR+0x16>
1a0011ec:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0011ee:	b919      	cbnz	r1, 1a0011f8 <xQueueGenericSendFromISR+0x24>
1a0011f0:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a0011f2:	b918      	cbnz	r0, 1a0011fc <xQueueGenericSendFromISR+0x28>
1a0011f4:	2001      	movs	r0, #1
1a0011f6:	e002      	b.n	1a0011fe <xQueueGenericSendFromISR+0x2a>
1a0011f8:	2001      	movs	r0, #1
1a0011fa:	e000      	b.n	1a0011fe <xQueueGenericSendFromISR+0x2a>
1a0011fc:	2000      	movs	r0, #0
1a0011fe:	b940      	cbnz	r0, 1a001212 <xQueueGenericSendFromISR+0x3e>
1a001200:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001204:	f383 8811 	msr	BASEPRI, r3
1a001208:	f3bf 8f6f 	isb	sy
1a00120c:	f3bf 8f4f 	dsb	sy
1a001210:	e7fe      	b.n	1a001210 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001212:	2b02      	cmp	r3, #2
1a001214:	d103      	bne.n	1a00121e <xQueueGenericSendFromISR+0x4a>
1a001216:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a001218:	2801      	cmp	r0, #1
1a00121a:	d102      	bne.n	1a001222 <xQueueGenericSendFromISR+0x4e>
1a00121c:	e002      	b.n	1a001224 <xQueueGenericSendFromISR+0x50>
1a00121e:	2001      	movs	r0, #1
1a001220:	e000      	b.n	1a001224 <xQueueGenericSendFromISR+0x50>
1a001222:	2000      	movs	r0, #0
1a001224:	b940      	cbnz	r0, 1a001238 <xQueueGenericSendFromISR+0x64>
1a001226:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00122a:	f383 8811 	msr	BASEPRI, r3
1a00122e:	f3bf 8f6f 	isb	sy
1a001232:	f3bf 8f4f 	dsb	sy
1a001236:	e7fe      	b.n	1a001236 <xQueueGenericSendFromISR+0x62>
1a001238:	461f      	mov	r7, r3
1a00123a:	4690      	mov	r8, r2
1a00123c:	4689      	mov	r9, r1
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a00123e:	f001 fad5 	bl	1a0027ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a001242:	f3ef 8611 	mrs	r6, BASEPRI
1a001246:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00124a:	f383 8811 	msr	BASEPRI, r3
1a00124e:	f3bf 8f6f 	isb	sy
1a001252:	f3bf 8f4f 	dsb	sy
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001256:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001258:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00125a:	429a      	cmp	r2, r3
1a00125c:	d301      	bcc.n	1a001262 <xQueueGenericSendFromISR+0x8e>
1a00125e:	2f02      	cmp	r7, #2
1a001260:	d11f      	bne.n	1a0012a2 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
1a001262:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a001266:	b2ed      	uxtb	r5, r5
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001268:	4620      	mov	r0, r4
1a00126a:	4649      	mov	r1, r9
1a00126c:	463a      	mov	r2, r7
1a00126e:	f7ff fd95 	bl	1a000d9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
1a001272:	b26b      	sxtb	r3, r5
1a001274:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001278:	d10d      	bne.n	1a001296 <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00127a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00127c:	b19b      	cbz	r3, 1a0012a6 <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00127e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001282:	f000 fdb9 	bl	1a001df8 <xTaskRemoveFromEventList>
1a001286:	b180      	cbz	r0, 1a0012aa <xQueueGenericSendFromISR+0xd6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
1a001288:	f1b8 0f00 	cmp.w	r8, #0
1a00128c:	d00f      	beq.n	1a0012ae <xQueueGenericSendFromISR+0xda>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
1a00128e:	2001      	movs	r0, #1
1a001290:	f8c8 0000 	str.w	r0, [r8]
1a001294:	e00c      	b.n	1a0012b0 <xQueueGenericSendFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a001296:	1c6b      	adds	r3, r5, #1
1a001298:	b2db      	uxtb	r3, r3
1a00129a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			}

			xReturn = pdPASS;
1a00129e:	2001      	movs	r0, #1
1a0012a0:	e006      	b.n	1a0012b0 <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
1a0012a2:	2000      	movs	r0, #0
1a0012a4:	e004      	b.n	1a0012b0 <xQueueGenericSendFromISR+0xdc>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
			}

			xReturn = pdPASS;
1a0012a6:	2001      	movs	r0, #1
1a0012a8:	e002      	b.n	1a0012b0 <xQueueGenericSendFromISR+0xdc>
1a0012aa:	2001      	movs	r0, #1
1a0012ac:	e000      	b.n	1a0012b0 <xQueueGenericSendFromISR+0xdc>
1a0012ae:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a0012b0:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
1a0012b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a0012b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
1a0012b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0012ba:	b085      	sub	sp, #20
1a0012bc:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
1a0012be:	b940      	cbnz	r0, 1a0012d2 <xQueueReceive+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0012c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012c4:	f383 8811 	msr	BASEPRI, r3
1a0012c8:	f3bf 8f6f 	isb	sy
1a0012cc:	f3bf 8f4f 	dsb	sy
1a0012d0:	e7fe      	b.n	1a0012d0 <xQueueReceive+0x18>
1a0012d2:	4604      	mov	r4, r0

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0012d4:	b919      	cbnz	r1, 1a0012de <xQueueReceive+0x26>
1a0012d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0012d8:	b91b      	cbnz	r3, 1a0012e2 <xQueueReceive+0x2a>
1a0012da:	2301      	movs	r3, #1
1a0012dc:	e002      	b.n	1a0012e4 <xQueueReceive+0x2c>
1a0012de:	2301      	movs	r3, #1
1a0012e0:	e000      	b.n	1a0012e4 <xQueueReceive+0x2c>
1a0012e2:	2300      	movs	r3, #0
1a0012e4:	b943      	cbnz	r3, 1a0012f8 <xQueueReceive+0x40>
1a0012e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0012ea:	f383 8811 	msr	BASEPRI, r3
1a0012ee:	f3bf 8f6f 	isb	sy
1a0012f2:	f3bf 8f4f 	dsb	sy
1a0012f6:	e7fe      	b.n	1a0012f6 <xQueueReceive+0x3e>
1a0012f8:	460e      	mov	r6, r1

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0012fa:	f000 fe15 	bl	1a001f28 <xTaskGetSchedulerState>
1a0012fe:	b918      	cbnz	r0, 1a001308 <xQueueReceive+0x50>
1a001300:	9b01      	ldr	r3, [sp, #4]
1a001302:	b91b      	cbnz	r3, 1a00130c <xQueueReceive+0x54>
1a001304:	2301      	movs	r3, #1
1a001306:	e002      	b.n	1a00130e <xQueueReceive+0x56>
1a001308:	2301      	movs	r3, #1
1a00130a:	e000      	b.n	1a00130e <xQueueReceive+0x56>
1a00130c:	2300      	movs	r3, #0
1a00130e:	b943      	cbnz	r3, 1a001322 <xQueueReceive+0x6a>
1a001310:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001314:	f383 8811 	msr	BASEPRI, r3
1a001318:	f3bf 8f6f 	isb	sy
1a00131c:	f3bf 8f4f 	dsb	sy
1a001320:	e7fe      	b.n	1a001320 <xQueueReceive+0x68>
1a001322:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
1a001324:	f001 f92c 	bl	1a002580 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001328:	6ba5      	ldr	r5, [r4, #56]	; 0x38

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00132a:	b1c5      	cbz	r5, 1a00135e <xQueueReceive+0xa6>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a00132c:	4620      	mov	r0, r4
1a00132e:	4631      	mov	r1, r6
1a001330:	f7ff fd70 	bl	1a000e14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001334:	3d01      	subs	r5, #1
1a001336:	63a5      	str	r5, [r4, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001338:	6923      	ldr	r3, [r4, #16]
1a00133a:	b163      	cbz	r3, 1a001356 <xQueueReceive+0x9e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00133c:	f104 0010 	add.w	r0, r4, #16
1a001340:	f000 fd5a 	bl	1a001df8 <xTaskRemoveFromEventList>
1a001344:	b138      	cbz	r0, 1a001356 <xQueueReceive+0x9e>
					{
						queueYIELD_IF_USING_PREEMPTION();
1a001346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00134a:	4b30      	ldr	r3, [pc, #192]	; (1a00140c <xQueueReceive+0x154>)
1a00134c:	601a      	str	r2, [r3, #0]
1a00134e:	f3bf 8f4f 	dsb	sy
1a001352:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
1a001356:	f001 f935 	bl	1a0025c4 <vPortExitCritical>
				return pdPASS;
1a00135a:	2001      	movs	r0, #1
1a00135c:	e053      	b.n	1a001406 <xQueueReceive+0x14e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
1a00135e:	9b01      	ldr	r3, [sp, #4]
1a001360:	b91b      	cbnz	r3, 1a00136a <xQueueReceive+0xb2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
1a001362:	f001 f92f 	bl	1a0025c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
1a001366:	2000      	movs	r0, #0
1a001368:	e04d      	b.n	1a001406 <xQueueReceive+0x14e>
				}
				else if( xEntryTimeSet == pdFALSE )
1a00136a:	b91f      	cbnz	r7, 1a001374 <xQueueReceive+0xbc>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00136c:	a802      	add	r0, sp, #8
1a00136e:	f000 fd89 	bl	1a001e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001372:	2701      	movs	r7, #1
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
1a001374:	f001 f926 	bl	1a0025c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
1a001378:	f000 fb36 	bl	1a0019e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a00137c:	f001 f900 	bl	1a002580 <vPortEnterCritical>
1a001380:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001384:	b25b      	sxtb	r3, r3
1a001386:	f1b3 3fff 	cmp.w	r3, #4294967295
1a00138a:	d102      	bne.n	1a001392 <xQueueReceive+0xda>
1a00138c:	2300      	movs	r3, #0
1a00138e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001392:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a001396:	b25b      	sxtb	r3, r3
1a001398:	f1b3 3fff 	cmp.w	r3, #4294967295
1a00139c:	d102      	bne.n	1a0013a4 <xQueueReceive+0xec>
1a00139e:	2300      	movs	r3, #0
1a0013a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0013a4:	f001 f90e 	bl	1a0025c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0013a8:	a802      	add	r0, sp, #8
1a0013aa:	a901      	add	r1, sp, #4
1a0013ac:	f000 fd76 	bl	1a001e9c <xTaskCheckForTimeOut>
1a0013b0:	b9f0      	cbnz	r0, 1a0013f0 <xQueueReceive+0x138>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0013b2:	4620      	mov	r0, r4
1a0013b4:	f7ff fce4 	bl	1a000d80 <prvIsQueueEmpty>
1a0013b8:	b1a0      	cbz	r0, 1a0013e4 <xQueueReceive+0x12c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0013ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0013be:	9901      	ldr	r1, [sp, #4]
1a0013c0:	f000 fce6 	bl	1a001d90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0013c4:	4620      	mov	r0, r4
1a0013c6:	f7ff fd37 	bl	1a000e38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0013ca:	f000 fbad 	bl	1a001b28 <xTaskResumeAll>
1a0013ce:	2800      	cmp	r0, #0
1a0013d0:	d1a8      	bne.n	1a001324 <xQueueReceive+0x6c>
				{
					portYIELD_WITHIN_API();
1a0013d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0013d6:	4b0d      	ldr	r3, [pc, #52]	; (1a00140c <xQueueReceive+0x154>)
1a0013d8:	601a      	str	r2, [r3, #0]
1a0013da:	f3bf 8f4f 	dsb	sy
1a0013de:	f3bf 8f6f 	isb	sy
1a0013e2:	e79f      	b.n	1a001324 <xQueueReceive+0x6c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
1a0013e4:	4620      	mov	r0, r4
1a0013e6:	f7ff fd27 	bl	1a000e38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0013ea:	f000 fb9d 	bl	1a001b28 <xTaskResumeAll>
1a0013ee:	e799      	b.n	1a001324 <xQueueReceive+0x6c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
1a0013f0:	4620      	mov	r0, r4
1a0013f2:	f7ff fd21 	bl	1a000e38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0013f6:	f000 fb97 	bl	1a001b28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0013fa:	4620      	mov	r0, r4
1a0013fc:	f7ff fcc0 	bl	1a000d80 <prvIsQueueEmpty>
1a001400:	2800      	cmp	r0, #0
1a001402:	d08f      	beq.n	1a001324 <xQueueReceive+0x6c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
1a001404:	2000      	movs	r0, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
1a001406:	b005      	add	sp, #20
1a001408:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00140a:	bf00      	nop
1a00140c:	e000ed04 	.word	0xe000ed04

1a001410 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001410:	2300      	movs	r3, #0
1a001412:	e00b      	b.n	1a00142c <vQueueAddToRegistry+0x1c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001414:	4a07      	ldr	r2, [pc, #28]	; (1a001434 <vQueueAddToRegistry+0x24>)
1a001416:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a00141a:	b932      	cbnz	r2, 1a00142a <vQueueAddToRegistry+0x1a>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a00141c:	4a05      	ldr	r2, [pc, #20]	; (1a001434 <vQueueAddToRegistry+0x24>)
1a00141e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001422:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001426:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a001428:	4770      	bx	lr
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00142a:	3301      	adds	r3, #1
1a00142c:	2b07      	cmp	r3, #7
1a00142e:	d9f1      	bls.n	1a001414 <vQueueAddToRegistry+0x4>
1a001430:	4770      	bx	lr
1a001432:	bf00      	nop
1a001434:	100043f4 	.word	0x100043f4

1a001438 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001438:	b570      	push	{r4, r5, r6, lr}
1a00143a:	4604      	mov	r4, r0
1a00143c:	460e      	mov	r6, r1
1a00143e:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a001440:	f001 f89e 	bl	1a002580 <vPortEnterCritical>
1a001444:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a001448:	b25b      	sxtb	r3, r3
1a00144a:	f1b3 3fff 	cmp.w	r3, #4294967295
1a00144e:	d102      	bne.n	1a001456 <vQueueWaitForMessageRestricted+0x1e>
1a001450:	2300      	movs	r3, #0
1a001452:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a001456:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a00145a:	b25b      	sxtb	r3, r3
1a00145c:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001460:	d102      	bne.n	1a001468 <vQueueWaitForMessageRestricted+0x30>
1a001462:	2300      	movs	r3, #0
1a001464:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001468:	f001 f8ac 	bl	1a0025c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a00146c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00146e:	b92b      	cbnz	r3, 1a00147c <vQueueWaitForMessageRestricted+0x44>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a001470:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001474:	4631      	mov	r1, r6
1a001476:	462a      	mov	r2, r5
1a001478:	f000 fca2 	bl	1a001dc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a00147c:	4620      	mov	r0, r4
1a00147e:	f7ff fcdb 	bl	1a000e38 <prvUnlockQueue>
1a001482:	bd70      	pop	{r4, r5, r6, pc}

1a001484 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001484:	f100 0308 	add.w	r3, r0, #8
1a001488:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a00148a:	f04f 32ff 	mov.w	r2, #4294967295
1a00148e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001490:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001492:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a001494:	2300      	movs	r3, #0
1a001496:	6003      	str	r3, [r0, #0]
1a001498:	4770      	bx	lr
1a00149a:	bf00      	nop

1a00149c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a00149c:	2300      	movs	r3, #0
1a00149e:	6103      	str	r3, [r0, #16]
1a0014a0:	4770      	bx	lr
1a0014a2:	bf00      	nop

1a0014a4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a0014a4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a0014a6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a0014a8:	689a      	ldr	r2, [r3, #8]
1a0014aa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a0014ac:	689a      	ldr	r2, [r3, #8]
1a0014ae:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a0014b0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0014b2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0014b4:	6803      	ldr	r3, [r0, #0]
1a0014b6:	3301      	adds	r3, #1
1a0014b8:	6003      	str	r3, [r0, #0]
1a0014ba:	4770      	bx	lr

1a0014bc <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a0014bc:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a0014be:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a0014c0:	f1b5 3fff 	cmp.w	r5, #4294967295
1a0014c4:	d101      	bne.n	1a0014ca <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
1a0014c6:	6902      	ldr	r2, [r0, #16]
1a0014c8:	e007      	b.n	1a0014da <vListInsert+0x1e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0014ca:	f100 0208 	add.w	r2, r0, #8
1a0014ce:	e000      	b.n	1a0014d2 <vListInsert+0x16>
1a0014d0:	461a      	mov	r2, r3
1a0014d2:	6853      	ldr	r3, [r2, #4]
1a0014d4:	681c      	ldr	r4, [r3, #0]
1a0014d6:	42ac      	cmp	r4, r5
1a0014d8:	d9fa      	bls.n	1a0014d0 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a0014da:	6853      	ldr	r3, [r2, #4]
1a0014dc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a0014de:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a0014e0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a0014e2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0014e4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0014e6:	6803      	ldr	r3, [r0, #0]
1a0014e8:	3301      	adds	r3, #1
1a0014ea:	6003      	str	r3, [r0, #0]
}
1a0014ec:	bc30      	pop	{r4, r5}
1a0014ee:	4770      	bx	lr

1a0014f0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0014f0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0014f2:	6842      	ldr	r2, [r0, #4]
1a0014f4:	6881      	ldr	r1, [r0, #8]
1a0014f6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a0014f8:	6882      	ldr	r2, [r0, #8]
1a0014fa:	6841      	ldr	r1, [r0, #4]
1a0014fc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a0014fe:	685a      	ldr	r2, [r3, #4]
1a001500:	4282      	cmp	r2, r0
1a001502:	d101      	bne.n	1a001508 <uxListRemove+0x18>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001504:	6882      	ldr	r2, [r0, #8]
1a001506:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001508:	2200      	movs	r2, #0
1a00150a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a00150c:	681a      	ldr	r2, [r3, #0]
1a00150e:	3a01      	subs	r2, #1
1a001510:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001512:	6818      	ldr	r0, [r3, #0]
}
1a001514:	4770      	bx	lr
1a001516:	bf00      	nop

1a001518 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a001518:	4b03      	ldr	r3, [pc, #12]	; (1a001528 <vApplicationGetIdleTaskMemory+0x10>)
1a00151a:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a00151c:	4b03      	ldr	r3, [pc, #12]	; (1a00152c <vApplicationGetIdleTaskMemory+0x14>)
1a00151e:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001520:	235a      	movs	r3, #90	; 0x5a
1a001522:	6013      	str	r3, [r2, #0]
1a001524:	4770      	bx	lr
1a001526:	bf00      	nop
1a001528:	10003cbc 	.word	0x10003cbc
1a00152c:	10003b54 	.word	0x10003b54

1a001530 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001530:	4b03      	ldr	r3, [pc, #12]	; (1a001540 <vApplicationGetTimerTaskMemory+0x10>)
1a001532:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001534:	4b03      	ldr	r3, [pc, #12]	; (1a001544 <vApplicationGetTimerTaskMemory+0x14>)
1a001536:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a001538:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a00153c:	6013      	str	r3, [r2, #0]
1a00153e:	4770      	bx	lr
1a001540:	10003d1c 	.word	0x10003d1c
1a001544:	100035b4 	.word	0x100035b4

1a001548 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
    while(1)
        ;
1a001548:	e7fe      	b.n	1a001548 <vApplicationStackOverflowHook>
1a00154a:	bf00      	nop

1a00154c <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook( void )
{
    while(1)
        ;
1a00154c:	e7fe      	b.n	1a00154c <vApplicationMallocFailedHook>
1a00154e:	bf00      	nop

1a001550 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001550:	4b0a      	ldr	r3, [pc, #40]	; (1a00157c <prvResetNextTaskUnblockTime+0x2c>)
1a001552:	681b      	ldr	r3, [r3, #0]
1a001554:	681b      	ldr	r3, [r3, #0]
1a001556:	b90b      	cbnz	r3, 1a00155c <prvResetNextTaskUnblockTime+0xc>
1a001558:	2301      	movs	r3, #1
1a00155a:	e000      	b.n	1a00155e <prvResetNextTaskUnblockTime+0xe>
1a00155c:	2300      	movs	r3, #0
1a00155e:	b123      	cbz	r3, 1a00156a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
1a001560:	f04f 32ff 	mov.w	r2, #4294967295
1a001564:	4b06      	ldr	r3, [pc, #24]	; (1a001580 <prvResetNextTaskUnblockTime+0x30>)
1a001566:	601a      	str	r2, [r3, #0]
1a001568:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a00156a:	4b04      	ldr	r3, [pc, #16]	; (1a00157c <prvResetNextTaskUnblockTime+0x2c>)
1a00156c:	681b      	ldr	r3, [r3, #0]
1a00156e:	68db      	ldr	r3, [r3, #12]
1a001570:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001572:	685a      	ldr	r2, [r3, #4]
1a001574:	4b02      	ldr	r3, [pc, #8]	; (1a001580 <prvResetNextTaskUnblockTime+0x30>)
1a001576:	601a      	str	r2, [r3, #0]
1a001578:	4770      	bx	lr
1a00157a:	bf00      	nop
1a00157c:	10003d80 	.word	0x10003d80
1a001580:	10003e5c 	.word	0x10003e5c

1a001584 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
1a001584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001588:	4682      	mov	sl, r0
1a00158a:	460d      	mov	r5, r1
1a00158c:	4617      	mov	r7, r2
1a00158e:	4699      	mov	r9, r3
1a001590:	9e08      	ldr	r6, [sp, #32]
1a001592:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001596:	9c0a      	ldr	r4, [sp, #40]	; 0x28

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001598:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a00159a:	21a5      	movs	r1, #165	; 0xa5
1a00159c:	0092      	lsls	r2, r2, #2
1a00159e:	f002 fc98 	bl	1a003ed2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a0015a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0015a4:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a0015a8:	3a01      	subs	r2, #1
1a0015aa:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a0015ae:	f027 0707 	bic.w	r7, r7, #7

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a0015b2:	6467      	str	r7, [r4, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0015b4:	2300      	movs	r3, #0
1a0015b6:	e006      	b.n	1a0015c6 <prvInitialiseNewTask+0x42>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a0015b8:	5ce9      	ldrb	r1, [r5, r3]
1a0015ba:	18e2      	adds	r2, r4, r3
1a0015bc:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
1a0015c0:	5cea      	ldrb	r2, [r5, r3]
1a0015c2:	b112      	cbz	r2, 1a0015ca <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a0015c4:	3301      	adds	r3, #1
1a0015c6:	2b0f      	cmp	r3, #15
1a0015c8:	d9f6      	bls.n	1a0015b8 <prvInitialiseNewTask+0x34>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a0015ca:	2300      	movs	r3, #0
1a0015cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a0015d0:	2e06      	cmp	r6, #6
1a0015d2:	d900      	bls.n	1a0015d6 <prvInitialiseNewTask+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a0015d4:	2606      	movs	r6, #6
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
1a0015d6:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
1a0015d8:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a0015da:	2500      	movs	r5, #0
1a0015dc:	6565      	str	r5, [r4, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a0015de:	1d20      	adds	r0, r4, #4
1a0015e0:	f7ff ff5c 	bl	1a00149c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a0015e4:	f104 0018 	add.w	r0, r4, #24
1a0015e8:	f7ff ff58 	bl	1a00149c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a0015ec:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0015ee:	f1c6 0607 	rsb	r6, r6, #7
1a0015f2:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a0015f4:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
1a0015f6:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a0015f8:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a0015fc:	4638      	mov	r0, r7
1a0015fe:	4651      	mov	r1, sl
1a001600:	464a      	mov	r2, r9
1a001602:	f000 ff89 	bl	1a002518 <pxPortInitialiseStack>
1a001606:	6020      	str	r0, [r4, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
1a001608:	f1b8 0f00 	cmp.w	r8, #0
1a00160c:	d001      	beq.n	1a001612 <prvInitialiseNewTask+0x8e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a00160e:	f8c8 4000 	str.w	r4, [r8]
1a001612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001616:	bf00      	nop

1a001618 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
1a001618:	b538      	push	{r3, r4, r5, lr}
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00161a:	2400      	movs	r4, #0
1a00161c:	e007      	b.n	1a00162e <prvInitialiseTaskLists+0x16>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a00161e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001622:	009b      	lsls	r3, r3, #2
1a001624:	480e      	ldr	r0, [pc, #56]	; (1a001660 <prvInitialiseTaskLists+0x48>)
1a001626:	4418      	add	r0, r3
1a001628:	f7ff ff2c 	bl	1a001484 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a00162c:	3401      	adds	r4, #1
1a00162e:	2c06      	cmp	r4, #6
1a001630:	d9f5      	bls.n	1a00161e <prvInitialiseTaskLists+0x6>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
1a001632:	4d0c      	ldr	r5, [pc, #48]	; (1a001664 <prvInitialiseTaskLists+0x4c>)
1a001634:	4628      	mov	r0, r5
1a001636:	f7ff ff25 	bl	1a001484 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a00163a:	4c0b      	ldr	r4, [pc, #44]	; (1a001668 <prvInitialiseTaskLists+0x50>)
1a00163c:	4620      	mov	r0, r4
1a00163e:	f7ff ff21 	bl	1a001484 <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001642:	480a      	ldr	r0, [pc, #40]	; (1a00166c <prvInitialiseTaskLists+0x54>)
1a001644:	f7ff ff1e 	bl	1a001484 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
1a001648:	4809      	ldr	r0, [pc, #36]	; (1a001670 <prvInitialiseTaskLists+0x58>)
1a00164a:	f7ff ff1b 	bl	1a001484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
1a00164e:	4809      	ldr	r0, [pc, #36]	; (1a001674 <prvInitialiseTaskLists+0x5c>)
1a001650:	f7ff ff18 	bl	1a001484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
1a001654:	4b08      	ldr	r3, [pc, #32]	; (1a001678 <prvInitialiseTaskLists+0x60>)
1a001656:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001658:	4b08      	ldr	r3, [pc, #32]	; (1a00167c <prvInitialiseTaskLists+0x64>)
1a00165a:	601c      	str	r4, [r3, #0]
1a00165c:	bd38      	pop	{r3, r4, r5, pc}
1a00165e:	bf00      	nop
1a001660:	10003da4 	.word	0x10003da4
1a001664:	10003e64 	.word	0x10003e64
1a001668:	10003e78 	.word	0x10003e78
1a00166c:	10003e40 	.word	0x10003e40
1a001670:	10003d88 	.word	0x10003d88
1a001674:	10003e8c 	.word	0x10003e8c
1a001678:	10003d80 	.word	0x10003d80
1a00167c:	10003d9c 	.word	0x10003d9c

1a001680 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
1a001680:	b510      	push	{r4, lr}
1a001682:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
1a001684:	f000 ff7c 	bl	1a002580 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
1a001688:	4a20      	ldr	r2, [pc, #128]	; (1a00170c <prvAddNewTaskToReadyList+0x8c>)
1a00168a:	6813      	ldr	r3, [r2, #0]
1a00168c:	3301      	adds	r3, #1
1a00168e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001690:	4b1f      	ldr	r3, [pc, #124]	; (1a001710 <prvAddNewTaskToReadyList+0x90>)
1a001692:	681b      	ldr	r3, [r3, #0]
1a001694:	b93b      	cbnz	r3, 1a0016a6 <prvAddNewTaskToReadyList+0x26>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
1a001696:	4b1e      	ldr	r3, [pc, #120]	; (1a001710 <prvAddNewTaskToReadyList+0x90>)
1a001698:	601c      	str	r4, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a00169a:	6813      	ldr	r3, [r2, #0]
1a00169c:	2b01      	cmp	r3, #1
1a00169e:	d10d      	bne.n	1a0016bc <prvAddNewTaskToReadyList+0x3c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
1a0016a0:	f7ff ffba 	bl	1a001618 <prvInitialiseTaskLists>
1a0016a4:	e00a      	b.n	1a0016bc <prvAddNewTaskToReadyList+0x3c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
1a0016a6:	4b1b      	ldr	r3, [pc, #108]	; (1a001714 <prvAddNewTaskToReadyList+0x94>)
1a0016a8:	681b      	ldr	r3, [r3, #0]
1a0016aa:	b93b      	cbnz	r3, 1a0016bc <prvAddNewTaskToReadyList+0x3c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a0016ac:	4b18      	ldr	r3, [pc, #96]	; (1a001710 <prvAddNewTaskToReadyList+0x90>)
1a0016ae:	681b      	ldr	r3, [r3, #0]
1a0016b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0016b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0016b4:	429a      	cmp	r2, r3
1a0016b6:	d801      	bhi.n	1a0016bc <prvAddNewTaskToReadyList+0x3c>
				{
					pxCurrentTCB = pxNewTCB;
1a0016b8:	4b15      	ldr	r3, [pc, #84]	; (1a001710 <prvAddNewTaskToReadyList+0x90>)
1a0016ba:	601c      	str	r4, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
1a0016bc:	4a16      	ldr	r2, [pc, #88]	; (1a001718 <prvAddNewTaskToReadyList+0x98>)
1a0016be:	6813      	ldr	r3, [r2, #0]
1a0016c0:	3301      	adds	r3, #1
1a0016c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a0016c4:	64a3      	str	r3, [r4, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
1a0016c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1a0016c8:	2301      	movs	r3, #1
1a0016ca:	4083      	lsls	r3, r0
1a0016cc:	4913      	ldr	r1, [pc, #76]	; (1a00171c <prvAddNewTaskToReadyList+0x9c>)
1a0016ce:	680a      	ldr	r2, [r1, #0]
1a0016d0:	4313      	orrs	r3, r2
1a0016d2:	600b      	str	r3, [r1, #0]
1a0016d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0016d8:	0080      	lsls	r0, r0, #2
1a0016da:	4b11      	ldr	r3, [pc, #68]	; (1a001720 <prvAddNewTaskToReadyList+0xa0>)
1a0016dc:	4418      	add	r0, r3
1a0016de:	1d21      	adds	r1, r4, #4
1a0016e0:	f7ff fee0 	bl	1a0014a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
1a0016e4:	f000 ff6e 	bl	1a0025c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
1a0016e8:	4b0a      	ldr	r3, [pc, #40]	; (1a001714 <prvAddNewTaskToReadyList+0x94>)
1a0016ea:	681b      	ldr	r3, [r3, #0]
1a0016ec:	b16b      	cbz	r3, 1a00170a <prvAddNewTaskToReadyList+0x8a>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a0016ee:	4b08      	ldr	r3, [pc, #32]	; (1a001710 <prvAddNewTaskToReadyList+0x90>)
1a0016f0:	681b      	ldr	r3, [r3, #0]
1a0016f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0016f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0016f6:	429a      	cmp	r2, r3
1a0016f8:	d207      	bcs.n	1a00170a <prvAddNewTaskToReadyList+0x8a>
		{
			taskYIELD_IF_USING_PREEMPTION();
1a0016fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0016fe:	4b09      	ldr	r3, [pc, #36]	; (1a001724 <prvAddNewTaskToReadyList+0xa4>)
1a001700:	601a      	str	r2, [r3, #0]
1a001702:	f3bf 8f4f 	dsb	sy
1a001706:	f3bf 8f6f 	isb	sy
1a00170a:	bd10      	pop	{r4, pc}
1a00170c:	10003e38 	.word	0x10003e38
1a001710:	10003e3c 	.word	0x10003e3c
1a001714:	10003d84 	.word	0x10003d84
1a001718:	10003e60 	.word	0x10003e60
1a00171c:	10003ea0 	.word	0x10003ea0
1a001720:	10003da4 	.word	0x10003da4
1a001724:	e000ed04 	.word	0xe000ed04

1a001728 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
1a001728:	b510      	push	{r4, lr}
1a00172a:	4604      	mov	r4, r0
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a00172c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001730:	b933      	cbnz	r3, 1a001740 <prvDeleteTCB+0x18>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
1a001732:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001734:	f7ff fb08 	bl	1a000d48 <vPortFree>
				vPortFree( pxTCB );
1a001738:	4620      	mov	r0, r4
1a00173a:	f7ff fb05 	bl	1a000d48 <vPortFree>
1a00173e:	bd10      	pop	{r4, pc}
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001740:	2b01      	cmp	r3, #1
1a001742:	d102      	bne.n	1a00174a <prvDeleteTCB+0x22>
			{
				/* Only the stack was statically allocated, so the TCB is the
				only memory that must be freed. */
				vPortFree( pxTCB );
1a001744:	f7ff fb00 	bl	1a000d48 <vPortFree>
1a001748:	bd10      	pop	{r4, pc}
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a00174a:	2b02      	cmp	r3, #2
1a00174c:	d008      	beq.n	1a001760 <prvDeleteTCB+0x38>
1a00174e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001752:	f383 8811 	msr	BASEPRI, r3
1a001756:	f3bf 8f6f 	isb	sy
1a00175a:	f3bf 8f4f 	dsb	sy
1a00175e:	e7fe      	b.n	1a00175e <prvDeleteTCB+0x36>
1a001760:	bd10      	pop	{r4, pc}
1a001762:	bf00      	nop

1a001764 <prvCheckTasksWaitingTermination>:
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
1a001764:	b510      	push	{r4, lr}
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001766:	e014      	b.n	1a001792 <prvCheckTasksWaitingTermination+0x2e>
		{
			taskENTER_CRITICAL();
1a001768:	f000 ff0a 	bl	1a002580 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a00176c:	4b0b      	ldr	r3, [pc, #44]	; (1a00179c <prvCheckTasksWaitingTermination+0x38>)
1a00176e:	68db      	ldr	r3, [r3, #12]
1a001770:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001772:	1d20      	adds	r0, r4, #4
1a001774:	f7ff febc 	bl	1a0014f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001778:	4a09      	ldr	r2, [pc, #36]	; (1a0017a0 <prvCheckTasksWaitingTermination+0x3c>)
1a00177a:	6813      	ldr	r3, [r2, #0]
1a00177c:	3b01      	subs	r3, #1
1a00177e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001780:	4a08      	ldr	r2, [pc, #32]	; (1a0017a4 <prvCheckTasksWaitingTermination+0x40>)
1a001782:	6813      	ldr	r3, [r2, #0]
1a001784:	3b01      	subs	r3, #1
1a001786:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
1a001788:	f000 ff1c 	bl	1a0025c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
1a00178c:	4620      	mov	r0, r4
1a00178e:	f7ff ffcb 	bl	1a001728 <prvDeleteTCB>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001792:	4b04      	ldr	r3, [pc, #16]	; (1a0017a4 <prvCheckTasksWaitingTermination+0x40>)
1a001794:	681b      	ldr	r3, [r3, #0]
1a001796:	2b00      	cmp	r3, #0
1a001798:	d1e6      	bne.n	1a001768 <prvCheckTasksWaitingTermination+0x4>

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
1a00179a:	bd10      	pop	{r4, pc}
1a00179c:	10003d88 	.word	0x10003d88
1a0017a0:	10003e38 	.word	0x10003e38
1a0017a4:	10003e34 	.word	0x10003e34

1a0017a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
1a0017a8:	b508      	push	{r3, lr}

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
1a0017aa:	f7ff ffdb 	bl	1a001764 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a0017ae:	4b06      	ldr	r3, [pc, #24]	; (1a0017c8 <prvIdleTask+0x20>)
1a0017b0:	681b      	ldr	r3, [r3, #0]
1a0017b2:	2b01      	cmp	r3, #1
1a0017b4:	d9f9      	bls.n	1a0017aa <prvIdleTask+0x2>
			{
				taskYIELD();
1a0017b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0017ba:	4b04      	ldr	r3, [pc, #16]	; (1a0017cc <prvIdleTask+0x24>)
1a0017bc:	601a      	str	r2, [r3, #0]
1a0017be:	f3bf 8f4f 	dsb	sy
1a0017c2:	f3bf 8f6f 	isb	sy
1a0017c6:	e7f0      	b.n	1a0017aa <prvIdleTask+0x2>
1a0017c8:	10003da4 	.word	0x10003da4
1a0017cc:	e000ed04 	.word	0xe000ed04

1a0017d0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a0017d0:	b570      	push	{r4, r5, r6, lr}
1a0017d2:	4604      	mov	r4, r0
1a0017d4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a0017d6:	4b1c      	ldr	r3, [pc, #112]	; (1a001848 <prvAddCurrentTaskToDelayedList+0x78>)
1a0017d8:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0017da:	4b1c      	ldr	r3, [pc, #112]	; (1a00184c <prvAddCurrentTaskToDelayedList+0x7c>)
1a0017dc:	6818      	ldr	r0, [r3, #0]
1a0017de:	3004      	adds	r0, #4
1a0017e0:	f7ff fe86 	bl	1a0014f0 <uxListRemove>
1a0017e4:	b948      	cbnz	r0, 1a0017fa <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a0017e6:	4b19      	ldr	r3, [pc, #100]	; (1a00184c <prvAddCurrentTaskToDelayedList+0x7c>)
1a0017e8:	681b      	ldr	r3, [r3, #0]
1a0017ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a0017ec:	2301      	movs	r3, #1
1a0017ee:	4093      	lsls	r3, r2
1a0017f0:	4917      	ldr	r1, [pc, #92]	; (1a001850 <prvAddCurrentTaskToDelayedList+0x80>)
1a0017f2:	680a      	ldr	r2, [r1, #0]
1a0017f4:	ea22 0303 	bic.w	r3, r2, r3
1a0017f8:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a0017fa:	f1b4 3fff 	cmp.w	r4, #4294967295
1a0017fe:	d107      	bne.n	1a001810 <prvAddCurrentTaskToDelayedList+0x40>
1a001800:	b136      	cbz	r6, 1a001810 <prvAddCurrentTaskToDelayedList+0x40>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001802:	4b12      	ldr	r3, [pc, #72]	; (1a00184c <prvAddCurrentTaskToDelayedList+0x7c>)
1a001804:	6819      	ldr	r1, [r3, #0]
1a001806:	4813      	ldr	r0, [pc, #76]	; (1a001854 <prvAddCurrentTaskToDelayedList+0x84>)
1a001808:	3104      	adds	r1, #4
1a00180a:	f7ff fe4b 	bl	1a0014a4 <vListInsertEnd>
1a00180e:	bd70      	pop	{r4, r5, r6, pc}
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001810:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001812:	4b0e      	ldr	r3, [pc, #56]	; (1a00184c <prvAddCurrentTaskToDelayedList+0x7c>)
1a001814:	681b      	ldr	r3, [r3, #0]
1a001816:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a001818:	42ac      	cmp	r4, r5
1a00181a:	d207      	bcs.n	1a00182c <prvAddCurrentTaskToDelayedList+0x5c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00181c:	4b0e      	ldr	r3, [pc, #56]	; (1a001858 <prvAddCurrentTaskToDelayedList+0x88>)
1a00181e:	6818      	ldr	r0, [r3, #0]
1a001820:	4b0a      	ldr	r3, [pc, #40]	; (1a00184c <prvAddCurrentTaskToDelayedList+0x7c>)
1a001822:	6819      	ldr	r1, [r3, #0]
1a001824:	3104      	adds	r1, #4
1a001826:	f7ff fe49 	bl	1a0014bc <vListInsert>
1a00182a:	bd70      	pop	{r4, r5, r6, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a00182c:	4b0b      	ldr	r3, [pc, #44]	; (1a00185c <prvAddCurrentTaskToDelayedList+0x8c>)
1a00182e:	6818      	ldr	r0, [r3, #0]
1a001830:	4b06      	ldr	r3, [pc, #24]	; (1a00184c <prvAddCurrentTaskToDelayedList+0x7c>)
1a001832:	6819      	ldr	r1, [r3, #0]
1a001834:	3104      	adds	r1, #4
1a001836:	f7ff fe41 	bl	1a0014bc <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a00183a:	4b09      	ldr	r3, [pc, #36]	; (1a001860 <prvAddCurrentTaskToDelayedList+0x90>)
1a00183c:	681b      	ldr	r3, [r3, #0]
1a00183e:	429c      	cmp	r4, r3
1a001840:	d201      	bcs.n	1a001846 <prvAddCurrentTaskToDelayedList+0x76>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a001842:	4b07      	ldr	r3, [pc, #28]	; (1a001860 <prvAddCurrentTaskToDelayedList+0x90>)
1a001844:	601c      	str	r4, [r3, #0]
1a001846:	bd70      	pop	{r4, r5, r6, pc}
1a001848:	10003e58 	.word	0x10003e58
1a00184c:	10003e3c 	.word	0x10003e3c
1a001850:	10003ea0 	.word	0x10003ea0
1a001854:	10003e8c 	.word	0x10003e8c
1a001858:	10003d9c 	.word	0x10003d9c
1a00185c:	10003d80 	.word	0x10003d80
1a001860:	10003e5c 	.word	0x10003e5c

1a001864 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
1a001864:	b570      	push	{r4, r5, r6, lr}
1a001866:	b086      	sub	sp, #24
1a001868:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a00186a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
1a00186c:	b945      	cbnz	r5, 1a001880 <xTaskCreateStatic+0x1c>
1a00186e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001872:	f383 8811 	msr	BASEPRI, r3
1a001876:	f3bf 8f6f 	isb	sy
1a00187a:	f3bf 8f4f 	dsb	sy
1a00187e:	e7fe      	b.n	1a00187e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a001880:	b944      	cbnz	r4, 1a001894 <xTaskCreateStatic+0x30>
1a001882:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001886:	f383 8811 	msr	BASEPRI, r3
1a00188a:	f3bf 8f6f 	isb	sy
1a00188e:	f3bf 8f4f 	dsb	sy
1a001892:	e7fe      	b.n	1a001892 <xTaskCreateStatic+0x2e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
1a001894:	2660      	movs	r6, #96	; 0x60
1a001896:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001898:	9e04      	ldr	r6, [sp, #16]
1a00189a:	2e60      	cmp	r6, #96	; 0x60
1a00189c:	d008      	beq.n	1a0018b0 <xTaskCreateStatic+0x4c>
1a00189e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0018a2:	f383 8811 	msr	BASEPRI, r3
1a0018a6:	f3bf 8f6f 	isb	sy
1a0018aa:	f3bf 8f4f 	dsb	sy
1a0018ae:	e7fe      	b.n	1a0018ae <xTaskCreateStatic+0x4a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
1a0018b0:	b18c      	cbz	r4, 1a0018d6 <xTaskCreateStatic+0x72>
1a0018b2:	b185      	cbz	r5, 1a0018d6 <xTaskCreateStatic+0x72>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a0018b4:	6325      	str	r5, [r4, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a0018b6:	2502      	movs	r5, #2
1a0018b8:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a0018bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0018be:	9500      	str	r5, [sp, #0]
1a0018c0:	ad05      	add	r5, sp, #20
1a0018c2:	9501      	str	r5, [sp, #4]
1a0018c4:	9402      	str	r4, [sp, #8]
1a0018c6:	2500      	movs	r5, #0
1a0018c8:	9503      	str	r5, [sp, #12]
1a0018ca:	f7ff fe5b 	bl	1a001584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a0018ce:	4620      	mov	r0, r4
1a0018d0:	f7ff fed6 	bl	1a001680 <prvAddNewTaskToReadyList>
1a0018d4:	e001      	b.n	1a0018da <xTaskCreateStatic+0x76>
		}
		else
		{
			xReturn = NULL;
1a0018d6:	2300      	movs	r3, #0
1a0018d8:	9305      	str	r3, [sp, #20]
		}

		return xReturn;
	}
1a0018da:	9805      	ldr	r0, [sp, #20]
1a0018dc:	b006      	add	sp, #24
1a0018de:	bd70      	pop	{r4, r5, r6, pc}

1a0018e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
1a0018e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0018e4:	b085      	sub	sp, #20
1a0018e6:	4680      	mov	r8, r0
1a0018e8:	460f      	mov	r7, r1
1a0018ea:	4615      	mov	r5, r2
1a0018ec:	461e      	mov	r6, r3
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0018ee:	0090      	lsls	r0, r2, #2
1a0018f0:	f7ff f9f8 	bl	1a000ce4 <pvPortMalloc>

			if( pxStack != NULL )
1a0018f4:	b160      	cbz	r0, 1a001910 <xTaskCreate+0x30>
1a0018f6:	4681      	mov	r9, r0
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a0018f8:	2060      	movs	r0, #96	; 0x60
1a0018fa:	f7ff f9f3 	bl	1a000ce4 <pvPortMalloc>

				if( pxNewTCB != NULL )
1a0018fe:	4604      	mov	r4, r0
1a001900:	b110      	cbz	r0, 1a001908 <xTaskCreate+0x28>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
1a001902:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
1a001906:	e004      	b.n	1a001912 <xTaskCreate+0x32>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
1a001908:	4648      	mov	r0, r9
1a00190a:	f7ff fa1d 	bl	1a000d48 <vPortFree>
1a00190e:	e000      	b.n	1a001912 <xTaskCreate+0x32>
				}
			}
			else
			{
				pxNewTCB = NULL;
1a001910:	2400      	movs	r4, #0
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
1a001912:	b19c      	cbz	r4, 1a00193c <xTaskCreate+0x5c>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001914:	2300      	movs	r3, #0
1a001916:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a00191a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a00191c:	9200      	str	r2, [sp, #0]
1a00191e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a001920:	9201      	str	r2, [sp, #4]
1a001922:	9402      	str	r4, [sp, #8]
1a001924:	9303      	str	r3, [sp, #12]
1a001926:	4640      	mov	r0, r8
1a001928:	4639      	mov	r1, r7
1a00192a:	462a      	mov	r2, r5
1a00192c:	4633      	mov	r3, r6
1a00192e:	f7ff fe29 	bl	1a001584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001932:	4620      	mov	r0, r4
1a001934:	f7ff fea4 	bl	1a001680 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001938:	2001      	movs	r0, #1
1a00193a:	e001      	b.n	1a001940 <xTaskCreate+0x60>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a00193c:	f04f 30ff 	mov.w	r0, #4294967295
		}

		return xReturn;
	}
1a001940:	b005      	add	sp, #20
1a001942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a001946:	bf00      	nop

1a001948 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
1a001948:	b510      	push	{r4, lr}
1a00194a:	b088      	sub	sp, #32
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a00194c:	2400      	movs	r4, #0
1a00194e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001950:	9406      	str	r4, [sp, #24]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001952:	a805      	add	r0, sp, #20
1a001954:	a906      	add	r1, sp, #24
1a001956:	aa07      	add	r2, sp, #28
1a001958:	f7ff fdde 	bl	1a001518 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a00195c:	9400      	str	r4, [sp, #0]
1a00195e:	9b06      	ldr	r3, [sp, #24]
1a001960:	9301      	str	r3, [sp, #4]
1a001962:	9b05      	ldr	r3, [sp, #20]
1a001964:	9302      	str	r3, [sp, #8]
1a001966:	481a      	ldr	r0, [pc, #104]	; (1a0019d0 <vTaskStartScheduler+0x88>)
1a001968:	491a      	ldr	r1, [pc, #104]	; (1a0019d4 <vTaskStartScheduler+0x8c>)
1a00196a:	9a07      	ldr	r2, [sp, #28]
1a00196c:	4623      	mov	r3, r4
1a00196e:	f7ff ff79 	bl	1a001864 <xTaskCreateStatic>
1a001972:	4b19      	ldr	r3, [pc, #100]	; (1a0019d8 <vTaskStartScheduler+0x90>)
1a001974:	6018      	str	r0, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
1a001976:	b108      	cbz	r0, 1a00197c <vTaskStartScheduler+0x34>
		{
			xReturn = pdPASS;
1a001978:	2001      	movs	r0, #1
1a00197a:	e000      	b.n	1a00197e <vTaskStartScheduler+0x36>
		}
		else
		{
			xReturn = pdFAIL;
1a00197c:	2000      	movs	r0, #0
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
1a00197e:	2801      	cmp	r0, #1
1a001980:	d101      	bne.n	1a001986 <vTaskStartScheduler+0x3e>
		{
			xReturn = xTimerCreateTimerTask();
1a001982:	f000 fbc5 	bl	1a002110 <xTimerCreateTimerTask>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
1a001986:	2801      	cmp	r0, #1
1a001988:	d114      	bne.n	1a0019b4 <vTaskStartScheduler+0x6c>
1a00198a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00198e:	f383 8811 	msr	BASEPRI, r3
1a001992:	f3bf 8f6f 	isb	sy
1a001996:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
1a00199a:	f04f 32ff 	mov.w	r2, #4294967295
1a00199e:	4b0f      	ldr	r3, [pc, #60]	; (1a0019dc <vTaskStartScheduler+0x94>)
1a0019a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a0019a2:	2201      	movs	r2, #1
1a0019a4:	4b0e      	ldr	r3, [pc, #56]	; (1a0019e0 <vTaskStartScheduler+0x98>)
1a0019a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a0019a8:	2200      	movs	r2, #0
1a0019aa:	4b0e      	ldr	r3, [pc, #56]	; (1a0019e4 <vTaskStartScheduler+0x9c>)
1a0019ac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
1a0019ae:	f000 fe89 	bl	1a0026c4 <xPortStartScheduler>
1a0019b2:	e00b      	b.n	1a0019cc <vTaskStartScheduler+0x84>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a0019b4:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0019b8:	d108      	bne.n	1a0019cc <vTaskStartScheduler+0x84>
1a0019ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0019be:	f383 8811 	msr	BASEPRI, r3
1a0019c2:	f3bf 8f6f 	isb	sy
1a0019c6:	f3bf 8f4f 	dsb	sy
1a0019ca:	e7fe      	b.n	1a0019ca <vTaskStartScheduler+0x82>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
1a0019cc:	b008      	add	sp, #32
1a0019ce:	bd10      	pop	{r4, pc}
1a0019d0:	1a0017a9 	.word	0x1a0017a9
1a0019d4:	1a003f3c 	.word	0x1a003f3c
1a0019d8:	10003e54 	.word	0x10003e54
1a0019dc:	10003e5c 	.word	0x10003e5c
1a0019e0:	10003d84 	.word	0x10003d84
1a0019e4:	10003e58 	.word	0x10003e58

1a0019e8 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
1a0019e8:	4a02      	ldr	r2, [pc, #8]	; (1a0019f4 <vTaskSuspendAll+0xc>)
1a0019ea:	6813      	ldr	r3, [r2, #0]
1a0019ec:	3301      	adds	r3, #1
1a0019ee:	6013      	str	r3, [r2, #0]
1a0019f0:	4770      	bx	lr
1a0019f2:	bf00      	nop
1a0019f4:	10003e30 	.word	0x10003e30

1a0019f8 <xTaskGetTickCount>:
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
1a0019f8:	4b01      	ldr	r3, [pc, #4]	; (1a001a00 <xTaskGetTickCount+0x8>)
1a0019fa:	6818      	ldr	r0, [r3, #0]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
}
1a0019fc:	4770      	bx	lr
1a0019fe:	bf00      	nop
1a001a00:	10003e58 	.word	0x10003e58

1a001a04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
1a001a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001a06:	4b3d      	ldr	r3, [pc, #244]	; (1a001afc <xTaskIncrementTick+0xf8>)
1a001a08:	681b      	ldr	r3, [r3, #0]
1a001a0a:	2b00      	cmp	r3, #0
1a001a0c:	d169      	bne.n	1a001ae2 <xTaskIncrementTick+0xde>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001a0e:	4b3c      	ldr	r3, [pc, #240]	; (1a001b00 <xTaskIncrementTick+0xfc>)
1a001a10:	681d      	ldr	r5, [r3, #0]
1a001a12:	3501      	adds	r5, #1

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
1a001a14:	601d      	str	r5, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001a16:	b9c5      	cbnz	r5, 1a001a4a <xTaskIncrementTick+0x46>
		{
			taskSWITCH_DELAYED_LISTS();
1a001a18:	4b3a      	ldr	r3, [pc, #232]	; (1a001b04 <xTaskIncrementTick+0x100>)
1a001a1a:	681b      	ldr	r3, [r3, #0]
1a001a1c:	681b      	ldr	r3, [r3, #0]
1a001a1e:	b143      	cbz	r3, 1a001a32 <xTaskIncrementTick+0x2e>
1a001a20:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001a24:	f383 8811 	msr	BASEPRI, r3
1a001a28:	f3bf 8f6f 	isb	sy
1a001a2c:	f3bf 8f4f 	dsb	sy
1a001a30:	e7fe      	b.n	1a001a30 <xTaskIncrementTick+0x2c>
1a001a32:	4a34      	ldr	r2, [pc, #208]	; (1a001b04 <xTaskIncrementTick+0x100>)
1a001a34:	6811      	ldr	r1, [r2, #0]
1a001a36:	4b34      	ldr	r3, [pc, #208]	; (1a001b08 <xTaskIncrementTick+0x104>)
1a001a38:	6818      	ldr	r0, [r3, #0]
1a001a3a:	6010      	str	r0, [r2, #0]
1a001a3c:	6019      	str	r1, [r3, #0]
1a001a3e:	4a33      	ldr	r2, [pc, #204]	; (1a001b0c <xTaskIncrementTick+0x108>)
1a001a40:	6813      	ldr	r3, [r2, #0]
1a001a42:	3301      	adds	r3, #1
1a001a44:	6013      	str	r3, [r2, #0]
1a001a46:	f7ff fd83 	bl	1a001550 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001a4a:	4b31      	ldr	r3, [pc, #196]	; (1a001b10 <xTaskIncrementTick+0x10c>)
1a001a4c:	681b      	ldr	r3, [r3, #0]
1a001a4e:	429d      	cmp	r5, r3
1a001a50:	d203      	bcs.n	1a001a5a <xTaskIncrementTick+0x56>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
1a001a52:	2400      	movs	r4, #0
1a001a54:	e03a      	b.n	1a001acc <xTaskIncrementTick+0xc8>
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
						{
							xSwitchRequired = pdTRUE;
1a001a56:	2401      	movs	r4, #1
1a001a58:	e000      	b.n	1a001a5c <xTaskIncrementTick+0x58>
1a001a5a:	2400      	movs	r4, #0
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001a5c:	4b29      	ldr	r3, [pc, #164]	; (1a001b04 <xTaskIncrementTick+0x100>)
1a001a5e:	681b      	ldr	r3, [r3, #0]
1a001a60:	681b      	ldr	r3, [r3, #0]
1a001a62:	b90b      	cbnz	r3, 1a001a68 <xTaskIncrementTick+0x64>
1a001a64:	2301      	movs	r3, #1
1a001a66:	e000      	b.n	1a001a6a <xTaskIncrementTick+0x66>
1a001a68:	2300      	movs	r3, #0
1a001a6a:	b123      	cbz	r3, 1a001a76 <xTaskIncrementTick+0x72>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001a6c:	f04f 32ff 	mov.w	r2, #4294967295
1a001a70:	4b27      	ldr	r3, [pc, #156]	; (1a001b10 <xTaskIncrementTick+0x10c>)
1a001a72:	601a      	str	r2, [r3, #0]
					break;
1a001a74:	e02a      	b.n	1a001acc <xTaskIncrementTick+0xc8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001a76:	4b23      	ldr	r3, [pc, #140]	; (1a001b04 <xTaskIncrementTick+0x100>)
1a001a78:	681b      	ldr	r3, [r3, #0]
1a001a7a:	68db      	ldr	r3, [r3, #12]
1a001a7c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001a7e:	6873      	ldr	r3, [r6, #4]

					if( xConstTickCount < xItemValue )
1a001a80:	429d      	cmp	r5, r3
1a001a82:	d202      	bcs.n	1a001a8a <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
1a001a84:	4a22      	ldr	r2, [pc, #136]	; (1a001b10 <xTaskIncrementTick+0x10c>)
1a001a86:	6013      	str	r3, [r2, #0]
						break;
1a001a88:	e020      	b.n	1a001acc <xTaskIncrementTick+0xc8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001a8a:	1d37      	adds	r7, r6, #4
1a001a8c:	4638      	mov	r0, r7
1a001a8e:	f7ff fd2f 	bl	1a0014f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001a92:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001a94:	b11b      	cbz	r3, 1a001a9e <xTaskIncrementTick+0x9a>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001a96:	f106 0018 	add.w	r0, r6, #24
1a001a9a:	f7ff fd29 	bl	1a0014f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
1a001a9e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001aa0:	2201      	movs	r2, #1
1a001aa2:	fa02 f103 	lsl.w	r1, r2, r3
1a001aa6:	481b      	ldr	r0, [pc, #108]	; (1a001b14 <xTaskIncrementTick+0x110>)
1a001aa8:	6802      	ldr	r2, [r0, #0]
1a001aaa:	430a      	orrs	r2, r1
1a001aac:	6002      	str	r2, [r0, #0]
1a001aae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001ab2:	009b      	lsls	r3, r3, #2
1a001ab4:	4818      	ldr	r0, [pc, #96]	; (1a001b18 <xTaskIncrementTick+0x114>)
1a001ab6:	4418      	add	r0, r3
1a001ab8:	4639      	mov	r1, r7
1a001aba:	f7ff fcf3 	bl	1a0014a4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001abe:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001ac0:	4b16      	ldr	r3, [pc, #88]	; (1a001b1c <xTaskIncrementTick+0x118>)
1a001ac2:	681b      	ldr	r3, [r3, #0]
1a001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001ac6:	429a      	cmp	r2, r3
1a001ac8:	d2c5      	bcs.n	1a001a56 <xTaskIncrementTick+0x52>
1a001aca:	e7c7      	b.n	1a001a5c <xTaskIncrementTick+0x58>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001acc:	4b13      	ldr	r3, [pc, #76]	; (1a001b1c <xTaskIncrementTick+0x118>)
1a001ace:	681b      	ldr	r3, [r3, #0]
1a001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001ad2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001ad6:	009b      	lsls	r3, r3, #2
1a001ad8:	4a0f      	ldr	r2, [pc, #60]	; (1a001b18 <xTaskIncrementTick+0x114>)
1a001ada:	58d3      	ldr	r3, [r2, r3]
1a001adc:	2b01      	cmp	r3, #1
1a001ade:	d806      	bhi.n	1a001aee <xTaskIncrementTick+0xea>
1a001ae0:	e006      	b.n	1a001af0 <xTaskIncrementTick+0xec>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
1a001ae2:	4a0f      	ldr	r2, [pc, #60]	; (1a001b20 <xTaskIncrementTick+0x11c>)
1a001ae4:	6813      	ldr	r3, [r2, #0]
1a001ae6:	3301      	adds	r3, #1
1a001ae8:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
1a001aea:	2400      	movs	r4, #0
1a001aec:	e000      	b.n	1a001af0 <xTaskIncrementTick+0xec>
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
			{
				xSwitchRequired = pdTRUE;
1a001aee:	2401      	movs	r4, #1
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
1a001af0:	4b0c      	ldr	r3, [pc, #48]	; (1a001b24 <xTaskIncrementTick+0x120>)
1a001af2:	681b      	ldr	r3, [r3, #0]
1a001af4:	b103      	cbz	r3, 1a001af8 <xTaskIncrementTick+0xf4>
		{
			xSwitchRequired = pdTRUE;
1a001af6:	2401      	movs	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
1a001af8:	4620      	mov	r0, r4
1a001afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001afc:	10003e30 	.word	0x10003e30
1a001b00:	10003e58 	.word	0x10003e58
1a001b04:	10003d80 	.word	0x10003d80
1a001b08:	10003d9c 	.word	0x10003d9c
1a001b0c:	10003d7c 	.word	0x10003d7c
1a001b10:	10003e5c 	.word	0x10003e5c
1a001b14:	10003ea0 	.word	0x10003ea0
1a001b18:	10003da4 	.word	0x10003da4
1a001b1c:	10003e3c 	.word	0x10003e3c
1a001b20:	10003da0 	.word	0x10003da0
1a001b24:	10003ea4 	.word	0x10003ea4

1a001b28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
1a001b28:	b538      	push	{r3, r4, r5, lr}
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
1a001b2a:	4b34      	ldr	r3, [pc, #208]	; (1a001bfc <xTaskResumeAll+0xd4>)
1a001b2c:	681b      	ldr	r3, [r3, #0]
1a001b2e:	b943      	cbnz	r3, 1a001b42 <xTaskResumeAll+0x1a>
1a001b30:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001b34:	f383 8811 	msr	BASEPRI, r3
1a001b38:	f3bf 8f6f 	isb	sy
1a001b3c:	f3bf 8f4f 	dsb	sy
1a001b40:	e7fe      	b.n	1a001b40 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
1a001b42:	f000 fd1d 	bl	1a002580 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
1a001b46:	4b2d      	ldr	r3, [pc, #180]	; (1a001bfc <xTaskResumeAll+0xd4>)
1a001b48:	681a      	ldr	r2, [r3, #0]
1a001b4a:	3a01      	subs	r2, #1
1a001b4c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001b4e:	681b      	ldr	r3, [r3, #0]
1a001b50:	2b00      	cmp	r3, #0
1a001b52:	d14c      	bne.n	1a001bee <xTaskResumeAll+0xc6>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a001b54:	4b2a      	ldr	r3, [pc, #168]	; (1a001c00 <xTaskResumeAll+0xd8>)
1a001b56:	681b      	ldr	r3, [r3, #0]
1a001b58:	bb33      	cbnz	r3, 1a001ba8 <xTaskResumeAll+0x80>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
1a001b5a:	2400      	movs	r4, #0
1a001b5c:	e04a      	b.n	1a001bf4 <xTaskResumeAll+0xcc>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a001b5e:	4b29      	ldr	r3, [pc, #164]	; (1a001c04 <xTaskResumeAll+0xdc>)
1a001b60:	68db      	ldr	r3, [r3, #12]
1a001b62:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001b64:	f104 0018 	add.w	r0, r4, #24
1a001b68:	f7ff fcc2 	bl	1a0014f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001b6c:	1d25      	adds	r5, r4, #4
1a001b6e:	4628      	mov	r0, r5
1a001b70:	f7ff fcbe 	bl	1a0014f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001b74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b76:	2201      	movs	r2, #1
1a001b78:	fa02 f103 	lsl.w	r1, r2, r3
1a001b7c:	4822      	ldr	r0, [pc, #136]	; (1a001c08 <xTaskResumeAll+0xe0>)
1a001b7e:	6802      	ldr	r2, [r0, #0]
1a001b80:	430a      	orrs	r2, r1
1a001b82:	6002      	str	r2, [r0, #0]
1a001b84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001b88:	009b      	lsls	r3, r3, #2
1a001b8a:	4820      	ldr	r0, [pc, #128]	; (1a001c0c <xTaskResumeAll+0xe4>)
1a001b8c:	4418      	add	r0, r3
1a001b8e:	4629      	mov	r1, r5
1a001b90:	f7ff fc88 	bl	1a0014a4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001b94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001b96:	4b1e      	ldr	r3, [pc, #120]	; (1a001c10 <xTaskResumeAll+0xe8>)
1a001b98:	681b      	ldr	r3, [r3, #0]
1a001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001b9c:	429a      	cmp	r2, r3
1a001b9e:	d304      	bcc.n	1a001baa <xTaskResumeAll+0x82>
					{
						xYieldPending = pdTRUE;
1a001ba0:	2201      	movs	r2, #1
1a001ba2:	4b1c      	ldr	r3, [pc, #112]	; (1a001c14 <xTaskResumeAll+0xec>)
1a001ba4:	601a      	str	r2, [r3, #0]
1a001ba6:	e000      	b.n	1a001baa <xTaskResumeAll+0x82>
1a001ba8:	2400      	movs	r4, #0
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a001baa:	4b16      	ldr	r3, [pc, #88]	; (1a001c04 <xTaskResumeAll+0xdc>)
1a001bac:	681b      	ldr	r3, [r3, #0]
1a001bae:	2b00      	cmp	r3, #0
1a001bb0:	d1d5      	bne.n	1a001b5e <xTaskResumeAll+0x36>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
1a001bb2:	b10c      	cbz	r4, 1a001bb8 <xTaskResumeAll+0x90>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
1a001bb4:	f7ff fccc 	bl	1a001550 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a001bb8:	4b17      	ldr	r3, [pc, #92]	; (1a001c18 <xTaskResumeAll+0xf0>)
1a001bba:	681c      	ldr	r4, [r3, #0]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a001bbc:	b154      	cbz	r4, 1a001bd4 <xTaskResumeAll+0xac>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
1a001bbe:	f7ff ff21 	bl	1a001a04 <xTaskIncrementTick>
1a001bc2:	b110      	cbz	r0, 1a001bca <xTaskResumeAll+0xa2>
							{
								xYieldPending = pdTRUE;
1a001bc4:	2201      	movs	r2, #1
1a001bc6:	4b13      	ldr	r3, [pc, #76]	; (1a001c14 <xTaskResumeAll+0xec>)
1a001bc8:	601a      	str	r2, [r3, #0]
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a001bca:	3c01      	subs	r4, #1
1a001bcc:	d1f7      	bne.n	1a001bbe <xTaskResumeAll+0x96>

						uxPendedTicks = 0;
1a001bce:	2200      	movs	r2, #0
1a001bd0:	4b11      	ldr	r3, [pc, #68]	; (1a001c18 <xTaskResumeAll+0xf0>)
1a001bd2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
1a001bd4:	4b0f      	ldr	r3, [pc, #60]	; (1a001c14 <xTaskResumeAll+0xec>)
1a001bd6:	681b      	ldr	r3, [r3, #0]
1a001bd8:	b15b      	cbz	r3, 1a001bf2 <xTaskResumeAll+0xca>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
1a001bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001bde:	4b0f      	ldr	r3, [pc, #60]	; (1a001c1c <xTaskResumeAll+0xf4>)
1a001be0:	601a      	str	r2, [r3, #0]
1a001be2:	f3bf 8f4f 	dsb	sy
1a001be6:	f3bf 8f6f 	isb	sy

				if( xYieldPending != pdFALSE )
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
1a001bea:	2401      	movs	r4, #1
1a001bec:	e002      	b.n	1a001bf4 <xTaskResumeAll+0xcc>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB = NULL;
BaseType_t xAlreadyYielded = pdFALSE;
1a001bee:	2400      	movs	r4, #0
1a001bf0:	e000      	b.n	1a001bf4 <xTaskResumeAll+0xcc>
1a001bf2:	2400      	movs	r4, #0
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a001bf4:	f000 fce6 	bl	1a0025c4 <vPortExitCritical>

	return xAlreadyYielded;
}
1a001bf8:	4620      	mov	r0, r4
1a001bfa:	bd38      	pop	{r3, r4, r5, pc}
1a001bfc:	10003e30 	.word	0x10003e30
1a001c00:	10003e38 	.word	0x10003e38
1a001c04:	10003e40 	.word	0x10003e40
1a001c08:	10003ea0 	.word	0x10003ea0
1a001c0c:	10003da4 	.word	0x10003da4
1a001c10:	10003e3c 	.word	0x10003e3c
1a001c14:	10003ea4 	.word	0x10003ea4
1a001c18:	10003da0 	.word	0x10003da0
1a001c1c:	e000ed04 	.word	0xe000ed04

1a001c20 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
1a001c20:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
1a001c22:	b940      	cbnz	r0, 1a001c36 <vTaskDelayUntil+0x16>
1a001c24:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c28:	f383 8811 	msr	BASEPRI, r3
1a001c2c:	f3bf 8f6f 	isb	sy
1a001c30:	f3bf 8f4f 	dsb	sy
1a001c34:	e7fe      	b.n	1a001c34 <vTaskDelayUntil+0x14>
1a001c36:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a001c38:	b941      	cbnz	r1, 1a001c4c <vTaskDelayUntil+0x2c>
1a001c3a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c3e:	f383 8811 	msr	BASEPRI, r3
1a001c42:	f3bf 8f6f 	isb	sy
1a001c46:	f3bf 8f4f 	dsb	sy
1a001c4a:	e7fe      	b.n	1a001c4a <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a001c4c:	4b1c      	ldr	r3, [pc, #112]	; (1a001cc0 <vTaskDelayUntil+0xa0>)
1a001c4e:	681b      	ldr	r3, [r3, #0]
1a001c50:	b143      	cbz	r3, 1a001c64 <vTaskDelayUntil+0x44>
1a001c52:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c56:	f383 8811 	msr	BASEPRI, r3
1a001c5a:	f3bf 8f6f 	isb	sy
1a001c5e:	f3bf 8f4f 	dsb	sy
1a001c62:	e7fe      	b.n	1a001c62 <vTaskDelayUntil+0x42>
1a001c64:	460c      	mov	r4, r1

		vTaskSuspendAll();
1a001c66:	f7ff febf 	bl	1a0019e8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
1a001c6a:	4b16      	ldr	r3, [pc, #88]	; (1a001cc4 <vTaskDelayUntil+0xa4>)
1a001c6c:	6818      	ldr	r0, [r3, #0]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a001c6e:	682a      	ldr	r2, [r5, #0]
1a001c70:	1913      	adds	r3, r2, r4

			if( xConstTickCount < *pxPreviousWakeTime )
1a001c72:	4290      	cmp	r0, r2
1a001c74:	d205      	bcs.n	1a001c82 <vTaskDelayUntil+0x62>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a001c76:	429a      	cmp	r2, r3
1a001c78:	d909      	bls.n	1a001c8e <vTaskDelayUntil+0x6e>
1a001c7a:	4283      	cmp	r3, r0
1a001c7c:	d809      	bhi.n	1a001c92 <vTaskDelayUntil+0x72>
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1a001c7e:	2200      	movs	r2, #0
1a001c80:	e00c      	b.n	1a001c9c <vTaskDelayUntil+0x7c>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a001c82:	429a      	cmp	r2, r3
1a001c84:	d807      	bhi.n	1a001c96 <vTaskDelayUntil+0x76>
1a001c86:	4283      	cmp	r3, r0
1a001c88:	d807      	bhi.n	1a001c9a <vTaskDelayUntil+0x7a>
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1a001c8a:	2200      	movs	r2, #0
1a001c8c:	e006      	b.n	1a001c9c <vTaskDelayUntil+0x7c>
1a001c8e:	2200      	movs	r2, #0
1a001c90:	e004      	b.n	1a001c9c <vTaskDelayUntil+0x7c>
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
				{
					xShouldDelay = pdTRUE;
1a001c92:	2201      	movs	r2, #1
1a001c94:	e002      	b.n	1a001c9c <vTaskDelayUntil+0x7c>
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
				{
					xShouldDelay = pdTRUE;
1a001c96:	2201      	movs	r2, #1
1a001c98:	e000      	b.n	1a001c9c <vTaskDelayUntil+0x7c>
1a001c9a:	2201      	movs	r2, #1
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
1a001c9c:	602b      	str	r3, [r5, #0]

			if( xShouldDelay != pdFALSE )
1a001c9e:	b11a      	cbz	r2, 1a001ca8 <vTaskDelayUntil+0x88>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a001ca0:	1a18      	subs	r0, r3, r0
1a001ca2:	2100      	movs	r1, #0
1a001ca4:	f7ff fd94 	bl	1a0017d0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
1a001ca8:	f7ff ff3e 	bl	1a001b28 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
1a001cac:	b938      	cbnz	r0, 1a001cbe <vTaskDelayUntil+0x9e>
		{
			portYIELD_WITHIN_API();
1a001cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001cb2:	4b05      	ldr	r3, [pc, #20]	; (1a001cc8 <vTaskDelayUntil+0xa8>)
1a001cb4:	601a      	str	r2, [r3, #0]
1a001cb6:	f3bf 8f4f 	dsb	sy
1a001cba:	f3bf 8f6f 	isb	sy
1a001cbe:	bd38      	pop	{r3, r4, r5, pc}
1a001cc0:	10003e30 	.word	0x10003e30
1a001cc4:	10003e58 	.word	0x10003e58
1a001cc8:	e000ed04 	.word	0xe000ed04

1a001ccc <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a001ccc:	4b2b      	ldr	r3, [pc, #172]	; (1a001d7c <vTaskSwitchContext+0xb0>)
1a001cce:	681b      	ldr	r3, [r3, #0]
1a001cd0:	b11b      	cbz	r3, 1a001cda <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
1a001cd2:	2201      	movs	r2, #1
1a001cd4:	4b2a      	ldr	r3, [pc, #168]	; (1a001d80 <vTaskSwitchContext+0xb4>)
1a001cd6:	601a      	str	r2, [r3, #0]
1a001cd8:	4770      	bx	lr

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
1a001cda:	b510      	push	{r4, lr}
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
1a001cdc:	2200      	movs	r2, #0
1a001cde:	4b28      	ldr	r3, [pc, #160]	; (1a001d80 <vTaskSwitchContext+0xb4>)
1a001ce0:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
1a001ce2:	4b28      	ldr	r3, [pc, #160]	; (1a001d84 <vTaskSwitchContext+0xb8>)
1a001ce4:	681b      	ldr	r3, [r3, #0]
1a001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a001ce8:	681a      	ldr	r2, [r3, #0]
1a001cea:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001cee:	d10b      	bne.n	1a001d08 <vTaskSwitchContext+0x3c>
1a001cf0:	685a      	ldr	r2, [r3, #4]
1a001cf2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001cf6:	d107      	bne.n	1a001d08 <vTaskSwitchContext+0x3c>
1a001cf8:	689a      	ldr	r2, [r3, #8]
1a001cfa:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a001cfe:	d103      	bne.n	1a001d08 <vTaskSwitchContext+0x3c>
1a001d00:	68db      	ldr	r3, [r3, #12]
1a001d02:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a001d06:	d005      	beq.n	1a001d14 <vTaskSwitchContext+0x48>
1a001d08:	4b1e      	ldr	r3, [pc, #120]	; (1a001d84 <vTaskSwitchContext+0xb8>)
1a001d0a:	6818      	ldr	r0, [r3, #0]
1a001d0c:	6819      	ldr	r1, [r3, #0]
1a001d0e:	3134      	adds	r1, #52	; 0x34
1a001d10:	f7ff fc1a 	bl	1a001548 <vApplicationStackOverflowHook>

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a001d14:	4b1c      	ldr	r3, [pc, #112]	; (1a001d88 <vTaskSwitchContext+0xbc>)
1a001d16:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a001d18:	fab3 f383 	clz	r3, r3
1a001d1c:	b2db      	uxtb	r3, r3
1a001d1e:	f1c3 031f 	rsb	r3, r3, #31
1a001d22:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001d26:	0092      	lsls	r2, r2, #2
1a001d28:	4918      	ldr	r1, [pc, #96]	; (1a001d8c <vTaskSwitchContext+0xc0>)
1a001d2a:	588a      	ldr	r2, [r1, r2]
1a001d2c:	b942      	cbnz	r2, 1a001d40 <vTaskSwitchContext+0x74>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a001d2e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d32:	f383 8811 	msr	BASEPRI, r3
1a001d36:	f3bf 8f6f 	isb	sy
1a001d3a:	f3bf 8f4f 	dsb	sy
1a001d3e:	e7fe      	b.n	1a001d3e <vTaskSwitchContext+0x72>
1a001d40:	4c12      	ldr	r4, [pc, #72]	; (1a001d8c <vTaskSwitchContext+0xc0>)
1a001d42:	009a      	lsls	r2, r3, #2
1a001d44:	18d1      	adds	r1, r2, r3
1a001d46:	0089      	lsls	r1, r1, #2
1a001d48:	4421      	add	r1, r4
1a001d4a:	6848      	ldr	r0, [r1, #4]
1a001d4c:	6840      	ldr	r0, [r0, #4]
1a001d4e:	6048      	str	r0, [r1, #4]
1a001d50:	441a      	add	r2, r3
1a001d52:	0092      	lsls	r2, r2, #2
1a001d54:	3208      	adds	r2, #8
1a001d56:	4422      	add	r2, r4
1a001d58:	4290      	cmp	r0, r2
1a001d5a:	d105      	bne.n	1a001d68 <vTaskSwitchContext+0x9c>
1a001d5c:	6841      	ldr	r1, [r0, #4]
1a001d5e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
1a001d62:	0092      	lsls	r2, r2, #2
1a001d64:	4422      	add	r2, r4
1a001d66:	6051      	str	r1, [r2, #4]
1a001d68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001d6c:	009b      	lsls	r3, r3, #2
1a001d6e:	4a07      	ldr	r2, [pc, #28]	; (1a001d8c <vTaskSwitchContext+0xc0>)
1a001d70:	4413      	add	r3, r2
1a001d72:	685b      	ldr	r3, [r3, #4]
1a001d74:	68da      	ldr	r2, [r3, #12]
1a001d76:	4b03      	ldr	r3, [pc, #12]	; (1a001d84 <vTaskSwitchContext+0xb8>)
1a001d78:	601a      	str	r2, [r3, #0]
1a001d7a:	bd10      	pop	{r4, pc}
1a001d7c:	10003e30 	.word	0x10003e30
1a001d80:	10003ea4 	.word	0x10003ea4
1a001d84:	10003e3c 	.word	0x10003e3c
1a001d88:	10003ea0 	.word	0x10003ea0
1a001d8c:	10003da4 	.word	0x10003da4

1a001d90 <vTaskPlaceOnEventList>:
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
	configASSERT( pxEventList );
1a001d90:	b940      	cbnz	r0, 1a001da4 <vTaskPlaceOnEventList+0x14>
1a001d92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d96:	f383 8811 	msr	BASEPRI, r3
1a001d9a:	f3bf 8f6f 	isb	sy
1a001d9e:	f3bf 8f4f 	dsb	sy
1a001da2:	e7fe      	b.n	1a001da2 <vTaskPlaceOnEventList+0x12>
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
1a001da4:	b510      	push	{r4, lr}
1a001da6:	460c      	mov	r4, r1

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001da8:	4b04      	ldr	r3, [pc, #16]	; (1a001dbc <vTaskPlaceOnEventList+0x2c>)
1a001daa:	6819      	ldr	r1, [r3, #0]
1a001dac:	3118      	adds	r1, #24
1a001dae:	f7ff fb85 	bl	1a0014bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a001db2:	4620      	mov	r0, r4
1a001db4:	2101      	movs	r1, #1
1a001db6:	f7ff fd0b 	bl	1a0017d0 <prvAddCurrentTaskToDelayedList>
1a001dba:	bd10      	pop	{r4, pc}
1a001dbc:	10003e3c 	.word	0x10003e3c

1a001dc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001dc0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a001dc2:	b940      	cbnz	r0, 1a001dd6 <vTaskPlaceOnEventListRestricted+0x16>
1a001dc4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001dc8:	f383 8811 	msr	BASEPRI, r3
1a001dcc:	f3bf 8f6f 	isb	sy
1a001dd0:	f3bf 8f4f 	dsb	sy
1a001dd4:	e7fe      	b.n	1a001dd4 <vTaskPlaceOnEventListRestricted+0x14>
1a001dd6:	460d      	mov	r5, r1
1a001dd8:	4614      	mov	r4, r2

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a001dda:	4a06      	ldr	r2, [pc, #24]	; (1a001df4 <vTaskPlaceOnEventListRestricted+0x34>)
1a001ddc:	6811      	ldr	r1, [r2, #0]
1a001dde:	3118      	adds	r1, #24
1a001de0:	f7ff fb60 	bl	1a0014a4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
1a001de4:	b10c      	cbz	r4, 1a001dea <vTaskPlaceOnEventListRestricted+0x2a>
		{
			xTicksToWait = portMAX_DELAY;
1a001de6:	f04f 35ff 	mov.w	r5, #4294967295
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a001dea:	4628      	mov	r0, r5
1a001dec:	4621      	mov	r1, r4
1a001dee:	f7ff fcef 	bl	1a0017d0 <prvAddCurrentTaskToDelayedList>
1a001df2:	bd38      	pop	{r3, r4, r5, pc}
1a001df4:	10003e3c 	.word	0x10003e3c

1a001df8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
1a001df8:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a001dfa:	68c3      	ldr	r3, [r0, #12]
1a001dfc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a001dfe:	b944      	cbnz	r4, 1a001e12 <xTaskRemoveFromEventList+0x1a>
1a001e00:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e04:	f383 8811 	msr	BASEPRI, r3
1a001e08:	f3bf 8f6f 	isb	sy
1a001e0c:	f3bf 8f4f 	dsb	sy
1a001e10:	e7fe      	b.n	1a001e10 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a001e12:	f104 0518 	add.w	r5, r4, #24
1a001e16:	4628      	mov	r0, r5
1a001e18:	f7ff fb6a 	bl	1a0014f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001e1c:	4b13      	ldr	r3, [pc, #76]	; (1a001e6c <xTaskRemoveFromEventList+0x74>)
1a001e1e:	681b      	ldr	r3, [r3, #0]
1a001e20:	b9a3      	cbnz	r3, 1a001e4c <xTaskRemoveFromEventList+0x54>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a001e22:	1d25      	adds	r5, r4, #4
1a001e24:	4628      	mov	r0, r5
1a001e26:	f7ff fb63 	bl	1a0014f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a001e2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001e2c:	2201      	movs	r2, #1
1a001e2e:	fa02 f103 	lsl.w	r1, r2, r3
1a001e32:	480f      	ldr	r0, [pc, #60]	; (1a001e70 <xTaskRemoveFromEventList+0x78>)
1a001e34:	6802      	ldr	r2, [r0, #0]
1a001e36:	430a      	orrs	r2, r1
1a001e38:	6002      	str	r2, [r0, #0]
1a001e3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001e3e:	009b      	lsls	r3, r3, #2
1a001e40:	480c      	ldr	r0, [pc, #48]	; (1a001e74 <xTaskRemoveFromEventList+0x7c>)
1a001e42:	4418      	add	r0, r3
1a001e44:	4629      	mov	r1, r5
1a001e46:	f7ff fb2d 	bl	1a0014a4 <vListInsertEnd>
1a001e4a:	e003      	b.n	1a001e54 <xTaskRemoveFromEventList+0x5c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a001e4c:	480a      	ldr	r0, [pc, #40]	; (1a001e78 <xTaskRemoveFromEventList+0x80>)
1a001e4e:	4629      	mov	r1, r5
1a001e50:	f7ff fb28 	bl	1a0014a4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a001e54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001e56:	4b09      	ldr	r3, [pc, #36]	; (1a001e7c <xTaskRemoveFromEventList+0x84>)
1a001e58:	681b      	ldr	r3, [r3, #0]
1a001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001e5c:	429a      	cmp	r2, r3
1a001e5e:	d903      	bls.n	1a001e68 <xTaskRemoveFromEventList+0x70>
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
1a001e60:	2001      	movs	r0, #1
1a001e62:	4b07      	ldr	r3, [pc, #28]	; (1a001e80 <xTaskRemoveFromEventList+0x88>)
1a001e64:	6018      	str	r0, [r3, #0]
1a001e66:	bd38      	pop	{r3, r4, r5, pc}
	}
	else
	{
		xReturn = pdFALSE;
1a001e68:	2000      	movs	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
1a001e6a:	bd38      	pop	{r3, r4, r5, pc}
1a001e6c:	10003e30 	.word	0x10003e30
1a001e70:	10003ea0 	.word	0x10003ea0
1a001e74:	10003da4 	.word	0x10003da4
1a001e78:	10003e40 	.word	0x10003e40
1a001e7c:	10003e3c 	.word	0x10003e3c
1a001e80:	10003ea4 	.word	0x10003ea4

1a001e84 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a001e84:	4b03      	ldr	r3, [pc, #12]	; (1a001e94 <vTaskInternalSetTimeOutState+0x10>)
1a001e86:	681b      	ldr	r3, [r3, #0]
1a001e88:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a001e8a:	4b03      	ldr	r3, [pc, #12]	; (1a001e98 <vTaskInternalSetTimeOutState+0x14>)
1a001e8c:	681b      	ldr	r3, [r3, #0]
1a001e8e:	6043      	str	r3, [r0, #4]
1a001e90:	4770      	bx	lr
1a001e92:	bf00      	nop
1a001e94:	10003d7c 	.word	0x10003d7c
1a001e98:	10003e58 	.word	0x10003e58

1a001e9c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
1a001e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
BaseType_t xReturn;

	configASSERT( pxTimeOut );
1a001e9e:	b940      	cbnz	r0, 1a001eb2 <xTaskCheckForTimeOut+0x16>
1a001ea0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ea4:	f383 8811 	msr	BASEPRI, r3
1a001ea8:	f3bf 8f6f 	isb	sy
1a001eac:	f3bf 8f4f 	dsb	sy
1a001eb0:	e7fe      	b.n	1a001eb0 <xTaskCheckForTimeOut+0x14>
1a001eb2:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a001eb4:	b941      	cbnz	r1, 1a001ec8 <xTaskCheckForTimeOut+0x2c>
1a001eb6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001eba:	f383 8811 	msr	BASEPRI, r3
1a001ebe:	f3bf 8f6f 	isb	sy
1a001ec2:	f3bf 8f4f 	dsb	sy
1a001ec6:	e7fe      	b.n	1a001ec6 <xTaskCheckForTimeOut+0x2a>
1a001ec8:	460c      	mov	r4, r1

	taskENTER_CRITICAL();
1a001eca:	f000 fb59 	bl	1a002580 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
1a001ece:	4b11      	ldr	r3, [pc, #68]	; (1a001f14 <xTaskCheckForTimeOut+0x78>)
1a001ed0:	6818      	ldr	r0, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a001ed2:	6869      	ldr	r1, [r5, #4]
1a001ed4:	1a42      	subs	r2, r0, r1
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
1a001ed6:	6823      	ldr	r3, [r4, #0]
1a001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
1a001edc:	d013      	beq.n	1a001f06 <xTaskCheckForTimeOut+0x6a>
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a001ede:	682f      	ldr	r7, [r5, #0]
1a001ee0:	4e0d      	ldr	r6, [pc, #52]	; (1a001f18 <xTaskCheckForTimeOut+0x7c>)
1a001ee2:	6836      	ldr	r6, [r6, #0]
1a001ee4:	42b7      	cmp	r7, r6
1a001ee6:	d001      	beq.n	1a001eec <xTaskCheckForTimeOut+0x50>
1a001ee8:	4288      	cmp	r0, r1
1a001eea:	d20e      	bcs.n	1a001f0a <xTaskCheckForTimeOut+0x6e>
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a001eec:	429a      	cmp	r2, r3
1a001eee:	d206      	bcs.n	1a001efe <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
1a001ef0:	1a9b      	subs	r3, r3, r2
1a001ef2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a001ef4:	4628      	mov	r0, r5
1a001ef6:	f7ff ffc5 	bl	1a001e84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a001efa:	2400      	movs	r4, #0
1a001efc:	e006      	b.n	1a001f0c <xTaskCheckForTimeOut+0x70>
		}
		else
		{
			*pxTicksToWait = 0;
1a001efe:	2300      	movs	r3, #0
1a001f00:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a001f02:	2401      	movs	r4, #1
1a001f04:	e002      	b.n	1a001f0c <xTaskCheckForTimeOut+0x70>
			if( *pxTicksToWait == portMAX_DELAY )
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
1a001f06:	2400      	movs	r4, #0
1a001f08:	e000      	b.n	1a001f0c <xTaskCheckForTimeOut+0x70>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
1a001f0a:	2401      	movs	r4, #1
		{
			*pxTicksToWait = 0;
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
1a001f0c:	f000 fb5a 	bl	1a0025c4 <vPortExitCritical>

	return xReturn;
}
1a001f10:	4620      	mov	r0, r4
1a001f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001f14:	10003e58 	.word	0x10003e58
1a001f18:	10003d7c 	.word	0x10003d7c

1a001f1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
1a001f1c:	2201      	movs	r2, #1
1a001f1e:	4b01      	ldr	r3, [pc, #4]	; (1a001f24 <vTaskMissedYield+0x8>)
1a001f20:	601a      	str	r2, [r3, #0]
1a001f22:	4770      	bx	lr
1a001f24:	10003ea4 	.word	0x10003ea4

1a001f28 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
1a001f28:	4b05      	ldr	r3, [pc, #20]	; (1a001f40 <xTaskGetSchedulerState+0x18>)
1a001f2a:	681b      	ldr	r3, [r3, #0]
1a001f2c:	b123      	cbz	r3, 1a001f38 <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001f2e:	4b05      	ldr	r3, [pc, #20]	; (1a001f44 <xTaskGetSchedulerState+0x1c>)
1a001f30:	681b      	ldr	r3, [r3, #0]
1a001f32:	b91b      	cbnz	r3, 1a001f3c <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
1a001f34:	2002      	movs	r0, #2
1a001f36:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
1a001f38:	2001      	movs	r0, #1
1a001f3a:	4770      	bx	lr
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
1a001f3c:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
1a001f3e:	4770      	bx	lr
1a001f40:	10003d84 	.word	0x10003d84
1a001f44:	10003e30 	.word	0x10003e30

1a001f48 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
1a001f48:	2800      	cmp	r0, #0
1a001f4a:	d04b      	beq.n	1a001fe4 <xTaskPriorityDisinherit+0x9c>
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
1a001f4c:	b538      	push	{r3, r4, r5, lr}
1a001f4e:	4603      	mov	r3, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
1a001f50:	4a27      	ldr	r2, [pc, #156]	; (1a001ff0 <xTaskPriorityDisinherit+0xa8>)
1a001f52:	6812      	ldr	r2, [r2, #0]
1a001f54:	4290      	cmp	r0, r2
1a001f56:	d008      	beq.n	1a001f6a <xTaskPriorityDisinherit+0x22>
1a001f58:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f5c:	f383 8811 	msr	BASEPRI, r3
1a001f60:	f3bf 8f6f 	isb	sy
1a001f64:	f3bf 8f4f 	dsb	sy
1a001f68:	e7fe      	b.n	1a001f68 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a001f6a:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a001f6c:	b942      	cbnz	r2, 1a001f80 <xTaskPriorityDisinherit+0x38>
1a001f6e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001f72:	f383 8811 	msr	BASEPRI, r3
1a001f76:	f3bf 8f6f 	isb	sy
1a001f7a:	f3bf 8f4f 	dsb	sy
1a001f7e:	e7fe      	b.n	1a001f7e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a001f80:	3a01      	subs	r2, #1
1a001f82:	6542      	str	r2, [r0, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a001f84:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a001f86:	6d19      	ldr	r1, [r3, #80]	; 0x50
1a001f88:	4288      	cmp	r0, r1
1a001f8a:	d02d      	beq.n	1a001fe8 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a001f8c:	bb72      	cbnz	r2, 1a001fec <xTaskPriorityDisinherit+0xa4>
1a001f8e:	461c      	mov	r4, r3
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001f90:	1d1d      	adds	r5, r3, #4
1a001f92:	4628      	mov	r0, r5
1a001f94:	f7ff faac 	bl	1a0014f0 <uxListRemove>
1a001f98:	b970      	cbnz	r0, 1a001fb8 <xTaskPriorityDisinherit+0x70>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a001f9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a001f9c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
1a001fa0:	009b      	lsls	r3, r3, #2
1a001fa2:	4914      	ldr	r1, [pc, #80]	; (1a001ff4 <xTaskPriorityDisinherit+0xac>)
1a001fa4:	58cb      	ldr	r3, [r1, r3]
1a001fa6:	b93b      	cbnz	r3, 1a001fb8 <xTaskPriorityDisinherit+0x70>
1a001fa8:	2301      	movs	r3, #1
1a001faa:	fa03 f202 	lsl.w	r2, r3, r2
1a001fae:	4912      	ldr	r1, [pc, #72]	; (1a001ff8 <xTaskPriorityDisinherit+0xb0>)
1a001fb0:	680b      	ldr	r3, [r1, #0]
1a001fb2:	ea23 0302 	bic.w	r3, r3, r2
1a001fb6:	600b      	str	r3, [r1, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a001fb8:	6d20      	ldr	r0, [r4, #80]	; 0x50
1a001fba:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001fbc:	f1c0 0307 	rsb	r3, r0, #7
1a001fc0:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a001fc2:	2401      	movs	r4, #1
1a001fc4:	fa04 f100 	lsl.w	r1, r4, r0
1a001fc8:	4a0b      	ldr	r2, [pc, #44]	; (1a001ff8 <xTaskPriorityDisinherit+0xb0>)
1a001fca:	6813      	ldr	r3, [r2, #0]
1a001fcc:	430b      	orrs	r3, r1
1a001fce:	6013      	str	r3, [r2, #0]
1a001fd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001fd4:	0080      	lsls	r0, r0, #2
1a001fd6:	4b07      	ldr	r3, [pc, #28]	; (1a001ff4 <xTaskPriorityDisinherit+0xac>)
1a001fd8:	4418      	add	r0, r3
1a001fda:	4629      	mov	r1, r5
1a001fdc:	f7ff fa62 	bl	1a0014a4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
1a001fe0:	4620      	mov	r0, r4
1a001fe2:	bd38      	pop	{r3, r4, r5, pc}
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
1a001fe4:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
1a001fe6:	4770      	bx	lr
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
1a001fe8:	2000      	movs	r0, #0
1a001fea:	bd38      	pop	{r3, r4, r5, pc}
1a001fec:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
1a001fee:	bd38      	pop	{r3, r4, r5, pc}
1a001ff0:	10003e3c 	.word	0x10003e3c
1a001ff4:	10003da4 	.word	0x10003da4
1a001ff8:	10003ea0 	.word	0x10003ea0

1a001ffc <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a001ffc:	4b06      	ldr	r3, [pc, #24]	; (1a002018 <prvGetNextExpireTime+0x1c>)
1a001ffe:	681a      	ldr	r2, [r3, #0]
1a002000:	6813      	ldr	r3, [r2, #0]
1a002002:	fab3 f383 	clz	r3, r3
1a002006:	095b      	lsrs	r3, r3, #5
1a002008:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a00200a:	b913      	cbnz	r3, 1a002012 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00200c:	68d3      	ldr	r3, [r2, #12]
1a00200e:	6818      	ldr	r0, [r3, #0]
1a002010:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a002012:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a002014:	4770      	bx	lr
1a002016:	bf00      	nop
1a002018:	10003ea8 	.word	0x10003ea8

1a00201c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a00201c:	b510      	push	{r4, lr}
1a00201e:	4604      	mov	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a002020:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002022:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
1a002024:	4291      	cmp	r1, r2
1a002026:	d80a      	bhi.n	1a00203e <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002028:	1ad2      	subs	r2, r2, r3
1a00202a:	6983      	ldr	r3, [r0, #24]
1a00202c:	429a      	cmp	r2, r3
1a00202e:	d211      	bcs.n	1a002054 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a002030:	4b0a      	ldr	r3, [pc, #40]	; (1a00205c <prvInsertTimerInActiveList+0x40>)
1a002032:	6818      	ldr	r0, [r3, #0]
1a002034:	1d21      	adds	r1, r4, #4
1a002036:	f7ff fa41 	bl	1a0014bc <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
1a00203a:	2000      	movs	r0, #0
1a00203c:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a00203e:	429a      	cmp	r2, r3
1a002040:	d201      	bcs.n	1a002046 <prvInsertTimerInActiveList+0x2a>
1a002042:	4299      	cmp	r1, r3
1a002044:	d208      	bcs.n	1a002058 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002046:	4b06      	ldr	r3, [pc, #24]	; (1a002060 <prvInsertTimerInActiveList+0x44>)
1a002048:	6818      	ldr	r0, [r3, #0]
1a00204a:	1d21      	adds	r1, r4, #4
1a00204c:	f7ff fa36 	bl	1a0014bc <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
1a002050:	2000      	movs	r0, #0
1a002052:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a002054:	2001      	movs	r0, #1
1a002056:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
1a002058:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
1a00205a:	bd10      	pop	{r4, pc}
1a00205c:	10003fcc 	.word	0x10003fcc
1a002060:	10003ea8 	.word	0x10003ea8

1a002064 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a002064:	b530      	push	{r4, r5, lr}
1a002066:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a002068:	f000 fa8a 	bl	1a002580 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a00206c:	4b10      	ldr	r3, [pc, #64]	; (1a0020b0 <prvCheckForValidListAndQueue+0x4c>)
1a00206e:	681b      	ldr	r3, [r3, #0]
1a002070:	b9cb      	cbnz	r3, 1a0020a6 <prvCheckForValidListAndQueue+0x42>
		{
			vListInitialise( &xActiveTimerList1 );
1a002072:	4d10      	ldr	r5, [pc, #64]	; (1a0020b4 <prvCheckForValidListAndQueue+0x50>)
1a002074:	4628      	mov	r0, r5
1a002076:	f7ff fa05 	bl	1a001484 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a00207a:	4c0f      	ldr	r4, [pc, #60]	; (1a0020b8 <prvCheckForValidListAndQueue+0x54>)
1a00207c:	4620      	mov	r0, r4
1a00207e:	f7ff fa01 	bl	1a001484 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a002082:	4b0e      	ldr	r3, [pc, #56]	; (1a0020bc <prvCheckForValidListAndQueue+0x58>)
1a002084:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a002086:	4b0e      	ldr	r3, [pc, #56]	; (1a0020c0 <prvCheckForValidListAndQueue+0x5c>)
1a002088:	601c      	str	r4, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a00208a:	2300      	movs	r3, #0
1a00208c:	9300      	str	r3, [sp, #0]
1a00208e:	200a      	movs	r0, #10
1a002090:	2110      	movs	r1, #16
1a002092:	4a0c      	ldr	r2, [pc, #48]	; (1a0020c4 <prvCheckForValidListAndQueue+0x60>)
1a002094:	4b0c      	ldr	r3, [pc, #48]	; (1a0020c8 <prvCheckForValidListAndQueue+0x64>)
1a002096:	f7fe ff57 	bl	1a000f48 <xQueueGenericCreateStatic>
1a00209a:	4b05      	ldr	r3, [pc, #20]	; (1a0020b0 <prvCheckForValidListAndQueue+0x4c>)
1a00209c:	6018      	str	r0, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
1a00209e:	b110      	cbz	r0, 1a0020a6 <prvCheckForValidListAndQueue+0x42>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a0020a0:	490a      	ldr	r1, [pc, #40]	; (1a0020cc <prvCheckForValidListAndQueue+0x68>)
1a0020a2:	f7ff f9b5 	bl	1a001410 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a0020a6:	f000 fa8d 	bl	1a0025c4 <vPortExitCritical>
}
1a0020aa:	b003      	add	sp, #12
1a0020ac:	bd30      	pop	{r4, r5, pc}
1a0020ae:	bf00      	nop
1a0020b0:	10003fc8 	.word	0x10003fc8
1a0020b4:	10003eac 	.word	0x10003eac
1a0020b8:	10003ec0 	.word	0x10003ec0
1a0020bc:	10003ea8 	.word	0x10003ea8
1a0020c0:	10003fcc 	.word	0x10003fcc
1a0020c4:	10003ed4 	.word	0x10003ed4
1a0020c8:	10003f74 	.word	0x10003f74
1a0020cc:	1a003f44 	.word	0x1a003f44

1a0020d0 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
1a0020d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0020d4:	9c07      	ldr	r4, [sp, #28]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a0020d6:	b941      	cbnz	r1, 1a0020ea <prvInitialiseNewTimer+0x1a>
1a0020d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020dc:	f383 8811 	msr	BASEPRI, r3
1a0020e0:	f3bf 8f6f 	isb	sy
1a0020e4:	f3bf 8f4f 	dsb	sy
1a0020e8:	e7fe      	b.n	1a0020e8 <prvInitialiseNewTimer+0x18>
1a0020ea:	460f      	mov	r7, r1

	if( pxNewTimer != NULL )
1a0020ec:	b174      	cbz	r4, 1a00210c <prvInitialiseNewTimer+0x3c>
1a0020ee:	461d      	mov	r5, r3
1a0020f0:	4616      	mov	r6, r2
1a0020f2:	4680      	mov	r8, r0
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
1a0020f4:	f7ff ffb6 	bl	1a002064 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
1a0020f8:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a0020fc:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a0020fe:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a002100:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a002102:	9b06      	ldr	r3, [sp, #24]
1a002104:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a002106:	1d20      	adds	r0, r4, #4
1a002108:	f7ff f9c8 	bl	1a00149c <vListInitialiseItem>
1a00210c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a002110 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
1a002110:	b510      	push	{r4, lr}
1a002112:	b088      	sub	sp, #32

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
1a002114:	f7ff ffa6 	bl	1a002064 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
1a002118:	4b15      	ldr	r3, [pc, #84]	; (1a002170 <xTimerCreateTimerTask+0x60>)
1a00211a:	681b      	ldr	r3, [r3, #0]
1a00211c:	b1d3      	cbz	r3, 1a002154 <xTimerCreateTimerTask+0x44>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a00211e:	2400      	movs	r4, #0
1a002120:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a002122:	9406      	str	r4, [sp, #24]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a002124:	a805      	add	r0, sp, #20
1a002126:	a906      	add	r1, sp, #24
1a002128:	aa07      	add	r2, sp, #28
1a00212a:	f7ff fa01 	bl	1a001530 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a00212e:	2304      	movs	r3, #4
1a002130:	9300      	str	r3, [sp, #0]
1a002132:	9b06      	ldr	r3, [sp, #24]
1a002134:	9301      	str	r3, [sp, #4]
1a002136:	9b05      	ldr	r3, [sp, #20]
1a002138:	9302      	str	r3, [sp, #8]
1a00213a:	480e      	ldr	r0, [pc, #56]	; (1a002174 <xTimerCreateTimerTask+0x64>)
1a00213c:	490e      	ldr	r1, [pc, #56]	; (1a002178 <xTimerCreateTimerTask+0x68>)
1a00213e:	9a07      	ldr	r2, [sp, #28]
1a002140:	4623      	mov	r3, r4
1a002142:	f7ff fb8f 	bl	1a001864 <xTaskCreateStatic>
1a002146:	4b0d      	ldr	r3, [pc, #52]	; (1a00217c <xTimerCreateTimerTask+0x6c>)
1a002148:	6018      	str	r0, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
1a00214a:	b908      	cbnz	r0, 1a002150 <xTimerCreateTimerTask+0x40>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
1a00214c:	4620      	mov	r0, r4
1a00214e:	e002      	b.n	1a002156 <xTimerCreateTimerTask+0x46>
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
			{
				xReturn = pdPASS;
1a002150:	2001      	movs	r0, #1
1a002152:	e000      	b.n	1a002156 <xTimerCreateTimerTask+0x46>
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
1a002154:	2000      	movs	r0, #0
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
1a002156:	b940      	cbnz	r0, 1a00216a <xTimerCreateTimerTask+0x5a>
1a002158:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00215c:	f383 8811 	msr	BASEPRI, r3
1a002160:	f3bf 8f6f 	isb	sy
1a002164:	f3bf 8f4f 	dsb	sy
1a002168:	e7fe      	b.n	1a002168 <xTimerCreateTimerTask+0x58>
	return xReturn;
}
1a00216a:	b008      	add	sp, #32
1a00216c:	bd10      	pop	{r4, pc}
1a00216e:	bf00      	nop
1a002170:	10003fc8 	.word	0x10003fc8
1a002174:	1a002485 	.word	0x1a002485
1a002178:	1a003f4c 	.word	0x1a003f4c
1a00217c:	10003fd0 	.word	0x10003fd0

1a002180 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
1a002180:	b530      	push	{r4, r5, lr}
1a002182:	b085      	sub	sp, #20
1a002184:	9c09      	ldr	r4, [sp, #36]	; 0x24
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
1a002186:	2530      	movs	r5, #48	; 0x30
1a002188:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a00218a:	9d03      	ldr	r5, [sp, #12]
1a00218c:	2d30      	cmp	r5, #48	; 0x30
1a00218e:	d008      	beq.n	1a0021a2 <xTimerCreateStatic+0x22>
1a002190:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002194:	f383 8811 	msr	BASEPRI, r3
1a002198:	f3bf 8f6f 	isb	sy
1a00219c:	f3bf 8f4f 	dsb	sy
1a0021a0:	e7fe      	b.n	1a0021a0 <xTimerCreateStatic+0x20>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
1a0021a2:	b944      	cbnz	r4, 1a0021b6 <xTimerCreateStatic+0x36>
1a0021a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021a8:	f383 8811 	msr	BASEPRI, r3
1a0021ac:	f3bf 8f6f 	isb	sy
1a0021b0:	f3bf 8f4f 	dsb	sy
1a0021b4:	e7fe      	b.n	1a0021b4 <xTimerCreateStatic+0x34>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */

		if( pxNewTimer != NULL )
1a0021b6:	b13c      	cbz	r4, 1a0021c8 <xTimerCreateStatic+0x48>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a0021b8:	9d08      	ldr	r5, [sp, #32]
1a0021ba:	9500      	str	r5, [sp, #0]
1a0021bc:	9401      	str	r4, [sp, #4]
1a0021be:	f7ff ff87 	bl	1a0020d0 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a0021c2:	2301      	movs	r3, #1
1a0021c4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
	}
1a0021c8:	4620      	mov	r0, r4
1a0021ca:	b005      	add	sp, #20
1a0021cc:	bd30      	pop	{r4, r5, pc}
1a0021ce:	bf00      	nop

1a0021d0 <xTimerGenericCommand>:
BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
1a0021d0:	b940      	cbnz	r0, 1a0021e4 <xTimerGenericCommand+0x14>
1a0021d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021d6:	f383 8811 	msr	BASEPRI, r3
1a0021da:	f3bf 8f6f 	isb	sy
1a0021de:	f3bf 8f4f 	dsb	sy
1a0021e2:	e7fe      	b.n	1a0021e2 <xTimerGenericCommand+0x12>
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
1a0021e4:	b530      	push	{r4, r5, lr}
1a0021e6:	b085      	sub	sp, #20
1a0021e8:	4615      	mov	r5, r2
1a0021ea:	4604      	mov	r4, r0

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
1a0021ec:	4a12      	ldr	r2, [pc, #72]	; (1a002238 <xTimerGenericCommand+0x68>)
1a0021ee:	6810      	ldr	r0, [r2, #0]
1a0021f0:	b1f0      	cbz	r0, 1a002230 <xTimerGenericCommand+0x60>
1a0021f2:	461a      	mov	r2, r3
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
1a0021f4:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a0021f6:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a0021f8:	9402      	str	r4, [sp, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a0021fa:	2905      	cmp	r1, #5
1a0021fc:	dc13      	bgt.n	1a002226 <xTimerGenericCommand+0x56>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a0021fe:	f7ff fe93 	bl	1a001f28 <xTaskGetSchedulerState>
1a002202:	2802      	cmp	r0, #2
1a002204:	d107      	bne.n	1a002216 <xTimerGenericCommand+0x46>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a002206:	4b0c      	ldr	r3, [pc, #48]	; (1a002238 <xTimerGenericCommand+0x68>)
1a002208:	6818      	ldr	r0, [r3, #0]
1a00220a:	4669      	mov	r1, sp
1a00220c:	9a08      	ldr	r2, [sp, #32]
1a00220e:	2300      	movs	r3, #0
1a002210:	f7fe ff18 	bl	1a001044 <xQueueGenericSend>
1a002214:	e00d      	b.n	1a002232 <xTimerGenericCommand+0x62>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a002216:	4b08      	ldr	r3, [pc, #32]	; (1a002238 <xTimerGenericCommand+0x68>)
1a002218:	6818      	ldr	r0, [r3, #0]
1a00221a:	4669      	mov	r1, sp
1a00221c:	2200      	movs	r2, #0
1a00221e:	4613      	mov	r3, r2
1a002220:	f7fe ff10 	bl	1a001044 <xQueueGenericSend>
1a002224:	e005      	b.n	1a002232 <xTimerGenericCommand+0x62>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a002226:	4669      	mov	r1, sp
1a002228:	2300      	movs	r3, #0
1a00222a:	f7fe ffd3 	bl	1a0011d4 <xQueueGenericSendFromISR>
1a00222e:	e000      	b.n	1a002232 <xTimerGenericCommand+0x62>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
1a002230:	2000      	movs	r0, #0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
1a002232:	b005      	add	sp, #20
1a002234:	bd30      	pop	{r4, r5, pc}
1a002236:	bf00      	nop
1a002238:	10003fc8 	.word	0x10003fc8

1a00223c <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
1a00223c:	b570      	push	{r4, r5, r6, lr}
1a00223e:	b082      	sub	sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002240:	e029      	b.n	1a002296 <prvSwitchTimerLists+0x5a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002242:	68db      	ldr	r3, [r3, #12]
1a002244:	681e      	ldr	r6, [r3, #0]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002246:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002248:	1d25      	adds	r5, r4, #4
1a00224a:	4628      	mov	r0, r5
1a00224c:	f7ff f950 	bl	1a0014f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002250:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002252:	4620      	mov	r0, r4
1a002254:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002256:	69e3      	ldr	r3, [r4, #28]
1a002258:	2b01      	cmp	r3, #1
1a00225a:	d11c      	bne.n	1a002296 <prvSwitchTimerLists+0x5a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a00225c:	69a3      	ldr	r3, [r4, #24]
1a00225e:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a002260:	42b3      	cmp	r3, r6
1a002262:	d907      	bls.n	1a002274 <prvSwitchTimerLists+0x38>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002264:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002266:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002268:	4b11      	ldr	r3, [pc, #68]	; (1a0022b0 <prvSwitchTimerLists+0x74>)
1a00226a:	6818      	ldr	r0, [r3, #0]
1a00226c:	4629      	mov	r1, r5
1a00226e:	f7ff f925 	bl	1a0014bc <vListInsert>
1a002272:	e010      	b.n	1a002296 <prvSwitchTimerLists+0x5a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002274:	2300      	movs	r3, #0
1a002276:	9300      	str	r3, [sp, #0]
1a002278:	4620      	mov	r0, r4
1a00227a:	4619      	mov	r1, r3
1a00227c:	4632      	mov	r2, r6
1a00227e:	f7ff ffa7 	bl	1a0021d0 <xTimerGenericCommand>
				configASSERT( xResult );
1a002282:	b940      	cbnz	r0, 1a002296 <prvSwitchTimerLists+0x5a>
1a002284:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002288:	f383 8811 	msr	BASEPRI, r3
1a00228c:	f3bf 8f6f 	isb	sy
1a002290:	f3bf 8f4f 	dsb	sy
1a002294:	e7fe      	b.n	1a002294 <prvSwitchTimerLists+0x58>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002296:	4b06      	ldr	r3, [pc, #24]	; (1a0022b0 <prvSwitchTimerLists+0x74>)
1a002298:	681b      	ldr	r3, [r3, #0]
1a00229a:	681a      	ldr	r2, [r3, #0]
1a00229c:	2a00      	cmp	r2, #0
1a00229e:	d1d0      	bne.n	1a002242 <prvSwitchTimerLists+0x6>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
1a0022a0:	4a04      	ldr	r2, [pc, #16]	; (1a0022b4 <prvSwitchTimerLists+0x78>)
1a0022a2:	6810      	ldr	r0, [r2, #0]
1a0022a4:	4902      	ldr	r1, [pc, #8]	; (1a0022b0 <prvSwitchTimerLists+0x74>)
1a0022a6:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a0022a8:	6013      	str	r3, [r2, #0]
}
1a0022aa:	b002      	add	sp, #8
1a0022ac:	bd70      	pop	{r4, r5, r6, pc}
1a0022ae:	bf00      	nop
1a0022b0:	10003ea8 	.word	0x10003ea8
1a0022b4:	10003fcc 	.word	0x10003fcc

1a0022b8 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
1a0022b8:	b538      	push	{r3, r4, r5, lr}
1a0022ba:	4605      	mov	r5, r0
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
1a0022bc:	f7ff fb9c 	bl	1a0019f8 <xTaskGetTickCount>
1a0022c0:	4604      	mov	r4, r0

	if( xTimeNow < xLastTime )
1a0022c2:	4b07      	ldr	r3, [pc, #28]	; (1a0022e0 <prvSampleTimeNow+0x28>)
1a0022c4:	681b      	ldr	r3, [r3, #0]
1a0022c6:	4298      	cmp	r0, r3
1a0022c8:	d204      	bcs.n	1a0022d4 <prvSampleTimeNow+0x1c>
	{
		prvSwitchTimerLists();
1a0022ca:	f7ff ffb7 	bl	1a00223c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a0022ce:	2301      	movs	r3, #1
1a0022d0:	602b      	str	r3, [r5, #0]
1a0022d2:	e001      	b.n	1a0022d8 <prvSampleTimeNow+0x20>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
1a0022d4:	2300      	movs	r3, #0
1a0022d6:	602b      	str	r3, [r5, #0]
	}

	xLastTime = xTimeNow;
1a0022d8:	4b01      	ldr	r3, [pc, #4]	; (1a0022e0 <prvSampleTimeNow+0x28>)
1a0022da:	601c      	str	r4, [r3, #0]

	return xTimeNow;
}
1a0022dc:	4620      	mov	r0, r4
1a0022de:	bd38      	pop	{r3, r4, r5, pc}
1a0022e0:	10003fc4 	.word	0x10003fc4

1a0022e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
1a0022e4:	b570      	push	{r4, r5, r6, lr}
1a0022e6:	b082      	sub	sp, #8
1a0022e8:	4605      	mov	r5, r0
1a0022ea:	460e      	mov	r6, r1
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0022ec:	4b13      	ldr	r3, [pc, #76]	; (1a00233c <prvProcessExpiredTimer+0x58>)
1a0022ee:	681b      	ldr	r3, [r3, #0]
1a0022f0:	68db      	ldr	r3, [r3, #12]
1a0022f2:	68dc      	ldr	r4, [r3, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0022f4:	1d20      	adds	r0, r4, #4
1a0022f6:	f7ff f8fb 	bl	1a0014f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0022fa:	69e3      	ldr	r3, [r4, #28]
1a0022fc:	2b01      	cmp	r3, #1
1a0022fe:	d118      	bne.n	1a002332 <prvProcessExpiredTimer+0x4e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a002300:	69a1      	ldr	r1, [r4, #24]
1a002302:	4620      	mov	r0, r4
1a002304:	4429      	add	r1, r5
1a002306:	4632      	mov	r2, r6
1a002308:	462b      	mov	r3, r5
1a00230a:	f7ff fe87 	bl	1a00201c <prvInsertTimerInActiveList>
1a00230e:	b180      	cbz	r0, 1a002332 <prvProcessExpiredTimer+0x4e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002310:	2300      	movs	r3, #0
1a002312:	9300      	str	r3, [sp, #0]
1a002314:	4620      	mov	r0, r4
1a002316:	4619      	mov	r1, r3
1a002318:	462a      	mov	r2, r5
1a00231a:	f7ff ff59 	bl	1a0021d0 <xTimerGenericCommand>
			configASSERT( xResult );
1a00231e:	b940      	cbnz	r0, 1a002332 <prvProcessExpiredTimer+0x4e>
1a002320:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002324:	f383 8811 	msr	BASEPRI, r3
1a002328:	f3bf 8f6f 	isb	sy
1a00232c:	f3bf 8f4f 	dsb	sy
1a002330:	e7fe      	b.n	1a002330 <prvProcessExpiredTimer+0x4c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002332:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002334:	4620      	mov	r0, r4
1a002336:	4798      	blx	r3
}
1a002338:	b002      	add	sp, #8
1a00233a:	bd70      	pop	{r4, r5, r6, pc}
1a00233c:	10003ea8 	.word	0x10003ea8

1a002340 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
1a002340:	b570      	push	{r4, r5, r6, lr}
1a002342:	b082      	sub	sp, #8
1a002344:	4606      	mov	r6, r0
1a002346:	460c      	mov	r4, r1
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
1a002348:	f7ff fb4e 	bl	1a0019e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a00234c:	a801      	add	r0, sp, #4
1a00234e:	f7ff ffb3 	bl	1a0022b8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a002352:	9b01      	ldr	r3, [sp, #4]
1a002354:	bb1b      	cbnz	r3, 1a00239e <prvProcessTimerOrBlockTask+0x5e>
1a002356:	4605      	mov	r5, r0
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002358:	b944      	cbnz	r4, 1a00236c <prvProcessTimerOrBlockTask+0x2c>
1a00235a:	4286      	cmp	r6, r0
1a00235c:	d806      	bhi.n	1a00236c <prvProcessTimerOrBlockTask+0x2c>
			{
				( void ) xTaskResumeAll();
1a00235e:	f7ff fbe3 	bl	1a001b28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a002362:	4630      	mov	r0, r6
1a002364:	4629      	mov	r1, r5
1a002366:	f7ff ffbd 	bl	1a0022e4 <prvProcessExpiredTimer>
1a00236a:	e01a      	b.n	1a0023a2 <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
1a00236c:	b12c      	cbz	r4, 1a00237a <prvProcessTimerOrBlockTask+0x3a>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a00236e:	4b0e      	ldr	r3, [pc, #56]	; (1a0023a8 <prvProcessTimerOrBlockTask+0x68>)
1a002370:	681b      	ldr	r3, [r3, #0]
1a002372:	681c      	ldr	r4, [r3, #0]
1a002374:	fab4 f484 	clz	r4, r4
1a002378:	0964      	lsrs	r4, r4, #5
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a00237a:	4b0c      	ldr	r3, [pc, #48]	; (1a0023ac <prvProcessTimerOrBlockTask+0x6c>)
1a00237c:	6818      	ldr	r0, [r3, #0]
1a00237e:	1b71      	subs	r1, r6, r5
1a002380:	4622      	mov	r2, r4
1a002382:	f7ff f859 	bl	1a001438 <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
1a002386:	f7ff fbcf 	bl	1a001b28 <xTaskResumeAll>
1a00238a:	b950      	cbnz	r0, 1a0023a2 <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
1a00238c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002390:	4b07      	ldr	r3, [pc, #28]	; (1a0023b0 <prvProcessTimerOrBlockTask+0x70>)
1a002392:	601a      	str	r2, [r3, #0]
1a002394:	f3bf 8f4f 	dsb	sy
1a002398:	f3bf 8f6f 	isb	sy
1a00239c:	e001      	b.n	1a0023a2 <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
1a00239e:	f7ff fbc3 	bl	1a001b28 <xTaskResumeAll>
		}
	}
}
1a0023a2:	b002      	add	sp, #8
1a0023a4:	bd70      	pop	{r4, r5, r6, pc}
1a0023a6:	bf00      	nop
1a0023a8:	10003fcc 	.word	0x10003fcc
1a0023ac:	10003fc8 	.word	0x10003fc8
1a0023b0:	e000ed04 	.word	0xe000ed04

1a0023b4 <prvProcessReceivedCommands>:
	return xProcessTimerNow;
}
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
1a0023b4:	b530      	push	{r4, r5, lr}
1a0023b6:	b089      	sub	sp, #36	; 0x24
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a0023b8:	e057      	b.n	1a00246a <prvProcessReceivedCommands+0xb6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a0023ba:	9b04      	ldr	r3, [sp, #16]
1a0023bc:	2b00      	cmp	r3, #0
1a0023be:	da03      	bge.n	1a0023c8 <prvProcessReceivedCommands+0x14>
				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a0023c0:	9806      	ldr	r0, [sp, #24]
1a0023c2:	9907      	ldr	r1, [sp, #28]
1a0023c4:	9b05      	ldr	r3, [sp, #20]
1a0023c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a0023c8:	9b04      	ldr	r3, [sp, #16]
1a0023ca:	2b00      	cmp	r3, #0
1a0023cc:	db4d      	blt.n	1a00246a <prvProcessReceivedCommands+0xb6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a0023ce:	9c06      	ldr	r4, [sp, #24]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a0023d0:	6963      	ldr	r3, [r4, #20]
1a0023d2:	b113      	cbz	r3, 1a0023da <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0023d4:	1d20      	adds	r0, r4, #4
1a0023d6:	f7ff f88b 	bl	1a0014f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0023da:	a803      	add	r0, sp, #12
1a0023dc:	f7ff ff6c 	bl	1a0022b8 <prvSampleTimeNow>
1a0023e0:	4603      	mov	r3, r0

			switch( xMessage.xMessageID )
1a0023e2:	9a04      	ldr	r2, [sp, #16]
1a0023e4:	2a09      	cmp	r2, #9
1a0023e6:	d840      	bhi.n	1a00246a <prvProcessReceivedCommands+0xb6>
1a0023e8:	e8df f002 	tbb	[pc, r2]
1a0023ec:	3f050505 	.word	0x3f050505
1a0023f0:	05053927 	.word	0x05053927
1a0023f4:	273f      	.short	0x273f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0023f6:	9d05      	ldr	r5, [sp, #20]
1a0023f8:	69a1      	ldr	r1, [r4, #24]
1a0023fa:	4620      	mov	r0, r4
1a0023fc:	4429      	add	r1, r5
1a0023fe:	461a      	mov	r2, r3
1a002400:	462b      	mov	r3, r5
1a002402:	f7ff fe0b 	bl	1a00201c <prvInsertTimerInActiveList>
1a002406:	b380      	cbz	r0, 1a00246a <prvProcessReceivedCommands+0xb6>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002408:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00240a:	4620      	mov	r0, r4
1a00240c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00240e:	69e3      	ldr	r3, [r4, #28]
1a002410:	2b01      	cmp	r3, #1
1a002412:	d12a      	bne.n	1a00246a <prvProcessReceivedCommands+0xb6>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002414:	69a2      	ldr	r2, [r4, #24]
1a002416:	2300      	movs	r3, #0
1a002418:	9300      	str	r3, [sp, #0]
1a00241a:	4620      	mov	r0, r4
1a00241c:	4619      	mov	r1, r3
1a00241e:	9c05      	ldr	r4, [sp, #20]
1a002420:	4422      	add	r2, r4
1a002422:	f7ff fed5 	bl	1a0021d0 <xTimerGenericCommand>
							configASSERT( xResult );
1a002426:	bb00      	cbnz	r0, 1a00246a <prvProcessReceivedCommands+0xb6>
1a002428:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00242c:	f383 8811 	msr	BASEPRI, r3
1a002430:	f3bf 8f6f 	isb	sy
1a002434:	f3bf 8f4f 	dsb	sy
1a002438:	e7fe      	b.n	1a002438 <prvProcessReceivedCommands+0x84>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a00243a:	9905      	ldr	r1, [sp, #20]
1a00243c:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a00243e:	b941      	cbnz	r1, 1a002452 <prvProcessReceivedCommands+0x9e>
1a002440:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002444:	f383 8811 	msr	BASEPRI, r3
1a002448:	f3bf 8f6f 	isb	sy
1a00244c:	f3bf 8f4f 	dsb	sy
1a002450:	e7fe      	b.n	1a002450 <prvProcessReceivedCommands+0x9c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a002452:	4620      	mov	r0, r4
1a002454:	4419      	add	r1, r3
1a002456:	461a      	mov	r2, r3
1a002458:	f7ff fde0 	bl	1a00201c <prvInsertTimerInActiveList>
					break;
1a00245c:	e005      	b.n	1a00246a <prvProcessReceivedCommands+0xb6>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a00245e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002462:	b913      	cbnz	r3, 1a00246a <prvProcessReceivedCommands+0xb6>
						{
							vPortFree( pxTimer );
1a002464:	4620      	mov	r0, r4
1a002466:	f7fe fc6f 	bl	1a000d48 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00246a:	4b05      	ldr	r3, [pc, #20]	; (1a002480 <prvProcessReceivedCommands+0xcc>)
1a00246c:	6818      	ldr	r0, [r3, #0]
1a00246e:	a904      	add	r1, sp, #16
1a002470:	2200      	movs	r2, #0
1a002472:	f7fe ff21 	bl	1a0012b8 <xQueueReceive>
1a002476:	2800      	cmp	r0, #0
1a002478:	d19f      	bne.n	1a0023ba <prvProcessReceivedCommands+0x6>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
1a00247a:	b009      	add	sp, #36	; 0x24
1a00247c:	bd30      	pop	{r4, r5, pc}
1a00247e:	bf00      	nop
1a002480:	10003fc8 	.word	0x10003fc8

1a002484 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
1a002484:	b500      	push	{lr}
1a002486:	b083      	sub	sp, #12

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a002488:	a801      	add	r0, sp, #4
1a00248a:	f7ff fdb7 	bl	1a001ffc <prvGetNextExpireTime>

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a00248e:	9901      	ldr	r1, [sp, #4]
1a002490:	f7ff ff56 	bl	1a002340 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
1a002494:	f7ff ff8e 	bl	1a0023b4 <prvProcessReceivedCommands>
	}
1a002498:	e7f6      	b.n	1a002488 <prvTimerTask+0x4>
1a00249a:	bf00      	nop

1a00249c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a00249c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a00249e:	2300      	movs	r3, #0
1a0024a0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a0024a2:	4b0d      	ldr	r3, [pc, #52]	; (1a0024d8 <prvTaskExitError+0x3c>)
1a0024a4:	681b      	ldr	r3, [r3, #0]
1a0024a6:	f1b3 3fff 	cmp.w	r3, #4294967295
1a0024aa:	d008      	beq.n	1a0024be <prvTaskExitError+0x22>
1a0024ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024b0:	f383 8811 	msr	BASEPRI, r3
1a0024b4:	f3bf 8f6f 	isb	sy
1a0024b8:	f3bf 8f4f 	dsb	sy
1a0024bc:	e7fe      	b.n	1a0024bc <prvTaskExitError+0x20>
1a0024be:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0024c2:	f383 8811 	msr	BASEPRI, r3
1a0024c6:	f3bf 8f6f 	isb	sy
1a0024ca:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a0024ce:	9b01      	ldr	r3, [sp, #4]
1a0024d0:	2b00      	cmp	r3, #0
1a0024d2:	d0fc      	beq.n	1a0024ce <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a0024d4:	b002      	add	sp, #8
1a0024d6:	4770      	bx	lr
1a0024d8:	10000110 	.word	0x10000110

1a0024dc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a0024dc:	4808      	ldr	r0, [pc, #32]	; (1a002500 <prvPortStartFirstTask+0x24>)
1a0024de:	6800      	ldr	r0, [r0, #0]
1a0024e0:	6800      	ldr	r0, [r0, #0]
1a0024e2:	f380 8808 	msr	MSP, r0
1a0024e6:	f04f 0000 	mov.w	r0, #0
1a0024ea:	f380 8814 	msr	CONTROL, r0
1a0024ee:	b662      	cpsie	i
1a0024f0:	b661      	cpsie	f
1a0024f2:	f3bf 8f4f 	dsb	sy
1a0024f6:	f3bf 8f6f 	isb	sy
1a0024fa:	df00      	svc	0
1a0024fc:	bf00      	nop
1a0024fe:	0000      	.short	0x0000
1a002500:	e000ed08 	.word	0xe000ed08

1a002504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a002504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002514 <vPortEnableVFP+0x10>
1a002508:	6801      	ldr	r1, [r0, #0]
1a00250a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a00250e:	6001      	str	r1, [r0, #0]
1a002510:	4770      	bx	lr
1a002512:	0000      	.short	0x0000
1a002514:	e000ed88 	.word	0xe000ed88

1a002518 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a002518:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a00251c:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002520:	f021 0101 	bic.w	r1, r1, #1
1a002524:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a002528:	4b05      	ldr	r3, [pc, #20]	; (1a002540 <pxPortInitialiseStack+0x28>)
1a00252a:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a00252e:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002532:	f06f 0302 	mvn.w	r3, #2
1a002536:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
1a00253a:	3844      	subs	r0, #68	; 0x44
1a00253c:	4770      	bx	lr
1a00253e:	bf00      	nop
1a002540:	1a00249d 	.word	0x1a00249d
	...

1a002550 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
1a002550:	4b07      	ldr	r3, [pc, #28]	; (1a002570 <pxCurrentTCBConst2>)
1a002552:	6819      	ldr	r1, [r3, #0]
1a002554:	6808      	ldr	r0, [r1, #0]
1a002556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00255a:	f380 8809 	msr	PSP, r0
1a00255e:	f3bf 8f6f 	isb	sy
1a002562:	f04f 0000 	mov.w	r0, #0
1a002566:	f380 8811 	msr	BASEPRI, r0
1a00256a:	4770      	bx	lr
1a00256c:	f3af 8000 	nop.w

1a002570 <pxCurrentTCBConst2>:
1a002570:	10003e3c 	.word	0x10003e3c
1a002574:	f3af 8000 	nop.w
1a002578:	f3af 8000 	nop.w
1a00257c:	f3af 8000 	nop.w

1a002580 <vPortEnterCritical>:
1a002580:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002584:	f383 8811 	msr	BASEPRI, r3
1a002588:	f3bf 8f6f 	isb	sy
1a00258c:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
1a002590:	4a0a      	ldr	r2, [pc, #40]	; (1a0025bc <vPortEnterCritical+0x3c>)
1a002592:	6813      	ldr	r3, [r2, #0]
1a002594:	3301      	adds	r3, #1
1a002596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
1a002598:	2b01      	cmp	r3, #1
1a00259a:	d10d      	bne.n	1a0025b8 <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a00259c:	4b08      	ldr	r3, [pc, #32]	; (1a0025c0 <vPortEnterCritical+0x40>)
1a00259e:	681b      	ldr	r3, [r3, #0]
1a0025a0:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0025a4:	d008      	beq.n	1a0025b8 <vPortEnterCritical+0x38>
1a0025a6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025aa:	f383 8811 	msr	BASEPRI, r3
1a0025ae:	f3bf 8f6f 	isb	sy
1a0025b2:	f3bf 8f4f 	dsb	sy
1a0025b6:	e7fe      	b.n	1a0025b6 <vPortEnterCritical+0x36>
1a0025b8:	4770      	bx	lr
1a0025ba:	bf00      	nop
1a0025bc:	10000110 	.word	0x10000110
1a0025c0:	e000ed04 	.word	0xe000ed04

1a0025c4 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
1a0025c4:	4b09      	ldr	r3, [pc, #36]	; (1a0025ec <vPortExitCritical+0x28>)
1a0025c6:	681b      	ldr	r3, [r3, #0]
1a0025c8:	b943      	cbnz	r3, 1a0025dc <vPortExitCritical+0x18>
1a0025ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025ce:	f383 8811 	msr	BASEPRI, r3
1a0025d2:	f3bf 8f6f 	isb	sy
1a0025d6:	f3bf 8f4f 	dsb	sy
1a0025da:	e7fe      	b.n	1a0025da <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a0025dc:	3b01      	subs	r3, #1
1a0025de:	4a03      	ldr	r2, [pc, #12]	; (1a0025ec <vPortExitCritical+0x28>)
1a0025e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a0025e2:	b90b      	cbnz	r3, 1a0025e8 <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a0025e4:	f383 8811 	msr	BASEPRI, r3
1a0025e8:	4770      	bx	lr
1a0025ea:	bf00      	nop
1a0025ec:	10000110 	.word	0x10000110

1a0025f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
1a0025f0:	f3ef 8009 	mrs	r0, PSP
1a0025f4:	f3bf 8f6f 	isb	sy
1a0025f8:	4b15      	ldr	r3, [pc, #84]	; (1a002650 <pxCurrentTCBConst>)
1a0025fa:	681a      	ldr	r2, [r3, #0]
1a0025fc:	f01e 0f10 	tst.w	lr, #16
1a002600:	bf08      	it	eq
1a002602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00260a:	6010      	str	r0, [r2, #0]
1a00260c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002610:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002614:	f380 8811 	msr	BASEPRI, r0
1a002618:	f3bf 8f4f 	dsb	sy
1a00261c:	f3bf 8f6f 	isb	sy
1a002620:	f7ff fb54 	bl	1a001ccc <vTaskSwitchContext>
1a002624:	f04f 0000 	mov.w	r0, #0
1a002628:	f380 8811 	msr	BASEPRI, r0
1a00262c:	bc09      	pop	{r0, r3}
1a00262e:	6819      	ldr	r1, [r3, #0]
1a002630:	6808      	ldr	r0, [r1, #0]
1a002632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002636:	f01e 0f10 	tst.w	lr, #16
1a00263a:	bf08      	it	eq
1a00263c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002640:	f380 8809 	msr	PSP, r0
1a002644:	f3bf 8f6f 	isb	sy
1a002648:	4770      	bx	lr
1a00264a:	bf00      	nop
1a00264c:	f3af 8000 	nop.w

1a002650 <pxCurrentTCBConst>:
1a002650:	10003e3c 	.word	0x10003e3c
1a002654:	f3af 8000 	nop.w
1a002658:	f3af 8000 	nop.w
1a00265c:	f3af 8000 	nop.w

1a002660 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
1a002660:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a002662:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002666:	f383 8811 	msr	BASEPRI, r3
1a00266a:	f3bf 8f6f 	isb	sy
1a00266e:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
1a002672:	f7ff f9c7 	bl	1a001a04 <xTaskIncrementTick>
1a002676:	b118      	cbz	r0, 1a002680 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a002678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00267c:	4b02      	ldr	r3, [pc, #8]	; (1a002688 <SysTick_Handler+0x28>)
1a00267e:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a002680:	2300      	movs	r3, #0
1a002682:	f383 8811 	msr	BASEPRI, r3
1a002686:	bd08      	pop	{r3, pc}
1a002688:	e000ed04 	.word	0xe000ed04

1a00268c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a00268c:	4a08      	ldr	r2, [pc, #32]	; (1a0026b0 <vPortSetupTimerInterrupt+0x24>)
1a00268e:	2300      	movs	r3, #0
1a002690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002692:	4908      	ldr	r1, [pc, #32]	; (1a0026b4 <vPortSetupTimerInterrupt+0x28>)
1a002694:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a002696:	4b08      	ldr	r3, [pc, #32]	; (1a0026b8 <vPortSetupTimerInterrupt+0x2c>)
1a002698:	681b      	ldr	r3, [r3, #0]
1a00269a:	4908      	ldr	r1, [pc, #32]	; (1a0026bc <vPortSetupTimerInterrupt+0x30>)
1a00269c:	fba1 1303 	umull	r1, r3, r1, r3
1a0026a0:	099b      	lsrs	r3, r3, #6
1a0026a2:	3b01      	subs	r3, #1
1a0026a4:	4906      	ldr	r1, [pc, #24]	; (1a0026c0 <vPortSetupTimerInterrupt+0x34>)
1a0026a6:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a0026a8:	2307      	movs	r3, #7
1a0026aa:	6013      	str	r3, [r2, #0]
1a0026ac:	4770      	bx	lr
1a0026ae:	bf00      	nop
1a0026b0:	e000e010 	.word	0xe000e010
1a0026b4:	e000e018 	.word	0xe000e018
1a0026b8:	10004434 	.word	0x10004434
1a0026bc:	10624dd3 	.word	0x10624dd3
1a0026c0:	e000e014 	.word	0xe000e014

1a0026c4 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a0026c4:	4b40      	ldr	r3, [pc, #256]	; (1a0027c8 <xPortStartScheduler+0x104>)
1a0026c6:	681a      	ldr	r2, [r3, #0]
1a0026c8:	4b40      	ldr	r3, [pc, #256]	; (1a0027cc <xPortStartScheduler+0x108>)
1a0026ca:	429a      	cmp	r2, r3
1a0026cc:	d108      	bne.n	1a0026e0 <xPortStartScheduler+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0026ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0026d2:	f383 8811 	msr	BASEPRI, r3
1a0026d6:	f3bf 8f6f 	isb	sy
1a0026da:	f3bf 8f4f 	dsb	sy
1a0026de:	e7fe      	b.n	1a0026de <xPortStartScheduler+0x1a>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a0026e0:	4b39      	ldr	r3, [pc, #228]	; (1a0027c8 <xPortStartScheduler+0x104>)
1a0026e2:	681a      	ldr	r2, [r3, #0]
1a0026e4:	4b3a      	ldr	r3, [pc, #232]	; (1a0027d0 <xPortStartScheduler+0x10c>)
1a0026e6:	429a      	cmp	r2, r3
1a0026e8:	d108      	bne.n	1a0026fc <xPortStartScheduler+0x38>
1a0026ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0026ee:	f383 8811 	msr	BASEPRI, r3
1a0026f2:	f3bf 8f6f 	isb	sy
1a0026f6:	f3bf 8f4f 	dsb	sy
1a0026fa:	e7fe      	b.n	1a0026fa <xPortStartScheduler+0x36>

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
1a0026fc:	b510      	push	{r4, lr}
1a0026fe:	b082      	sub	sp, #8
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002700:	4b34      	ldr	r3, [pc, #208]	; (1a0027d4 <xPortStartScheduler+0x110>)
1a002702:	781a      	ldrb	r2, [r3, #0]
1a002704:	b2d2      	uxtb	r2, r2
1a002706:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002708:	22ff      	movs	r2, #255	; 0xff
1a00270a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a00270c:	781b      	ldrb	r3, [r3, #0]
1a00270e:	b2db      	uxtb	r3, r3
1a002710:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002714:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002718:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a00271c:	4a2e      	ldr	r2, [pc, #184]	; (1a0027d8 <xPortStartScheduler+0x114>)
1a00271e:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002720:	2207      	movs	r2, #7
1a002722:	4b2e      	ldr	r3, [pc, #184]	; (1a0027dc <xPortStartScheduler+0x118>)
1a002724:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002726:	e009      	b.n	1a00273c <xPortStartScheduler+0x78>
		{
			ulMaxPRIGROUPValue--;
1a002728:	4a2c      	ldr	r2, [pc, #176]	; (1a0027dc <xPortStartScheduler+0x118>)
1a00272a:	6813      	ldr	r3, [r2, #0]
1a00272c:	3b01      	subs	r3, #1
1a00272e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002730:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002734:	005b      	lsls	r3, r3, #1
1a002736:	b2db      	uxtb	r3, r3
1a002738:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a00273c:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002740:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002744:	d1f0      	bne.n	1a002728 <xPortStartScheduler+0x64>
		#ifdef __NVIC_PRIO_BITS
		{
			/* Check the CMSIS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a002746:	4b25      	ldr	r3, [pc, #148]	; (1a0027dc <xPortStartScheduler+0x118>)
1a002748:	681b      	ldr	r3, [r3, #0]
1a00274a:	f1c3 0207 	rsb	r2, r3, #7
1a00274e:	2a03      	cmp	r2, #3
1a002750:	d008      	beq.n	1a002764 <xPortStartScheduler+0xa0>
1a002752:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002756:	f383 8811 	msr	BASEPRI, r3
1a00275a:	f3bf 8f6f 	isb	sy
1a00275e:	f3bf 8f4f 	dsb	sy
1a002762:	e7fe      	b.n	1a002762 <xPortStartScheduler+0x9e>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
1a002764:	2a03      	cmp	r2, #3
1a002766:	d008      	beq.n	1a00277a <xPortStartScheduler+0xb6>
1a002768:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00276c:	f383 8811 	msr	BASEPRI, r3
1a002770:	f3bf 8f6f 	isb	sy
1a002774:	f3bf 8f4f 	dsb	sy
1a002778:	e7fe      	b.n	1a002778 <xPortStartScheduler+0xb4>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a00277a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a00277c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002780:	4a16      	ldr	r2, [pc, #88]	; (1a0027dc <xPortStartScheduler+0x118>)
1a002782:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a002784:	9b01      	ldr	r3, [sp, #4]
1a002786:	b2db      	uxtb	r3, r3
1a002788:	4a12      	ldr	r2, [pc, #72]	; (1a0027d4 <xPortStartScheduler+0x110>)
1a00278a:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a00278c:	4b14      	ldr	r3, [pc, #80]	; (1a0027e0 <xPortStartScheduler+0x11c>)
1a00278e:	681a      	ldr	r2, [r3, #0]
1a002790:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a002794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002796:	681a      	ldr	r2, [r3, #0]
1a002798:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a00279c:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
1a00279e:	f7ff ff75 	bl	1a00268c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
1a0027a2:	2400      	movs	r4, #0
1a0027a4:	4b0f      	ldr	r3, [pc, #60]	; (1a0027e4 <xPortStartScheduler+0x120>)
1a0027a6:	601c      	str	r4, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
1a0027a8:	f7ff feac 	bl	1a002504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a0027ac:	4a0e      	ldr	r2, [pc, #56]	; (1a0027e8 <xPortStartScheduler+0x124>)
1a0027ae:	6813      	ldr	r3, [r2, #0]
1a0027b0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a0027b4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
1a0027b6:	f7ff fe91 	bl	1a0024dc <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
1a0027ba:	f7ff fa87 	bl	1a001ccc <vTaskSwitchContext>
	prvTaskExitError();
1a0027be:	f7ff fe6d 	bl	1a00249c <prvTaskExitError>

	/* Should not get here! */
	return 0;
}
1a0027c2:	4620      	mov	r0, r4
1a0027c4:	b002      	add	sp, #8
1a0027c6:	bd10      	pop	{r4, pc}
1a0027c8:	e000ed00 	.word	0xe000ed00
1a0027cc:	410fc271 	.word	0x410fc271
1a0027d0:	410fc270 	.word	0x410fc270
1a0027d4:	e000e400 	.word	0xe000e400
1a0027d8:	10003fd4 	.word	0x10003fd4
1a0027dc:	10003fd8 	.word	0x10003fd8
1a0027e0:	e000ed20 	.word	0xe000ed20
1a0027e4:	10000110 	.word	0x10000110
1a0027e8:	e000ef34 	.word	0xe000ef34

1a0027ec <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a0027ec:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a0027f0:	2b0f      	cmp	r3, #15
1a0027f2:	d90f      	bls.n	1a002814 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a0027f4:	4a10      	ldr	r2, [pc, #64]	; (1a002838 <vPortValidateInterruptPriority+0x4c>)
1a0027f6:	5c9b      	ldrb	r3, [r3, r2]
1a0027f8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a0027fa:	4a10      	ldr	r2, [pc, #64]	; (1a00283c <vPortValidateInterruptPriority+0x50>)
1a0027fc:	7812      	ldrb	r2, [r2, #0]
1a0027fe:	4293      	cmp	r3, r2
1a002800:	d208      	bcs.n	1a002814 <vPortValidateInterruptPriority+0x28>
1a002802:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002806:	f383 8811 	msr	BASEPRI, r3
1a00280a:	f3bf 8f6f 	isb	sy
1a00280e:	f3bf 8f4f 	dsb	sy
1a002812:	e7fe      	b.n	1a002812 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002814:	4b0a      	ldr	r3, [pc, #40]	; (1a002840 <vPortValidateInterruptPriority+0x54>)
1a002816:	681b      	ldr	r3, [r3, #0]
1a002818:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a00281c:	4a09      	ldr	r2, [pc, #36]	; (1a002844 <vPortValidateInterruptPriority+0x58>)
1a00281e:	6812      	ldr	r2, [r2, #0]
1a002820:	4293      	cmp	r3, r2
1a002822:	d908      	bls.n	1a002836 <vPortValidateInterruptPriority+0x4a>
1a002824:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002828:	f383 8811 	msr	BASEPRI, r3
1a00282c:	f3bf 8f6f 	isb	sy
1a002830:	f3bf 8f4f 	dsb	sy
1a002834:	e7fe      	b.n	1a002834 <vPortValidateInterruptPriority+0x48>
1a002836:	4770      	bx	lr
1a002838:	e000e3f0 	.word	0xe000e3f0
1a00283c:	10003fd4 	.word	0x10003fd4
1a002840:	e000ed0c 	.word	0xe000ed0c
1a002844:	10003fd8 	.word	0x10003fd8

1a002848 <Board_Debug_Init>:
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
}


void Board_Debug_Init(void)
{
1a002848:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a00284a:	4c07      	ldr	r4, [pc, #28]	; (1a002868 <Board_Debug_Init+0x20>)
1a00284c:	4620      	mov	r0, r4
1a00284e:	f000 f87d 	bl	1a00294c <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002852:	4620      	mov	r0, r4
1a002854:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002858:	f000 f8c2 	bl	1a0029e0 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a00285c:	2303      	movs	r3, #3
1a00285e:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a002860:	2301      	movs	r3, #1
1a002862:	65e3      	str	r3, [r4, #92]	; 0x5c
1a002864:	bd10      	pop	{r4, pc}
1a002866:	bf00      	nop
1a002868:	400c1000 	.word	0x400c1000

1a00286c <__stdio_init>:

int __stdio_getchar() {
   return Board_UARTGetChar();;
}

void __stdio_init() {
1a00286c:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00286e:	f7ff ffeb 	bl	1a002848 <Board_Debug_Init>
1a002872:	bd08      	pop	{r3, pc}

1a002874 <Board_SetupMuxing>:
    #endif
};


void Board_SetupMuxing(void)
{
1a002874:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002876:	2300      	movs	r3, #0
1a002878:	e00c      	b.n	1a002894 <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00287a:	4a09      	ldr	r2, [pc, #36]	; (1a0028a0 <Board_SetupMuxing+0x2c>)
1a00287c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002880:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002884:	784a      	ldrb	r2, [r1, #1]
1a002886:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002888:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00288c:	4905      	ldr	r1, [pc, #20]	; (1a0028a4 <Board_SetupMuxing+0x30>)
1a00288e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002892:	3301      	adds	r3, #1
1a002894:	2b1c      	cmp	r3, #28
1a002896:	d9f0      	bls.n	1a00287a <Board_SetupMuxing+0x6>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002898:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00289c:	4770      	bx	lr
1a00289e:	bf00      	nop
1a0028a0:	1a003f60 	.word	0x1a003f60
1a0028a4:	40086000 	.word	0x40086000

1a0028a8 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0028a8:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0028aa:	4a17      	ldr	r2, [pc, #92]	; (1a002908 <Board_SetupClocking+0x60>)
1a0028ac:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0028b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0028b4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0028b8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0028bc:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0028c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0028c4:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0028c8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0028cc:	2006      	movs	r0, #6
1a0028ce:	490f      	ldr	r1, [pc, #60]	; (1a00290c <Board_SetupClocking+0x64>)
1a0028d0:	2201      	movs	r2, #1
1a0028d2:	f000 fb9f 	bl	1a003014 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0028d6:	2400      	movs	r4, #0
1a0028d8:	e00a      	b.n	1a0028f0 <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0028da:	4a0d      	ldr	r2, [pc, #52]	; (1a002910 <Board_SetupClocking+0x68>)
1a0028dc:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a0028e0:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a0028e4:	7859      	ldrb	r1, [r3, #1]
1a0028e6:	789a      	ldrb	r2, [r3, #2]
1a0028e8:	2301      	movs	r3, #1
1a0028ea:	f000 fb09 	bl	1a002f00 <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0028ee:	3401      	adds	r4, #1
1a0028f0:	2c00      	cmp	r4, #0
1a0028f2:	d0f2      	beq.n	1a0028da <Board_SetupClocking+0x32>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0028f4:	4b04      	ldr	r3, [pc, #16]	; (1a002908 <Board_SetupClocking+0x60>)
1a0028f6:	685a      	ldr	r2, [r3, #4]
1a0028f8:	f022 020c 	bic.w	r2, r2, #12
1a0028fc:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0028fe:	685a      	ldr	r2, [r3, #4]
1a002900:	f042 0203 	orr.w	r2, r2, #3
1a002904:	605a      	str	r2, [r3, #4]
1a002906:	bd10      	pop	{r4, pc}
1a002908:	40043000 	.word	0x40043000
1a00290c:	0c28cb00 	.word	0x0c28cb00
1a002910:	1a003f5c 	.word	0x1a003f5c

1a002914 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002914:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002916:	f7ff ffad 	bl	1a002874 <Board_SetupMuxing>
    Board_SetupClocking();
1a00291a:	f7ff ffc5 	bl	1a0028a8 <Board_SetupClocking>
1a00291e:	bd08      	pop	{r3, pc}

1a002920 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002920:	4b09      	ldr	r3, [pc, #36]	; (1a002948 <Chip_UART_GetIndex+0x28>)
1a002922:	4298      	cmp	r0, r3
1a002924:	d009      	beq.n	1a00293a <Chip_UART_GetIndex+0x1a>
1a002926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00292a:	4298      	cmp	r0, r3
1a00292c:	d007      	beq.n	1a00293e <Chip_UART_GetIndex+0x1e>
1a00292e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002932:	4298      	cmp	r0, r3
1a002934:	d005      	beq.n	1a002942 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002936:	2000      	movs	r0, #0
1a002938:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a00293a:	2002      	movs	r0, #2
1a00293c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00293e:	2003      	movs	r0, #3
1a002940:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a002942:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a002944:	4770      	bx	lr
1a002946:	bf00      	nop
1a002948:	400c1000 	.word	0x400c1000

1a00294c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00294c:	b510      	push	{r4, lr}
1a00294e:	b082      	sub	sp, #8
1a002950:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002952:	f7ff ffe5 	bl	1a002920 <Chip_UART_GetIndex>
1a002956:	4b10      	ldr	r3, [pc, #64]	; (1a002998 <Chip_UART_Init+0x4c>)
1a002958:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a00295c:	2101      	movs	r1, #1
1a00295e:	460a      	mov	r2, r1
1a002960:	460b      	mov	r3, r1
1a002962:	f000 fb07 	bl	1a002f74 <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a002966:	2307      	movs	r3, #7
1a002968:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a00296a:	2300      	movs	r3, #0
1a00296c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00296e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002970:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002972:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002974:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002976:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002978:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00297a:	4b08      	ldr	r3, [pc, #32]	; (1a00299c <Chip_UART_Init+0x50>)
1a00297c:	429c      	cmp	r4, r3
1a00297e:	d103      	bne.n	1a002988 <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a002980:	2300      	movs	r3, #0
1a002982:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a002984:	69a3      	ldr	r3, [r4, #24]
1a002986:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002988:	2303      	movs	r3, #3
1a00298a:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a00298c:	2310      	movs	r3, #16
1a00298e:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002990:	9b01      	ldr	r3, [sp, #4]
}
1a002992:	b002      	add	sp, #8
1a002994:	bd10      	pop	{r4, pc}
1a002996:	bf00      	nop
1a002998:	1a003fdc 	.word	0x1a003fdc
1a00299c:	40082000 	.word	0x40082000

1a0029a0 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0029a0:	b538      	push	{r3, r4, r5, lr}
1a0029a2:	4605      	mov	r5, r0
1a0029a4:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0029a6:	f7ff ffbb 	bl	1a002920 <Chip_UART_GetIndex>
1a0029aa:	4b0c      	ldr	r3, [pc, #48]	; (1a0029dc <Chip_UART_SetBaud+0x3c>)
1a0029ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0029b0:	f000 fafe 	bl	1a002fb0 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0029b4:	0124      	lsls	r4, r4, #4
1a0029b6:	fbb0 f3f4 	udiv	r3, r0, r4
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0029ba:	68ea      	ldr	r2, [r5, #12]
1a0029bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0029c0:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a0029c2:	b2da      	uxtb	r2, r3
1a0029c4:	602a      	str	r2, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a0029c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a0029ca:	606a      	str	r2, [r5, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0029cc:	68ea      	ldr	r2, [r5, #12]
1a0029ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0029d2:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0029d4:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0029d8:	0900      	lsrs	r0, r0, #4
1a0029da:	bd38      	pop	{r3, r4, r5, pc}
1a0029dc:	1a003fd4 	.word	0x1a003fd4

1a0029e0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0029e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0029e4:	b083      	sub	sp, #12
1a0029e6:	4683      	mov	fp, r0
1a0029e8:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0029ea:	f7ff ff99 	bl	1a002920 <Chip_UART_GetIndex>
1a0029ee:	4b34      	ldr	r3, [pc, #208]	; (1a002ac0 <Chip_UART_SetBaudFDR+0xe0>)
1a0029f0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0029f4:	f000 fadc 	bl	1a002fb0 <Chip_Clock_GetRate>
1a0029f8:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a0029fa:	f04f 37ff 	mov.w	r7, #4294967295

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0029fe:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a002a00:	2300      	movs	r3, #0
1a002a02:	9301      	str	r3, [sp, #4]
1a002a04:	46a2      	mov	sl, r4
1a002a06:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002a08:	e029      	b.n	1a002a5e <Chip_UART_SetBaudFDR+0x7e>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a002a0a:	2300      	movs	r3, #0
1a002a0c:	0932      	lsrs	r2, r6, #4
1a002a0e:	0730      	lsls	r0, r6, #28
1a002a10:	fba0 0104 	umull	r0, r1, r0, r4
1a002a14:	fb04 1102 	mla	r1, r4, r2, r1
1a002a18:	1962      	adds	r2, r4, r5
1a002a1a:	fb08 f202 	mul.w	r2, r8, r2
1a002a1e:	f000 ff59 	bl	1a0038d4 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a002a22:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a002a24:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a002a26:	2800      	cmp	r0, #0
1a002a28:	da01      	bge.n	1a002a2e <Chip_UART_SetBaudFDR+0x4e>
				diff = -diff;
1a002a2a:	4243      	negs	r3, r0
				div ++;
1a002a2c:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a002a2e:	429f      	cmp	r7, r3
1a002a30:	d30a      	bcc.n	1a002a48 <Chip_UART_SetBaudFDR+0x68>
1a002a32:	b14a      	cbz	r2, 1a002a48 <Chip_UART_SetBaudFDR+0x68>
1a002a34:	0c11      	lsrs	r1, r2, #16
1a002a36:	d107      	bne.n	1a002a48 <Chip_UART_SetBaudFDR+0x68>
1a002a38:	2a02      	cmp	r2, #2
1a002a3a:	d800      	bhi.n	1a002a3e <Chip_UART_SetBaudFDR+0x5e>
1a002a3c:	b925      	cbnz	r5, 1a002a48 <Chip_UART_SetBaudFDR+0x68>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002a3e:	b14b      	cbz	r3, 1a002a54 <Chip_UART_SetBaudFDR+0x74>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a002a40:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a002a42:	9501      	str	r5, [sp, #4]
			sm = m;
1a002a44:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a002a46:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a002a48:	3501      	adds	r5, #1
1a002a4a:	e000      	b.n	1a002a4e <Chip_UART_SetBaudFDR+0x6e>
1a002a4c:	2500      	movs	r5, #0
1a002a4e:	42a5      	cmp	r5, r4
1a002a50:	d3db      	bcc.n	1a002a0a <Chip_UART_SetBaudFDR+0x2a>
1a002a52:	e003      	b.n	1a002a5c <Chip_UART_SetBaudFDR+0x7c>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a002a54:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a002a56:	9501      	str	r5, [sp, #4]
			sm = m;
1a002a58:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a002a5a:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002a5c:	3401      	adds	r4, #1
1a002a5e:	b10f      	cbz	r7, 1a002a64 <Chip_UART_SetBaudFDR+0x84>
1a002a60:	2c0f      	cmp	r4, #15
1a002a62:	d9f3      	bls.n	1a002a4c <Chip_UART_SetBaudFDR+0x6c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a002a64:	f1b9 0f00 	cmp.w	r9, #0
1a002a68:	d026      	beq.n	1a002ab8 <Chip_UART_SetBaudFDR+0xd8>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002a6a:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002a72:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a002a76:	fa5f f389 	uxtb.w	r3, r9
1a002a7a:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a002a7e:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a002a82:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a002a86:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002a8e:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a002a92:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a002a96:	b2da      	uxtb	r2, r3
1a002a98:	9901      	ldr	r1, [sp, #4]
1a002a9a:	f001 030f 	and.w	r3, r1, #15
1a002a9e:	4313      	orrs	r3, r2
1a002aa0:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a002aa4:	0933      	lsrs	r3, r6, #4
1a002aa6:	fb0a f303 	mul.w	r3, sl, r3
1a002aaa:	eb0a 0001 	add.w	r0, sl, r1
1a002aae:	fb09 f000 	mul.w	r0, r9, r0
1a002ab2:	fbb3 f0f0 	udiv	r0, r3, r0
1a002ab6:	e000      	b.n	1a002aba <Chip_UART_SetBaudFDR+0xda>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a002ab8:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a002aba:	b003      	add	sp, #12
1a002abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002ac0:	1a003fd4 	.word	0x1a003fd4

1a002ac4 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002ac4:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002ac6:	680b      	ldr	r3, [r1, #0]
1a002ac8:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002acc:	d002      	beq.n	1a002ad4 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a002ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002ad2:	600b      	str	r3, [r1, #0]
1a002ad4:	4686      	mov	lr, r0
1a002ad6:	2601      	movs	r6, #1
1a002ad8:	e041      	b.n	1a002b5e <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a002ada:	680d      	ldr	r5, [r1, #0]
1a002adc:	f015 0f40 	tst.w	r5, #64	; 0x40
1a002ae0:	d008      	beq.n	1a002af4 <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002ae2:	1c7b      	adds	r3, r7, #1
1a002ae4:	fa04 f203 	lsl.w	r2, r4, r3
1a002ae8:	694b      	ldr	r3, [r1, #20]
1a002aea:	fb03 f302 	mul.w	r3, r3, r2
1a002aee:	fbb3 f3f6 	udiv	r3, r3, r6
1a002af2:	e004      	b.n	1a002afe <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a002af4:	694b      	ldr	r3, [r1, #20]
1a002af6:	fb04 f303 	mul.w	r3, r4, r3
1a002afa:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a002afe:	4a19      	ldr	r2, [pc, #100]	; (1a002b64 <pll_calc_divs+0xa0>)
1a002b00:	4293      	cmp	r3, r2
1a002b02:	d920      	bls.n	1a002b46 <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a002b04:	4a18      	ldr	r2, [pc, #96]	; (1a002b68 <pll_calc_divs+0xa4>)
1a002b06:	4293      	cmp	r3, r2
1a002b08:	d823      	bhi.n	1a002b52 <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a002b0a:	f015 0f80 	tst.w	r5, #128	; 0x80
1a002b0e:	d103      	bne.n	1a002b18 <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a002b10:	1c7a      	adds	r2, r7, #1
1a002b12:	fa23 f202 	lsr.w	r2, r3, r2
1a002b16:	e000      	b.n	1a002b1a <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a002b18:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002b1a:	1a85      	subs	r5, r0, r2
1a002b1c:	d502      	bpl.n	1a002b24 <pll_calc_divs+0x60>
		return -val;
1a002b1e:	f1c5 0c00 	rsb	ip, r5, #0
1a002b22:	e000      	b.n	1a002b26 <pll_calc_divs+0x62>
	return val;
1a002b24:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a002b26:	45e6      	cmp	lr, ip
1a002b28:	d90d      	bls.n	1a002b46 <pll_calc_divs+0x82>
					ppll->nsel = n;
1a002b2a:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a002b2c:	f107 0e01 	add.w	lr, r7, #1
1a002b30:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a002b34:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a002b36:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a002b38:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002b3a:	2d00      	cmp	r5, #0
1a002b3c:	da02      	bge.n	1a002b44 <pll_calc_divs+0x80>
		return -val;
1a002b3e:	f1c5 0e00 	rsb	lr, r5, #0
1a002b42:	e000      	b.n	1a002b46 <pll_calc_divs+0x82>
	return val;
1a002b44:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a002b46:	3401      	adds	r4, #1
1a002b48:	e000      	b.n	1a002b4c <pll_calc_divs+0x88>
1a002b4a:	2401      	movs	r4, #1
1a002b4c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a002b50:	ddc3      	ble.n	1a002ada <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a002b52:	3701      	adds	r7, #1
1a002b54:	e000      	b.n	1a002b58 <pll_calc_divs+0x94>
1a002b56:	2700      	movs	r7, #0
1a002b58:	2f03      	cmp	r7, #3
1a002b5a:	ddf6      	ble.n	1a002b4a <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a002b5c:	3601      	adds	r6, #1
1a002b5e:	2e04      	cmp	r6, #4
1a002b60:	ddf9      	ble.n	1a002b56 <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a002b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002b64:	094c5eff 	.word	0x094c5eff
1a002b68:	1312d000 	.word	0x1312d000

1a002b6c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a002b6e:	b099      	sub	sp, #100	; 0x64
1a002b70:	4605      	mov	r5, r0
1a002b72:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002b74:	4668      	mov	r0, sp
1a002b76:	2100      	movs	r1, #0
1a002b78:	2260      	movs	r2, #96	; 0x60
1a002b7a:	f001 f9aa 	bl	1a003ed2 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a002b7e:	2380      	movs	r3, #128	; 0x80
1a002b80:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002b82:	6963      	ldr	r3, [r4, #20]
1a002b84:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002b86:	7923      	ldrb	r3, [r4, #4]
1a002b88:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002b8c:	4628      	mov	r0, r5
1a002b8e:	4669      	mov	r1, sp
1a002b90:	f7ff ff98 	bl	1a002ac4 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002b94:	9b06      	ldr	r3, [sp, #24]
1a002b96:	42ab      	cmp	r3, r5
1a002b98:	d107      	bne.n	1a002baa <pll_get_frac+0x3e>
		*ppll = pll[0];
1a002b9a:	466d      	mov	r5, sp
1a002b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002ba0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002ba8:	e05e      	b.n	1a002c68 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002baa:	1aeb      	subs	r3, r5, r3
1a002bac:	d500      	bpl.n	1a002bb0 <pll_get_frac+0x44>
		return -val;
1a002bae:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002bb0:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002bb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002bb8:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002bba:	6963      	ldr	r3, [r4, #20]
1a002bbc:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a002bbe:	7923      	ldrb	r3, [r4, #4]
1a002bc0:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002bc4:	4628      	mov	r0, r5
1a002bc6:	a910      	add	r1, sp, #64	; 0x40
1a002bc8:	f7ff ff7c 	bl	1a002ac4 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002bcc:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a002bce:	42ab      	cmp	r3, r5
1a002bd0:	d107      	bne.n	1a002be2 <pll_get_frac+0x76>
		*ppll = pll[2];
1a002bd2:	ad10      	add	r5, sp, #64	; 0x40
1a002bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002bd8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002bdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002be0:	e042      	b.n	1a002c68 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002be2:	1aeb      	subs	r3, r5, r3
1a002be4:	d500      	bpl.n	1a002be8 <pll_get_frac+0x7c>
		return -val;
1a002be6:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002be8:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a002bea:	4b20      	ldr	r3, [pc, #128]	; (1a002c6c <pll_get_frac+0x100>)
1a002bec:	429d      	cmp	r5, r3
1a002bee:	d812      	bhi.n	1a002c16 <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a002bf0:	2340      	movs	r3, #64	; 0x40
1a002bf2:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002bf4:	6963      	ldr	r3, [r4, #20]
1a002bf6:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002bf8:	4628      	mov	r0, r5
1a002bfa:	a908      	add	r1, sp, #32
1a002bfc:	f7ff ff62 	bl	1a002ac4 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a002c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002c02:	42ab      	cmp	r3, r5
1a002c04:	d107      	bne.n	1a002c16 <pll_get_frac+0xaa>
			*ppll = pll[1];
1a002c06:	ad08      	add	r5, sp, #32
1a002c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c0c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a002c14:	e028      	b.n	1a002c68 <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a002c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002c18:	1aed      	subs	r5, r5, r3
1a002c1a:	d500      	bpl.n	1a002c1e <pll_get_frac+0xb2>
		return -val;
1a002c1c:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a002c1e:	42ae      	cmp	r6, r5
1a002c20:	dc11      	bgt.n	1a002c46 <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a002c22:	42be      	cmp	r6, r7
1a002c24:	dc07      	bgt.n	1a002c36 <pll_get_frac+0xca>
			*ppll = pll[0];
1a002c26:	466d      	mov	r5, sp
1a002c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c2c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002c34:	e018      	b.n	1a002c68 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a002c36:	ad10      	add	r5, sp, #64	; 0x40
1a002c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002c44:	e010      	b.n	1a002c68 <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a002c46:	42af      	cmp	r7, r5
1a002c48:	db07      	blt.n	1a002c5a <pll_get_frac+0xee>
			*ppll = pll[1];
1a002c4a:	ad08      	add	r5, sp, #32
1a002c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002c58:	e006      	b.n	1a002c68 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a002c5a:	ad10      	add	r5, sp, #64	; 0x40
1a002c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002c60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002c64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a002c68:	b019      	add	sp, #100	; 0x64
1a002c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002c6c:	068e7780 	.word	0x068e7780

1a002c70 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002c70:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002c72:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002c74:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002c76:	e010      	b.n	1a002c9a <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002c78:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002c7c:	0052      	lsls	r2, r2, #1
1a002c7e:	4d0d      	ldr	r5, [pc, #52]	; (1a002cb4 <Chip_Clock_FindBaseClock+0x44>)
1a002c80:	5aaa      	ldrh	r2, [r5, r2]
1a002c82:	4282      	cmp	r2, r0
1a002c84:	d806      	bhi.n	1a002c94 <Chip_Clock_FindBaseClock+0x24>
1a002c86:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002c8a:	0052      	lsls	r2, r2, #1
1a002c8c:	442a      	add	r2, r5
1a002c8e:	8852      	ldrh	r2, [r2, #2]
1a002c90:	4282      	cmp	r2, r0
1a002c92:	d201      	bcs.n	1a002c98 <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002c94:	3301      	adds	r3, #1
1a002c96:	e000      	b.n	1a002c9a <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a002c98:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002c9a:	291c      	cmp	r1, #28
1a002c9c:	d107      	bne.n	1a002cae <Chip_Clock_FindBaseClock+0x3e>
1a002c9e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002ca2:	0052      	lsls	r2, r2, #1
1a002ca4:	4c03      	ldr	r4, [pc, #12]	; (1a002cb4 <Chip_Clock_FindBaseClock+0x44>)
1a002ca6:	4422      	add	r2, r4
1a002ca8:	7914      	ldrb	r4, [r2, #4]
1a002caa:	428c      	cmp	r4, r1
1a002cac:	d1e4      	bne.n	1a002c78 <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a002cae:	4608      	mov	r0, r1
1a002cb0:	bc30      	pop	{r4, r5}
1a002cb2:	4770      	bx	lr
1a002cb4:	1a003ff0 	.word	0x1a003ff0

1a002cb8 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002cb8:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002cbe:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002cc0:	4a0d      	ldr	r2, [pc, #52]	; (1a002cf8 <Chip_Clock_EnableCrystal+0x40>)
1a002cc2:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002cc4:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002cc8:	6992      	ldr	r2, [r2, #24]
1a002cca:	428a      	cmp	r2, r1
1a002ccc:	d001      	beq.n	1a002cd2 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002cce:	4a0a      	ldr	r2, [pc, #40]	; (1a002cf8 <Chip_Clock_EnableCrystal+0x40>)
1a002cd0:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002cd2:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002cd6:	4a09      	ldr	r2, [pc, #36]	; (1a002cfc <Chip_Clock_EnableCrystal+0x44>)
1a002cd8:	6811      	ldr	r1, [r2, #0]
1a002cda:	4a09      	ldr	r2, [pc, #36]	; (1a002d00 <Chip_Clock_EnableCrystal+0x48>)
1a002cdc:	4291      	cmp	r1, r2
1a002cde:	d901      	bls.n	1a002ce4 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002ce0:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002ce4:	4a04      	ldr	r2, [pc, #16]	; (1a002cf8 <Chip_Clock_EnableCrystal+0x40>)
1a002ce6:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002ce8:	9b01      	ldr	r3, [sp, #4]
1a002cea:	1e5a      	subs	r2, r3, #1
1a002cec:	9201      	str	r2, [sp, #4]
1a002cee:	2b00      	cmp	r3, #0
1a002cf0:	d1fa      	bne.n	1a002ce8 <Chip_Clock_EnableCrystal+0x30>
}
1a002cf2:	b002      	add	sp, #8
1a002cf4:	4770      	bx	lr
1a002cf6:	bf00      	nop
1a002cf8:	40050000 	.word	0x40050000
1a002cfc:	1a003f54 	.word	0x1a003f54
1a002d00:	01312cff 	.word	0x01312cff

1a002d04 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002d04:	3012      	adds	r0, #18
1a002d06:	4b05      	ldr	r3, [pc, #20]	; (1a002d1c <Chip_Clock_GetDividerSource+0x18>)
1a002d08:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002d0c:	f010 0f01 	tst.w	r0, #1
1a002d10:	d102      	bne.n	1a002d18 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002d12:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002d16:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a002d18:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a002d1a:	4770      	bx	lr
1a002d1c:	40050000 	.word	0x40050000

1a002d20 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002d20:	f100 0212 	add.w	r2, r0, #18
1a002d24:	4b03      	ldr	r3, [pc, #12]	; (1a002d34 <Chip_Clock_GetDividerDivisor+0x14>)
1a002d26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002d2a:	4b03      	ldr	r3, [pc, #12]	; (1a002d38 <Chip_Clock_GetDividerDivisor+0x18>)
1a002d2c:	5c18      	ldrb	r0, [r3, r0]
}
1a002d2e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002d32:	4770      	bx	lr
1a002d34:	40050000 	.word	0x40050000
1a002d38:	1a003fe8 	.word	0x1a003fe8

1a002d3c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002d3c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002d3e:	2810      	cmp	r0, #16
1a002d40:	d80a      	bhi.n	1a002d58 <Chip_Clock_GetClockInputHz+0x1c>
1a002d42:	e8df f000 	tbb	[pc, r0]
1a002d46:	0b42      	.short	0x0b42
1a002d48:	091f160d 	.word	0x091f160d
1a002d4c:	2b282522 	.word	0x2b282522
1a002d50:	322e0909 	.word	0x322e0909
1a002d54:	3a36      	.short	0x3a36
1a002d56:	3e          	.byte	0x3e
1a002d57:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a002d58:	2000      	movs	r0, #0
1a002d5a:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002d5c:	481e      	ldr	r0, [pc, #120]	; (1a002dd8 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002d5e:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002d60:	4b1e      	ldr	r3, [pc, #120]	; (1a002ddc <Chip_Clock_GetClockInputHz+0xa0>)
1a002d62:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002d66:	f003 0307 	and.w	r3, r3, #7
1a002d6a:	2b04      	cmp	r3, #4
1a002d6c:	d130      	bne.n	1a002dd0 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a002d6e:	2000      	movs	r0, #0
1a002d70:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002d72:	4b1a      	ldr	r3, [pc, #104]	; (1a002ddc <Chip_Clock_GetClockInputHz+0xa0>)
1a002d74:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002d78:	f003 0307 	and.w	r3, r3, #7
1a002d7c:	2b04      	cmp	r3, #4
1a002d7e:	d029      	beq.n	1a002dd4 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002d80:	4817      	ldr	r0, [pc, #92]	; (1a002de0 <Chip_Clock_GetClockInputHz+0xa4>)
1a002d82:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002d84:	4b17      	ldr	r3, [pc, #92]	; (1a002de4 <Chip_Clock_GetClockInputHz+0xa8>)
1a002d86:	6818      	ldr	r0, [r3, #0]
		break;
1a002d88:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002d8a:	4b17      	ldr	r3, [pc, #92]	; (1a002de8 <Chip_Clock_GetClockInputHz+0xac>)
1a002d8c:	6818      	ldr	r0, [r3, #0]
		break;
1a002d8e:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002d90:	4b16      	ldr	r3, [pc, #88]	; (1a002dec <Chip_Clock_GetClockInputHz+0xb0>)
1a002d92:	6818      	ldr	r0, [r3, #0]
		break;
1a002d94:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002d96:	4b15      	ldr	r3, [pc, #84]	; (1a002dec <Chip_Clock_GetClockInputHz+0xb0>)
1a002d98:	6858      	ldr	r0, [r3, #4]
		break;
1a002d9a:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002d9c:	f000 f86a 	bl	1a002e74 <Chip_Clock_GetMainPLLHz>
		break;
1a002da0:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002da2:	2100      	movs	r1, #0
1a002da4:	f000 f89a 	bl	1a002edc <Chip_Clock_GetDivRate>
		break;
1a002da8:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002daa:	2101      	movs	r1, #1
1a002dac:	f000 f896 	bl	1a002edc <Chip_Clock_GetDivRate>
		break;
1a002db0:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002db2:	2102      	movs	r1, #2
1a002db4:	f000 f892 	bl	1a002edc <Chip_Clock_GetDivRate>
		break;
1a002db8:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002dba:	2103      	movs	r1, #3
1a002dbc:	f000 f88e 	bl	1a002edc <Chip_Clock_GetDivRate>
		break;
1a002dc0:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002dc2:	2104      	movs	r1, #4
1a002dc4:	f000 f88a 	bl	1a002edc <Chip_Clock_GetDivRate>
		break;
1a002dc8:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a002dca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a002dce:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a002dd0:	4803      	ldr	r0, [pc, #12]	; (1a002de0 <Chip_Clock_GetClockInputHz+0xa4>)
1a002dd2:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a002dd4:	4806      	ldr	r0, [pc, #24]	; (1a002df0 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a002dd6:	bd08      	pop	{r3, pc}
1a002dd8:	00b71b00 	.word	0x00b71b00
1a002ddc:	40043000 	.word	0x40043000
1a002de0:	017d7840 	.word	0x017d7840
1a002de4:	1a003f58 	.word	0x1a003f58
1a002de8:	1a003f54 	.word	0x1a003f54
1a002dec:	10003fdc 	.word	0x10003fdc
1a002df0:	02faf080 	.word	0x02faf080

1a002df4 <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002df4:	b538      	push	{r3, r4, r5, lr}
1a002df6:	4605      	mov	r5, r0
1a002df8:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002dfa:	7908      	ldrb	r0, [r1, #4]
1a002dfc:	f7ff ff9e 	bl	1a002d3c <Chip_Clock_GetClockInputHz>
1a002e00:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002e02:	4b19      	ldr	r3, [pc, #100]	; (1a002e68 <Chip_Clock_CalcMainPLLValue+0x74>)
1a002e04:	442b      	add	r3, r5
1a002e06:	4a19      	ldr	r2, [pc, #100]	; (1a002e6c <Chip_Clock_CalcMainPLLValue+0x78>)
1a002e08:	4293      	cmp	r3, r2
1a002e0a:	d821      	bhi.n	1a002e50 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002e0c:	b318      	cbz	r0, 1a002e56 <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002e0e:	2380      	movs	r3, #128	; 0x80
1a002e10:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002e12:	2300      	movs	r3, #0
1a002e14:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002e16:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002e18:	fbb5 f3f0 	udiv	r3, r5, r0
1a002e1c:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002e1e:	4a14      	ldr	r2, [pc, #80]	; (1a002e70 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002e20:	4295      	cmp	r5, r2
1a002e22:	d903      	bls.n	1a002e2c <Chip_Clock_CalcMainPLLValue+0x38>
1a002e24:	fb03 f000 	mul.w	r0, r3, r0
1a002e28:	42a8      	cmp	r0, r5
1a002e2a:	d007      	beq.n	1a002e3c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002e2c:	4628      	mov	r0, r5
1a002e2e:	4621      	mov	r1, r4
1a002e30:	f7ff fe9c 	bl	1a002b6c <pll_get_frac>
		if (!ppll->nsel) {
1a002e34:	68a3      	ldr	r3, [r4, #8]
1a002e36:	b18b      	cbz	r3, 1a002e5c <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a002e38:	3b01      	subs	r3, #1
1a002e3a:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a002e3c:	6923      	ldr	r3, [r4, #16]
1a002e3e:	b183      	cbz	r3, 1a002e62 <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a002e40:	68e2      	ldr	r2, [r4, #12]
1a002e42:	b10a      	cbz	r2, 1a002e48 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002e44:	3a01      	subs	r2, #1
1a002e46:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a002e48:	3b01      	subs	r3, #1
1a002e4a:	6123      	str	r3, [r4, #16]

	return 0;
1a002e4c:	2000      	movs	r0, #0
1a002e4e:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a002e50:	f04f 30ff 	mov.w	r0, #4294967295
1a002e54:	bd38      	pop	{r3, r4, r5, pc}
1a002e56:	f04f 30ff 	mov.w	r0, #4294967295
1a002e5a:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a002e5c:	f04f 30ff 	mov.w	r0, #4294967295
1a002e60:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a002e62:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ppll->msel --;

	return 0;
}
1a002e66:	bd38      	pop	{r3, r4, r5, pc}
1a002e68:	ff6b3a10 	.word	0xff6b3a10
1a002e6c:	0b940510 	.word	0x0b940510
1a002e70:	094c5eff 	.word	0x094c5eff

1a002e74 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a002e74:	b570      	push	{r4, r5, r6, lr}
1a002e76:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002e78:	4d16      	ldr	r5, [pc, #88]	; (1a002ed4 <Chip_Clock_GetMainPLLHz+0x60>)
1a002e7a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002e7c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002e80:	f7ff ff5c 	bl	1a002d3c <Chip_Clock_GetClockInputHz>
1a002e84:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002e86:	4b14      	ldr	r3, [pc, #80]	; (1a002ed8 <Chip_Clock_GetMainPLLHz+0x64>)
1a002e88:	6818      	ldr	r0, [r3, #0]
1a002e8a:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002e8c:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a002e8e:	f010 0001 	ands.w	r0, r0, #1
1a002e92:	d01d      	beq.n	1a002ed0 <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a002e94:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002e98:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002e9c:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a002ea0:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a002ea4:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a002ea6:	3201      	adds	r2, #1
	p = ptab[psel];
1a002ea8:	a802      	add	r0, sp, #8
1a002eaa:	4401      	add	r1, r0
1a002eac:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a002eb0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002eb4:	d100      	bne.n	1a002eb8 <Chip_Clock_GetMainPLLHz+0x44>
1a002eb6:	b125      	cbz	r5, 1a002ec2 <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a002eb8:	fbb6 f0f2 	udiv	r0, r6, r2
1a002ebc:	fb03 f000 	mul.w	r0, r3, r0
1a002ec0:	e006      	b.n	1a002ed0 <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a002ec2:	0040      	lsls	r0, r0, #1
1a002ec4:	fbb3 f3f0 	udiv	r3, r3, r0
1a002ec8:	fbb6 f0f2 	udiv	r0, r6, r2
1a002ecc:	fb00 f003 	mul.w	r0, r0, r3
}
1a002ed0:	b002      	add	sp, #8
1a002ed2:	bd70      	pop	{r4, r5, r6, pc}
1a002ed4:	40050000 	.word	0x40050000
1a002ed8:	1a003fe4 	.word	0x1a003fe4

1a002edc <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a002edc:	b538      	push	{r3, r4, r5, lr}
1a002ede:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a002ee0:	4608      	mov	r0, r1
1a002ee2:	f7ff ff0f 	bl	1a002d04 <Chip_Clock_GetDividerSource>
1a002ee6:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002ee8:	4620      	mov	r0, r4
1a002eea:	f7ff ff19 	bl	1a002d20 <Chip_Clock_GetDividerDivisor>
1a002eee:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002ef0:	4628      	mov	r0, r5
1a002ef2:	f7ff ff23 	bl	1a002d3c <Chip_Clock_GetClockInputHz>
1a002ef6:	3401      	adds	r4, #1
}
1a002ef8:	fbb0 f0f4 	udiv	r0, r0, r4
1a002efc:	bd38      	pop	{r3, r4, r5, pc}
1a002efe:	bf00      	nop

1a002f00 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002f00:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002f02:	0085      	lsls	r5, r0, #2
1a002f04:	4c0d      	ldr	r4, [pc, #52]	; (1a002f3c <Chip_Clock_SetBaseClock+0x3c>)
1a002f06:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a002f08:	281b      	cmp	r0, #27
1a002f0a:	d80f      	bhi.n	1a002f2c <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a002f0c:	2911      	cmp	r1, #17
1a002f0e:	d012      	beq.n	1a002f36 <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002f10:	4c0b      	ldr	r4, [pc, #44]	; (1a002f40 <Chip_Clock_SetBaseClock+0x40>)
1a002f12:	402c      	ands	r4, r5

			if (autoblocken) {
1a002f14:	b10a      	cbz	r2, 1a002f1a <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a002f16:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a002f1a:	b10b      	cbz	r3, 1a002f20 <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a002f1c:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002f20:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002f24:	0080      	lsls	r0, r0, #2
1a002f26:	4b05      	ldr	r3, [pc, #20]	; (1a002f3c <Chip_Clock_SetBaseClock+0x3c>)
1a002f28:	501c      	str	r4, [r3, r0]
1a002f2a:	e004      	b.n	1a002f36 <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002f2c:	f045 0501 	orr.w	r5, r5, #1
1a002f30:	0080      	lsls	r0, r0, #2
1a002f32:	4b02      	ldr	r3, [pc, #8]	; (1a002f3c <Chip_Clock_SetBaseClock+0x3c>)
1a002f34:	501d      	str	r5, [r3, r0]
	}
}
1a002f36:	bc30      	pop	{r4, r5}
1a002f38:	4770      	bx	lr
1a002f3a:	bf00      	nop
1a002f3c:	4005005c 	.word	0x4005005c
1a002f40:	e0fff7fe 	.word	0xe0fff7fe

1a002f44 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002f44:	281b      	cmp	r0, #27
1a002f46:	d808      	bhi.n	1a002f5a <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002f48:	0080      	lsls	r0, r0, #2
1a002f4a:	4b06      	ldr	r3, [pc, #24]	; (1a002f64 <Chip_Clock_GetBaseClock+0x20>)
1a002f4c:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a002f4e:	f010 0f01 	tst.w	r0, #1
1a002f52:	d104      	bne.n	1a002f5e <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002f54:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002f58:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a002f5a:	2011      	movs	r0, #17
1a002f5c:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a002f5e:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a002f60:	4770      	bx	lr
1a002f62:	bf00      	nop
1a002f64:	4005005c 	.word	0x4005005c

1a002f68 <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a002f68:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002f6a:	f7ff ffeb 	bl	1a002f44 <Chip_Clock_GetBaseClock>
1a002f6e:	f7ff fee5 	bl	1a002d3c <Chip_Clock_GetClockInputHz>
}
1a002f72:	bd08      	pop	{r3, pc}

1a002f74 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002f74:	b909      	cbnz	r1, 1a002f7a <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a002f76:	2101      	movs	r1, #1
1a002f78:	e000      	b.n	1a002f7c <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a002f7a:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a002f7c:	b10a      	cbz	r2, 1a002f82 <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a002f7e:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002f82:	2b02      	cmp	r3, #2
1a002f84:	d101      	bne.n	1a002f8a <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a002f86:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002f8a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002f8e:	d305      	bcc.n	1a002f9c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002f90:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002f94:	4b04      	ldr	r3, [pc, #16]	; (1a002fa8 <Chip_Clock_EnableOpts+0x34>)
1a002f96:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002f9a:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002f9c:	3020      	adds	r0, #32
1a002f9e:	4b03      	ldr	r3, [pc, #12]	; (1a002fac <Chip_Clock_EnableOpts+0x38>)
1a002fa0:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002fa4:	4770      	bx	lr
1a002fa6:	bf00      	nop
1a002fa8:	40052000 	.word	0x40052000
1a002fac:	40051000 	.word	0x40051000

1a002fb0 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002fb0:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002fb2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002fb6:	d305      	bcc.n	1a002fc4 <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002fb8:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002fbc:	4a0d      	ldr	r2, [pc, #52]	; (1a002ff4 <Chip_Clock_GetRate+0x44>)
1a002fbe:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a002fc2:	e004      	b.n	1a002fce <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002fc4:	f100 0320 	add.w	r3, r0, #32
1a002fc8:	4a0b      	ldr	r2, [pc, #44]	; (1a002ff8 <Chip_Clock_GetRate+0x48>)
1a002fca:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002fce:	f014 0f01 	tst.w	r4, #1
1a002fd2:	d00c      	beq.n	1a002fee <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002fd4:	f7ff fe4c 	bl	1a002c70 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002fd8:	f7ff ffc6 	bl	1a002f68 <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a002fdc:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002fe0:	d101      	bne.n	1a002fe6 <Chip_Clock_GetRate+0x36>
			div = 1;
1a002fe2:	2301      	movs	r3, #1
1a002fe4:	e000      	b.n	1a002fe8 <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a002fe6:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a002fe8:	fbb0 f0f3 	udiv	r0, r0, r3
1a002fec:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a002fee:	2000      	movs	r0, #0
	}

	return rate;
}
1a002ff0:	bd10      	pop	{r4, pc}
1a002ff2:	bf00      	nop
1a002ff4:	40052000 	.word	0x40052000
1a002ff8:	40051000 	.word	0x40051000

1a002ffc <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002ffc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002ffe:	2069      	movs	r0, #105	; 0x69
1a003000:	f7ff ffd6 	bl	1a002fb0 <Chip_Clock_GetRate>
1a003004:	4b01      	ldr	r3, [pc, #4]	; (1a00300c <SystemCoreClockUpdate+0x10>)
1a003006:	6018      	str	r0, [r3, #0]
1a003008:	bd08      	pop	{r3, pc}
1a00300a:	bf00      	nop
1a00300c:	10004434 	.word	0x10004434

1a003010 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a003010:	4770      	bx	lr
1a003012:	bf00      	nop

1a003014 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a003014:	b570      	push	{r4, r5, r6, lr}
1a003016:	b08a      	sub	sp, #40	; 0x28
1a003018:	4605      	mov	r5, r0
1a00301a:	460e      	mov	r6, r1
1a00301c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00301e:	f242 7310 	movw	r3, #10000	; 0x2710
1a003022:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a003024:	2806      	cmp	r0, #6
1a003026:	d101      	bne.n	1a00302c <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a003028:	f7ff fe46 	bl	1a002cb8 <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a00302c:	2004      	movs	r0, #4
1a00302e:	4629      	mov	r1, r5
1a003030:	2201      	movs	r2, #1
1a003032:	2300      	movs	r3, #0
1a003034:	f7ff ff64 	bl	1a002f00 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a003038:	4a47      	ldr	r2, [pc, #284]	; (1a003158 <Chip_SetupCoreClock+0x144>)
1a00303a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00303c:	f043 0301 	orr.w	r3, r3, #1
1a003040:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003042:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a003046:	4630      	mov	r0, r6
1a003048:	a901      	add	r1, sp, #4
1a00304a:	f7ff fed3 	bl	1a002df4 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00304e:	4b43      	ldr	r3, [pc, #268]	; (1a00315c <Chip_SetupCoreClock+0x148>)
1a003050:	429e      	cmp	r6, r3
1a003052:	d913      	bls.n	1a00307c <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a003054:	9b01      	ldr	r3, [sp, #4]
1a003056:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00305a:	d000      	beq.n	1a00305e <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a00305c:	e7fe      	b.n	1a00305c <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a00305e:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003062:	d005      	beq.n	1a003070 <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a003064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003068:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a00306a:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a00306c:	2601      	movs	r6, #1
1a00306e:	e007      	b.n	1a003080 <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a003070:	9b04      	ldr	r3, [sp, #16]
1a003072:	3301      	adds	r3, #1
1a003074:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a003076:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a003078:	2600      	movs	r6, #0
1a00307a:	e001      	b.n	1a003080 <Chip_SetupCoreClock+0x6c>
1a00307c:	2500      	movs	r5, #0
1a00307e:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a003080:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003084:	9b01      	ldr	r3, [sp, #4]
1a003086:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00308a:	9a05      	ldr	r2, [sp, #20]
1a00308c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a003090:	9a03      	ldr	r2, [sp, #12]
1a003092:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003096:	9a04      	ldr	r2, [sp, #16]
1a003098:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00309c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0030a0:	4a2d      	ldr	r2, [pc, #180]	; (1a003158 <Chip_SetupCoreClock+0x144>)
1a0030a2:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0030a4:	4b2c      	ldr	r3, [pc, #176]	; (1a003158 <Chip_SetupCoreClock+0x144>)
1a0030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0030a8:	f013 0f01 	tst.w	r3, #1
1a0030ac:	d0fa      	beq.n	1a0030a4 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0030ae:	2004      	movs	r0, #4
1a0030b0:	2109      	movs	r1, #9
1a0030b2:	2201      	movs	r2, #1
1a0030b4:	2300      	movs	r3, #0
1a0030b6:	f7ff ff23 	bl	1a002f00 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0030ba:	b1ee      	cbz	r6, 1a0030f8 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0030bc:	f242 7310 	movw	r3, #10000	; 0x2710
1a0030c0:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0030c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0030c4:	1e5a      	subs	r2, r3, #1
1a0030c6:	9209      	str	r2, [sp, #36]	; 0x24
1a0030c8:	2b00      	cmp	r3, #0
1a0030ca:	d1fa      	bne.n	1a0030c2 <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a0030cc:	9b01      	ldr	r3, [sp, #4]
1a0030ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0030d2:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0030d4:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0030d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0030dc:	9a05      	ldr	r2, [sp, #20]
1a0030de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0030e2:	9a03      	ldr	r2, [sp, #12]
1a0030e4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0030e8:	9a04      	ldr	r2, [sp, #16]
1a0030ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0030ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0030f2:	4a19      	ldr	r2, [pc, #100]	; (1a003158 <Chip_SetupCoreClock+0x144>)
1a0030f4:	6453      	str	r3, [r2, #68]	; 0x44
1a0030f6:	e01c      	b.n	1a003132 <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a0030f8:	b1dd      	cbz	r5, 1a003132 <Chip_SetupCoreClock+0x11e>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0030fa:	f242 7310 	movw	r3, #10000	; 0x2710
1a0030fe:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003100:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003102:	1e5a      	subs	r2, r3, #1
1a003104:	9209      	str	r2, [sp, #36]	; 0x24
1a003106:	2b00      	cmp	r3, #0
1a003108:	d1fa      	bne.n	1a003100 <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a00310a:	9b04      	ldr	r3, [sp, #16]
1a00310c:	1e59      	subs	r1, r3, #1
1a00310e:	9104      	str	r1, [sp, #16]
1a003110:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003114:	9b01      	ldr	r3, [sp, #4]
1a003116:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a00311a:	9b05      	ldr	r3, [sp, #20]
1a00311c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a003120:	9b03      	ldr	r3, [sp, #12]
1a003122:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a003126:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a00312a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00312e:	4a0a      	ldr	r2, [pc, #40]	; (1a003158 <Chip_SetupCoreClock+0x144>)
1a003130:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003132:	b964      	cbnz	r4, 1a00314e <Chip_SetupCoreClock+0x13a>
1a003134:	e00e      	b.n	1a003154 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003136:	4a0a      	ldr	r2, [pc, #40]	; (1a003160 <Chip_SetupCoreClock+0x14c>)
1a003138:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a00313c:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a003140:	7859      	ldrb	r1, [r3, #1]
1a003142:	789a      	ldrb	r2, [r3, #2]
1a003144:	78db      	ldrb	r3, [r3, #3]
1a003146:	f7ff fedb 	bl	1a002f00 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00314a:	3401      	adds	r4, #1
1a00314c:	e000      	b.n	1a003150 <Chip_SetupCoreClock+0x13c>
1a00314e:	2400      	movs	r4, #0
1a003150:	2c11      	cmp	r4, #17
1a003152:	d9f0      	bls.n	1a003136 <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a003154:	b00a      	add	sp, #40	; 0x28
1a003156:	bd70      	pop	{r4, r5, r6, pc}
1a003158:	40050000 	.word	0x40050000
1a00315c:	068e7780 	.word	0x068e7780
1a003160:	1a00405c 	.word	0x1a00405c

1a003164 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003164:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a003166:	4b0c      	ldr	r3, [pc, #48]	; (1a003198 <SystemInit+0x34>)
1a003168:	4a0c      	ldr	r2, [pc, #48]	; (1a00319c <SystemInit+0x38>)
1a00316a:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a00316c:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003170:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a003172:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003176:	2b20      	cmp	r3, #32
1a003178:	d101      	bne.n	1a00317e <SystemInit+0x1a>
  {
    return 1U;           /* Single precision FPU */
1a00317a:	2301      	movs	r3, #1
1a00317c:	e000      	b.n	1a003180 <SystemInit+0x1c>
  }
  else
  {
    return 0U;           /* No FPU */
1a00317e:	2300      	movs	r3, #0

   if (SCB_GetFPUType() > 0)
1a003180:	b133      	cbz	r3, 1a003190 <SystemInit+0x2c>
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003182:	4a05      	ldr	r2, [pc, #20]	; (1a003198 <SystemInit+0x34>)
1a003184:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00318c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

   /* Board specific SystemInit */
   Board_SystemInit();
1a003190:	f7ff fbc0 	bl	1a002914 <Board_SystemInit>
1a003194:	bd08      	pop	{r3, pc}
1a003196:	bf00      	nop
1a003198:	e000ed00 	.word	0xe000ed00
1a00319c:	1a000000 	.word	0x1a000000

1a0031a0 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0031a0:	4b04      	ldr	r3, [pc, #16]	; (1a0031b4 <cyclesCounterInit+0x14>)
1a0031a2:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a0031a4:	4b04      	ldr	r3, [pc, #16]	; (1a0031b8 <cyclesCounterInit+0x18>)
1a0031a6:	681a      	ldr	r2, [r3, #0]
1a0031a8:	6813      	ldr	r3, [r2, #0]
1a0031aa:	f043 0301 	orr.w	r3, r3, #1
1a0031ae:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0031b0:	2001      	movs	r0, #1
1a0031b2:	4770      	bx	lr
1a0031b4:	10000118 	.word	0x10000118
1a0031b8:	10000114 	.word	0x10000114

1a0031bc <uartProcessIRQ>:
static void uartProcessIRQ( uartMap_t uart );

/*==================[internal functions definition]==========================*/

static void uartProcessIRQ( uartMap_t uart )
{
1a0031bc:	b570      	push	{r4, r5, r6, lr}
1a0031be:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a0031c0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a0031c4:	009b      	lsls	r3, r3, #2
1a0031c6:	4a1b      	ldr	r2, [pc, #108]	; (1a003234 <uartProcessIRQ+0x78>)
1a0031c8:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0031ca:	6975      	ldr	r5, [r6, #20]
1a0031cc:	b2ed      	uxtb	r5, r5

   // Rx Interrupt
   if(status & UART_LSR_RDR) { // uartRxReady
1a0031ce:	f015 0f01 	tst.w	r5, #1
1a0031d2:	d013      	beq.n	1a0031fc <uartProcessIRQ+0x40>
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a0031d4:	b920      	cbnz	r0, 1a0031e0 <uartProcessIRQ+0x24>
1a0031d6:	4b18      	ldr	r3, [pc, #96]	; (1a003238 <uartProcessIRQ+0x7c>)
1a0031d8:	681b      	ldr	r3, [r3, #0]
1a0031da:	b10b      	cbz	r3, 1a0031e0 <uartProcessIRQ+0x24>
         (*rxIsrCallbackUART0)(0);
1a0031dc:	2000      	movs	r0, #0
1a0031de:	4798      	blx	r3

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0031e0:	2c03      	cmp	r4, #3
1a0031e2:	d104      	bne.n	1a0031ee <uartProcessIRQ+0x32>
1a0031e4:	4b15      	ldr	r3, [pc, #84]	; (1a00323c <uartProcessIRQ+0x80>)
1a0031e6:	681b      	ldr	r3, [r3, #0]
1a0031e8:	b10b      	cbz	r3, 1a0031ee <uartProcessIRQ+0x32>
         (*rxIsrCallbackUART2)(0);
1a0031ea:	2000      	movs	r0, #0
1a0031ec:	4798      	blx	r3

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0031ee:	2c05      	cmp	r4, #5
1a0031f0:	d104      	bne.n	1a0031fc <uartProcessIRQ+0x40>
1a0031f2:	4b13      	ldr	r3, [pc, #76]	; (1a003240 <uartProcessIRQ+0x84>)
1a0031f4:	681b      	ldr	r3, [r3, #0]
1a0031f6:	b10b      	cbz	r3, 1a0031fc <uartProcessIRQ+0x40>
         (*rxIsrCallbackUART3)(0);
1a0031f8:	2000      	movs	r0, #0
1a0031fa:	4798      	blx	r3
   }

   // Tx Interrupt
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a0031fc:	f015 0f20 	tst.w	r5, #32
1a003200:	d017      	beq.n	1a003232 <uartProcessIRQ+0x76>
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a003202:	6873      	ldr	r3, [r6, #4]
1a003204:	f013 0f02 	tst.w	r3, #2
1a003208:	d013      	beq.n	1a003232 <uartProcessIRQ+0x76>
       ( Chip_UART_GetIntsEnabled( lpcUarts[uart].uartAddr ) & UART_IER_THREINT ) ) {

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a00320a:	b924      	cbnz	r4, 1a003216 <uartProcessIRQ+0x5a>
1a00320c:	4b0d      	ldr	r3, [pc, #52]	; (1a003244 <uartProcessIRQ+0x88>)
1a00320e:	681b      	ldr	r3, [r3, #0]
1a003210:	b10b      	cbz	r3, 1a003216 <uartProcessIRQ+0x5a>
         (*txIsrCallbackUART0)(0);
1a003212:	2000      	movs	r0, #0
1a003214:	4798      	blx	r3

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a003216:	2c03      	cmp	r4, #3
1a003218:	d104      	bne.n	1a003224 <uartProcessIRQ+0x68>
1a00321a:	4b0b      	ldr	r3, [pc, #44]	; (1a003248 <uartProcessIRQ+0x8c>)
1a00321c:	681b      	ldr	r3, [r3, #0]
1a00321e:	b10b      	cbz	r3, 1a003224 <uartProcessIRQ+0x68>
         (*txIsrCallbackUART2)(0);
1a003220:	2000      	movs	r0, #0
1a003222:	4798      	blx	r3

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a003224:	2c05      	cmp	r4, #5
1a003226:	d104      	bne.n	1a003232 <uartProcessIRQ+0x76>
1a003228:	4b08      	ldr	r3, [pc, #32]	; (1a00324c <uartProcessIRQ+0x90>)
1a00322a:	681b      	ldr	r3, [r3, #0]
1a00322c:	b10b      	cbz	r3, 1a003232 <uartProcessIRQ+0x76>
         (*txIsrCallbackUART3)(0);
1a00322e:	2000      	movs	r0, #0
1a003230:	4798      	blx	r3
1a003232:	bd70      	pop	{r4, r5, r6, pc}
1a003234:	1a0040a4 	.word	0x1a0040a4
1a003238:	10003fe4 	.word	0x10003fe4
1a00323c:	10003ff4 	.word	0x10003ff4
1a003240:	10003ff8 	.word	0x10003ff8
1a003244:	10003fe8 	.word	0x10003fe8
1a003248:	10003fec 	.word	0x10003fec
1a00324c:	10003ff0 	.word	0x10003ff0

1a003250 <uartInterrupt>:
#ifdef SAPI_USE_INTERRUPTS

// UART Global Interrupt Enable/Disable
void uartInterrupt( uartMap_t uart, bool_t enable )
{
   if( enable ) {
1a003250:	b349      	cbz	r1, 1a0032a6 <uartInterrupt+0x56>
      // Interrupt Priority for UART channel
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, ma baja prioridad)
1a003252:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a003256:	0092      	lsls	r2, r2, #2
1a003258:	4b1f      	ldr	r3, [pc, #124]	; (1a0032d8 <uartInterrupt+0x88>)
1a00325a:	4413      	add	r3, r2
1a00325c:	789b      	ldrb	r3, [r3, #2]
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
1a00325e:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003262:	d106      	bne.n	1a003272 <uartInterrupt+0x22>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003264:	4a1d      	ldr	r2, [pc, #116]	; (1a0032dc <uartInterrupt+0x8c>)
1a003266:	fa42 f383 	sxtab	r3, r2, r3
1a00326a:	22a0      	movs	r2, #160	; 0xa0
1a00326c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
1a003270:	e005      	b.n	1a00327e <uartInterrupt+0x2e>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a003272:	f003 030f 	and.w	r3, r3, #15
1a003276:	4a1a      	ldr	r2, [pc, #104]	; (1a0032e0 <uartInterrupt+0x90>)
1a003278:	441a      	add	r2, r3
1a00327a:	23a0      	movs	r3, #160	; 0xa0
1a00327c:	7613      	strb	r3, [r2, #24]
      // Enable Interrupt for UART channel
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a00327e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003282:	0080      	lsls	r0, r0, #2
1a003284:	4b14      	ldr	r3, [pc, #80]	; (1a0032d8 <uartInterrupt+0x88>)
1a003286:	4418      	add	r0, r3
1a003288:	7883      	ldrb	r3, [r0, #2]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
1a00328a:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00328e:	d122      	bne.n	1a0032d6 <uartInterrupt+0x86>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a003290:	b25a      	sxtb	r2, r3
1a003292:	0952      	lsrs	r2, r2, #5
1a003294:	f003 031f 	and.w	r3, r3, #31
1a003298:	2101      	movs	r1, #1
1a00329a:	fa01 f303 	lsl.w	r3, r1, r3
1a00329e:	490f      	ldr	r1, [pc, #60]	; (1a0032dc <uartInterrupt+0x8c>)
1a0032a0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
1a0032a4:	4770      	bx	lr
   } else {
      // Disable Interrupt for UART channel
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a0032a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0032aa:	0080      	lsls	r0, r0, #2
1a0032ac:	4b0a      	ldr	r3, [pc, #40]	; (1a0032d8 <uartInterrupt+0x88>)
1a0032ae:	4418      	add	r0, r3
1a0032b0:	7883      	ldrb	r3, [r0, #2]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
1a0032b2:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0032b6:	d10e      	bne.n	1a0032d6 <uartInterrupt+0x86>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0032b8:	b25a      	sxtb	r2, r3
1a0032ba:	0952      	lsrs	r2, r2, #5
1a0032bc:	f003 031f 	and.w	r3, r3, #31
1a0032c0:	2101      	movs	r1, #1
1a0032c2:	4099      	lsls	r1, r3
1a0032c4:	f102 0320 	add.w	r3, r2, #32
1a0032c8:	4a04      	ldr	r2, [pc, #16]	; (1a0032dc <uartInterrupt+0x8c>)
1a0032ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a0032ce:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
1a0032d2:	f3bf 8f6f 	isb	sy
1a0032d6:	4770      	bx	lr
1a0032d8:	1a0040ac 	.word	0x1a0040ac
1a0032dc:	e000e100 	.word	0xe000e100
1a0032e0:	e000ecfc 	.word	0xe000ecfc

1a0032e4 <uartRxRead>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
}
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a0032e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0032e8:	0080      	lsls	r0, r0, #2
1a0032ea:	4b02      	ldr	r3, [pc, #8]	; (1a0032f4 <uartRxRead+0x10>)
1a0032ec:	581b      	ldr	r3, [r3, r0]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0032ee:	6818      	ldr	r0, [r3, #0]
}
1a0032f0:	b2c0      	uxtb	r0, r0
1a0032f2:	4770      	bx	lr
1a0032f4:	1a0040a4 	.word	0x1a0040a4

1a0032f8 <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0032f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0032fc:	0080      	lsls	r0, r0, #2
1a0032fe:	4b02      	ldr	r3, [pc, #8]	; (1a003308 <uartTxWrite+0x10>)
1a003300:	581b      	ldr	r3, [r3, r0]
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a003302:	6019      	str	r1, [r3, #0]
1a003304:	4770      	bx	lr
1a003306:	bf00      	nop
1a003308:	1a0040a4 	.word	0x1a0040a4

1a00330c <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a00330c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003310:	4607      	mov	r7, r0
1a003312:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a003314:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1a003384 <uartInit+0x78>
1a003318:	0044      	lsls	r4, r0, #1
1a00331a:	1823      	adds	r3, r4, r0
1a00331c:	009b      	lsls	r3, r3, #2
1a00331e:	eb08 0503 	add.w	r5, r8, r3
1a003322:	f858 6003 	ldr.w	r6, [r8, r3]
1a003326:	4630      	mov	r0, r6
1a003328:	f7ff fb10 	bl	1a00294c <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a00332c:	4630      	mov	r0, r6
1a00332e:	4649      	mov	r1, r9
1a003330:	f7ff fb36 	bl	1a0029a0 <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a003334:	2307      	movs	r3, #7
1a003336:	60b3      	str	r3, [r6, #8]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003338:	6833      	ldr	r3, [r6, #0]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a00333a:	2301      	movs	r3, #1
1a00333c:	65f3      	str	r3, [r6, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a00333e:	7929      	ldrb	r1, [r5, #4]
1a003340:	796b      	ldrb	r3, [r5, #5]
1a003342:	79aa      	ldrb	r2, [r5, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a003344:	f042 0218 	orr.w	r2, r2, #24
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003348:	480c      	ldr	r0, [pc, #48]	; (1a00337c <uartInit+0x70>)
1a00334a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00334e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a003352:	79ee      	ldrb	r6, [r5, #7]
1a003354:	7a2a      	ldrb	r2, [r5, #8]
1a003356:	7a69      	ldrb	r1, [r5, #9]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a003358:	f041 01d0 	orr.w	r1, r1, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00335c:	eb02 1346 	add.w	r3, r2, r6, lsl #5
1a003360:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a003364:	2f01      	cmp	r7, #1
1a003366:	d107      	bne.n	1a003378 <uartInit+0x6c>
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a003368:	4a05      	ldr	r2, [pc, #20]	; (1a003380 <uartInit+0x74>)
1a00336a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a00336c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a003370:	64d3      	str	r3, [r2, #76]	; 0x4c
1a003372:	221a      	movs	r2, #26
1a003374:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
1a003378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00337c:	40086000 	.word	0x40086000
1a003380:	40081000 	.word	0x40081000
1a003384:	1a0040a4 	.word	0x1a0040a4

1a003388 <UART3_IRQHandler>:
}
#endif
// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a003388:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a00338a:	2005      	movs	r0, #5
1a00338c:	f7ff ff16 	bl	1a0031bc <uartProcessIRQ>
1a003390:	bd08      	pop	{r3, pc}
1a003392:	bf00      	nop

1a003394 <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a003394:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a003396:	4907      	ldr	r1, [pc, #28]	; (1a0033b4 <tickerCallback+0x20>)
1a003398:	e9d1 2300 	ldrd	r2, r3, [r1]
1a00339c:	3201      	adds	r2, #1
1a00339e:	f143 0300 	adc.w	r3, r3, #0
1a0033a2:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0033a6:	4b04      	ldr	r3, [pc, #16]	; (1a0033b8 <tickerCallback+0x24>)
1a0033a8:	681b      	ldr	r3, [r3, #0]
1a0033aa:	b113      	cbz	r3, 1a0033b2 <tickerCallback+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a0033ac:	4a03      	ldr	r2, [pc, #12]	; (1a0033bc <tickerCallback+0x28>)
1a0033ae:	6810      	ldr	r0, [r2, #0]
1a0033b0:	4798      	blx	r3
1a0033b2:	bd08      	pop	{r3, pc}
1a0033b4:	10004030 	.word	0x10004030
1a0033b8:	10003ffc 	.word	0x10003ffc
1a0033bc:	10004038 	.word	0x10004038

1a0033c0 <tickInit>:

void tickerCallback( void );

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a0033c0:	b510      	push	{r4, lr}
1a0033c2:	b082      	sub	sp, #8
1a0033c4:	4601      	mov	r1, r0
      }
      return ret_val;
   #else
      #ifdef USE_FREERTOS
         static StaticTimer_t tickerObject;
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a0033c6:	4b0e      	ldr	r3, [pc, #56]	; (1a003400 <tickInit+0x40>)
1a0033c8:	9300      	str	r3, [sp, #0]
1a0033ca:	4b0e      	ldr	r3, [pc, #56]	; (1a003404 <tickInit+0x44>)
1a0033cc:	9301      	str	r3, [sp, #4]
1a0033ce:	480e      	ldr	r0, [pc, #56]	; (1a003408 <tickInit+0x48>)
1a0033d0:	2201      	movs	r2, #1
1a0033d2:	2300      	movs	r3, #0
1a0033d4:	f7fe fed4 	bl	1a002180 <xTimerCreateStatic>
                                               pdTRUE,
                                               (void * const) (0),
                                               (TimerCallbackFunction_t)(tickerCallback),
                                               &tickerObject 
                                             );
         if (h == NULL)
1a0033d8:	b170      	cbz	r0, 1a0033f8 <tickInit+0x38>
1a0033da:	4604      	mov	r4, r0
            return 0;
         return xTimerStart(h, 0) == pdPASS;
1a0033dc:	f7fe fb0c 	bl	1a0019f8 <xTaskGetTickCount>
1a0033e0:	4602      	mov	r2, r0
1a0033e2:	2300      	movs	r3, #0
1a0033e4:	9300      	str	r3, [sp, #0]
1a0033e6:	4620      	mov	r0, r4
1a0033e8:	2101      	movs	r1, #1
1a0033ea:	f7fe fef1 	bl	1a0021d0 <xTimerGenericCommand>
1a0033ee:	2801      	cmp	r0, #1
1a0033f0:	bf14      	ite	ne
1a0033f2:	2000      	movne	r0, #0
1a0033f4:	2001      	moveq	r0, #1
1a0033f6:	e000      	b.n	1a0033fa <tickInit+0x3a>
                                               (void * const) (0),
                                               (TimerCallbackFunction_t)(tickerCallback),
                                               &tickerObject 
                                             );
         if (h == NULL)
            return 0;
1a0033f8:	2000      	movs	r0, #0
      #else
         #warning "Unknown RTOS. Ticker disabled"
            return 0;
      #endif
   #endif
}
1a0033fa:	b002      	add	sp, #8
1a0033fc:	bd10      	pop	{r4, pc}
1a0033fe:	bf00      	nop
1a003400:	1a003395 	.word	0x1a003395
1a003404:	10004000 	.word	0x10004000
1a003408:	1a0040ec 	.word	0x1a0040ec

1a00340c <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a00340c:	e7fe      	b.n	1a00340c <errorOcurred>
1a00340e:	bf00      	nop

1a003410 <doNothing>:
}

static void doNothing( void* ptr )
{
1a003410:	4770      	bx	lr
1a003412:	bf00      	nop

1a003414 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a003414:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003416:	2400      	movs	r4, #0
1a003418:	e013      	b.n	1a003442 <TIMER0_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00341a:	4b0b      	ldr	r3, [pc, #44]	; (1a003448 <TIMER0_IRQHandler+0x34>)
1a00341c:	681a      	ldr	r2, [r3, #0]
1a00341e:	f004 010f 	and.w	r1, r4, #15
1a003422:	2301      	movs	r3, #1
1a003424:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a003426:	421a      	tst	r2, r3
1a003428:	d009      	beq.n	1a00343e <TIMER0_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00342a:	4b08      	ldr	r3, [pc, #32]	; (1a00344c <TIMER0_IRQHandler+0x38>)
1a00342c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a003430:	2000      	movs	r0, #0
1a003432:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003434:	b262      	sxtb	r2, r4
1a003436:	2301      	movs	r3, #1
1a003438:	4093      	lsls	r3, r2
1a00343a:	4a03      	ldr	r2, [pc, #12]	; (1a003448 <TIMER0_IRQHandler+0x34>)
1a00343c:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00343e:	3401      	adds	r4, #1
1a003440:	b2e4      	uxtb	r4, r4
void TIMER0_IRQHandler(void)
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003442:	2c03      	cmp	r4, #3
1a003444:	d9e9      	bls.n	1a00341a <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a003446:	bd10      	pop	{r4, pc}
1a003448:	40084000 	.word	0x40084000
1a00344c:	1000011c 	.word	0x1000011c

1a003450 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a003450:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003452:	2400      	movs	r4, #0
1a003454:	e014      	b.n	1a003480 <TIMER1_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003456:	4b0c      	ldr	r3, [pc, #48]	; (1a003488 <TIMER1_IRQHandler+0x38>)
1a003458:	681a      	ldr	r2, [r3, #0]
1a00345a:	f004 010f 	and.w	r1, r4, #15
1a00345e:	2301      	movs	r3, #1
1a003460:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a003462:	421a      	tst	r2, r3
1a003464:	d00a      	beq.n	1a00347c <TIMER1_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a003466:	1d23      	adds	r3, r4, #4
1a003468:	4a08      	ldr	r2, [pc, #32]	; (1a00348c <TIMER1_IRQHandler+0x3c>)
1a00346a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00346e:	2000      	movs	r0, #0
1a003470:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a003472:	b262      	sxtb	r2, r4
1a003474:	2301      	movs	r3, #1
1a003476:	4093      	lsls	r3, r2
1a003478:	4a03      	ldr	r2, [pc, #12]	; (1a003488 <TIMER1_IRQHandler+0x38>)
1a00347a:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00347c:	3401      	adds	r4, #1
1a00347e:	b2e4      	uxtb	r4, r4
void TIMER1_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003480:	2c03      	cmp	r4, #3
1a003482:	d9e8      	bls.n	1a003456 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a003484:	bd10      	pop	{r4, pc}
1a003486:	bf00      	nop
1a003488:	40085000 	.word	0x40085000
1a00348c:	1000011c 	.word	0x1000011c

1a003490 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a003490:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003492:	2400      	movs	r4, #0
1a003494:	e015      	b.n	1a0034c2 <TIMER2_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a003496:	4b0c      	ldr	r3, [pc, #48]	; (1a0034c8 <TIMER2_IRQHandler+0x38>)
1a003498:	681a      	ldr	r2, [r3, #0]
1a00349a:	f004 010f 	and.w	r1, r4, #15
1a00349e:	2301      	movs	r3, #1
1a0034a0:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a0034a2:	421a      	tst	r2, r3
1a0034a4:	d00b      	beq.n	1a0034be <TIMER2_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0034a6:	f104 0308 	add.w	r3, r4, #8
1a0034aa:	4a08      	ldr	r2, [pc, #32]	; (1a0034cc <TIMER2_IRQHandler+0x3c>)
1a0034ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0034b0:	2000      	movs	r0, #0
1a0034b2:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0034b4:	b262      	sxtb	r2, r4
1a0034b6:	2301      	movs	r3, #1
1a0034b8:	4093      	lsls	r3, r2
1a0034ba:	4a03      	ldr	r2, [pc, #12]	; (1a0034c8 <TIMER2_IRQHandler+0x38>)
1a0034bc:	6013      	str	r3, [r2, #0]
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0034be:	3401      	adds	r4, #1
1a0034c0:	b2e4      	uxtb	r4, r4

void TIMER2_IRQHandler( void )
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0034c2:	2c03      	cmp	r4, #3
1a0034c4:	d9e7      	bls.n	1a003496 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0034c6:	bd10      	pop	{r4, pc}
1a0034c8:	400c3000 	.word	0x400c3000
1a0034cc:	1000011c 	.word	0x1000011c

1a0034d0 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0034d0:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0034d2:	2400      	movs	r4, #0
1a0034d4:	e015      	b.n	1a003502 <TIMER3_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0034d6:	4b0c      	ldr	r3, [pc, #48]	; (1a003508 <TIMER3_IRQHandler+0x38>)
1a0034d8:	681a      	ldr	r2, [r3, #0]
1a0034da:	f004 010f 	and.w	r1, r4, #15
1a0034de:	2301      	movs	r3, #1
1a0034e0:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0034e2:	421a      	tst	r2, r3
1a0034e4:	d00b      	beq.n	1a0034fe <TIMER3_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0034e6:	f104 030c 	add.w	r3, r4, #12
1a0034ea:	4a08      	ldr	r2, [pc, #32]	; (1a00350c <TIMER3_IRQHandler+0x3c>)
1a0034ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0034f0:	2000      	movs	r0, #0
1a0034f2:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0034f4:	b262      	sxtb	r2, r4
1a0034f6:	2301      	movs	r3, #1
1a0034f8:	4093      	lsls	r3, r2
1a0034fa:	4a03      	ldr	r2, [pc, #12]	; (1a003508 <TIMER3_IRQHandler+0x38>)
1a0034fc:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0034fe:	3401      	adds	r4, #1
1a003500:	b2e4      	uxtb	r4, r4
void TIMER3_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a003502:	2c03      	cmp	r4, #3
1a003504:	d9e7      	bls.n	1a0034d6 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a003506:	bd10      	pop	{r4, pc}
1a003508:	400c4000 	.word	0x400c4000
1a00350c:	1000011c 	.word	0x1000011c

1a003510 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a003510:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a003512:	4d09      	ldr	r5, [pc, #36]	; (1a003538 <gpioObtainPinInit+0x28>)
1a003514:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a003518:	182c      	adds	r4, r5, r0
1a00351a:	5c28      	ldrb	r0, [r5, r0]
1a00351c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00351e:	7861      	ldrb	r1, [r4, #1]
1a003520:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a003522:	78a2      	ldrb	r2, [r4, #2]
1a003524:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a003526:	78e2      	ldrb	r2, [r4, #3]
1a003528:	9b02      	ldr	r3, [sp, #8]
1a00352a:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00352c:	7922      	ldrb	r2, [r4, #4]
1a00352e:	9b03      	ldr	r3, [sp, #12]
1a003530:	701a      	strb	r2, [r3, #0]
}
1a003532:	bc30      	pop	{r4, r5}
1a003534:	4770      	bx	lr
1a003536:	bf00      	nop
1a003538:	1a0040f8 	.word	0x1a0040f8

1a00353c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a00353c:	b570      	push	{r4, r5, r6, lr}
1a00353e:	b084      	sub	sp, #16
1a003540:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a003542:	2300      	movs	r3, #0
1a003544:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a003548:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00354c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a003550:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a003554:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a003558:	ab03      	add	r3, sp, #12
1a00355a:	9300      	str	r3, [sp, #0]
1a00355c:	f10d 030b 	add.w	r3, sp, #11
1a003560:	9301      	str	r3, [sp, #4]
1a003562:	f10d 010f 	add.w	r1, sp, #15
1a003566:	f10d 020e 	add.w	r2, sp, #14
1a00356a:	f10d 030d 	add.w	r3, sp, #13
1a00356e:	f7ff ffcf 	bl	1a003510 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a003572:	2c05      	cmp	r4, #5
1a003574:	f200 80a8 	bhi.w	1a0036c8 <gpioInit+0x18c>
1a003578:	e8df f004 	tbb	[pc, r4]
1a00357c:	46278408 	.word	0x46278408
1a003580:	0365      	.short	0x0365

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a003582:	4853      	ldr	r0, [pc, #332]	; (1a0036d0 <gpioInit+0x194>)
1a003584:	f7ff fd44 	bl	1a003010 <Chip_GPIO_Init>
/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{

   bool_t ret_val     = 1;
1a003588:	2001      	movs	r0, #1
   switch(config) {

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
      break;
1a00358a:	e09e      	b.n	1a0036ca <gpioInit+0x18e>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a00358c:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003590:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003594:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a003598:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00359c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0035a0:	494c      	ldr	r1, [pc, #304]	; (1a0036d4 <gpioInit+0x198>)
1a0035a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0035a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0035aa:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0035ae:	2001      	movs	r0, #1
1a0035b0:	fa00 f402 	lsl.w	r4, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0035b4:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a0035b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0035bc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0035c0:	ea22 0204 	bic.w	r2, r2, r4
1a0035c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0035c8:	e07f      	b.n	1a0036ca <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a0035ca:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0035ce:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0035d2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0035d6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0035da:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0035de:	493d      	ldr	r1, [pc, #244]	; (1a0036d4 <gpioInit+0x198>)
1a0035e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0035e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0035e8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0035ec:	2001      	movs	r0, #1
1a0035ee:	fa00 f402 	lsl.w	r4, r0, r2
1a0035f2:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a0035f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0035fa:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0035fe:	ea22 0204 	bic.w	r2, r2, r4
1a003602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a003606:	e060      	b.n	1a0036ca <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a003608:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00360c:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a003610:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a003614:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003618:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00361c:	492d      	ldr	r1, [pc, #180]	; (1a0036d4 <gpioInit+0x198>)
1a00361e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003622:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003626:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00362a:	2001      	movs	r0, #1
1a00362c:	fa00 f402 	lsl.w	r4, r0, r2
1a003630:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a003634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003638:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a00363c:	ea22 0204 	bic.w	r2, r2, r4
1a003640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a003644:	e041      	b.n	1a0036ca <gpioInit+0x18e>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a003646:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00364a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00364e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a003652:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003656:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00365a:	491e      	ldr	r1, [pc, #120]	; (1a0036d4 <gpioInit+0x198>)
1a00365c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a003660:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a003664:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a003668:	2001      	movs	r0, #1
1a00366a:	fa00 f402 	lsl.w	r4, r0, r2
1a00366e:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a003672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a003676:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a00367a:	ea22 0204 	bic.w	r2, r2, r4
1a00367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a003682:	e022      	b.n	1a0036ca <gpioInit+0x18e>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a003684:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a003688:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00368c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a003690:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003694:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a003698:	490e      	ldr	r1, [pc, #56]	; (1a0036d4 <gpioInit+0x198>)
1a00369a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a00369e:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a0036a2:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a0036a6:	b25a      	sxtb	r2, r3
1a0036a8:	2001      	movs	r0, #1
1a0036aa:	fa00 f602 	lsl.w	r6, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a0036ae:	4a08      	ldr	r2, [pc, #32]	; (1a0036d0 <gpioInit+0x194>)
1a0036b0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0036b4:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a0036b8:	4331      	orrs	r1, r6
1a0036ba:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a0036be:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0036c2:	2100      	movs	r1, #0
1a0036c4:	54d1      	strb	r1, [r2, r3]
1a0036c6:	e000      	b.n	1a0036ca <gpioInit+0x18e>
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

   default:
      ret_val = 0;
1a0036c8:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a0036ca:	b004      	add	sp, #16
1a0036cc:	bd70      	pop	{r4, r5, r6, pc}
1a0036ce:	bf00      	nop
1a0036d0:	400f4000 	.word	0x400f4000
1a0036d4:	40086000 	.word	0x40086000

1a0036d8 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a0036d8:	b510      	push	{r4, lr}
1a0036da:	b084      	sub	sp, #16
1a0036dc:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0036de:	2300      	movs	r3, #0
1a0036e0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0036e4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0036e8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0036ec:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0036f0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0036f4:	ab03      	add	r3, sp, #12
1a0036f6:	9300      	str	r3, [sp, #0]
1a0036f8:	f10d 030b 	add.w	r3, sp, #11
1a0036fc:	9301      	str	r3, [sp, #4]
1a0036fe:	f10d 010f 	add.w	r1, sp, #15
1a003702:	f10d 020e 	add.w	r2, sp, #14
1a003706:	f10d 030d 	add.w	r3, sp, #13
1a00370a:	f7ff ff01 	bl	1a003510 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00370e:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a003712:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a003716:	3400      	adds	r4, #0
1a003718:	bf18      	it	ne
1a00371a:	2401      	movne	r4, #1
1a00371c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a003720:	4a02      	ldr	r2, [pc, #8]	; (1a00372c <gpioWrite+0x54>)
1a003722:	54d4      	strb	r4, [r2, r3]

   return ret_val;
}
1a003724:	2001      	movs	r0, #1
1a003726:	b004      	add	sp, #16
1a003728:	bd10      	pop	{r4, pc}
1a00372a:	bf00      	nop
1a00372c:	400f4000 	.word	0x400f4000

1a003730 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a003730:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a003732:	4b04      	ldr	r3, [pc, #16]	; (1a003744 <USB0_IRQHandler+0x14>)
1a003734:	681b      	ldr	r3, [r3, #0]
1a003736:	681b      	ldr	r3, [r3, #0]
1a003738:	68db      	ldr	r3, [r3, #12]
1a00373a:	4a03      	ldr	r2, [pc, #12]	; (1a003748 <USB0_IRQHandler+0x18>)
1a00373c:	6810      	ldr	r0, [r2, #0]
1a00373e:	4798      	blx	r3
1a003740:	bd08      	pop	{r3, pc}
1a003742:	bf00      	nop
1a003744:	10004438 	.word	0x10004438
1a003748:	1000403c 	.word	0x1000403c

1a00374c <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a00374c:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00374e:	f7ff fc55 	bl	1a002ffc <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a003752:	4b3a      	ldr	r3, [pc, #232]	; (1a00383c <boardInit+0xf0>)
1a003754:	6818      	ldr	r0, [r3, #0]
1a003756:	f7ff fd23 	bl	1a0031a0 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a00375a:	2001      	movs	r0, #1
1a00375c:	2100      	movs	r1, #0
1a00375e:	f7ff fe2f 	bl	1a0033c0 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a003762:	2000      	movs	r0, #0
1a003764:	2105      	movs	r1, #5
1a003766:	f7ff fee9 	bl	1a00353c <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a00376a:	2024      	movs	r0, #36	; 0x24
1a00376c:	2100      	movs	r1, #0
1a00376e:	f7ff fee5 	bl	1a00353c <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a003772:	2025      	movs	r0, #37	; 0x25
1a003774:	2100      	movs	r1, #0
1a003776:	f7ff fee1 	bl	1a00353c <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a00377a:	2026      	movs	r0, #38	; 0x26
1a00377c:	2100      	movs	r1, #0
1a00377e:	f7ff fedd 	bl	1a00353c <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a003782:	2027      	movs	r0, #39	; 0x27
1a003784:	2100      	movs	r1, #0
1a003786:	f7ff fed9 	bl	1a00353c <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a00378a:	2028      	movs	r0, #40	; 0x28
1a00378c:	2101      	movs	r1, #1
1a00378e:	f7ff fed5 	bl	1a00353c <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a003792:	2029      	movs	r0, #41	; 0x29
1a003794:	2101      	movs	r1, #1
1a003796:	f7ff fed1 	bl	1a00353c <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a00379a:	202a      	movs	r0, #42	; 0x2a
1a00379c:	2101      	movs	r1, #1
1a00379e:	f7ff fecd 	bl	1a00353c <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a0037a2:	202b      	movs	r0, #43	; 0x2b
1a0037a4:	2101      	movs	r1, #1
1a0037a6:	f7ff fec9 	bl	1a00353c <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a0037aa:	202c      	movs	r0, #44	; 0x2c
1a0037ac:	2101      	movs	r1, #1
1a0037ae:	f7ff fec5 	bl	1a00353c <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a0037b2:	202d      	movs	r0, #45	; 0x2d
1a0037b4:	2101      	movs	r1, #1
1a0037b6:	f7ff fec1 	bl	1a00353c <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a0037ba:	202e      	movs	r0, #46	; 0x2e
1a0037bc:	2100      	movs	r1, #0
1a0037be:	f7ff febd 	bl	1a00353c <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a0037c2:	202f      	movs	r0, #47	; 0x2f
1a0037c4:	2100      	movs	r1, #0
1a0037c6:	f7ff feb9 	bl	1a00353c <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a0037ca:	2030      	movs	r0, #48	; 0x30
1a0037cc:	2100      	movs	r1, #0
1a0037ce:	f7ff feb5 	bl	1a00353c <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a0037d2:	2031      	movs	r0, #49	; 0x31
1a0037d4:	2100      	movs	r1, #0
1a0037d6:	f7ff feb1 	bl	1a00353c <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a0037da:	2032      	movs	r0, #50	; 0x32
1a0037dc:	2100      	movs	r1, #0
1a0037de:	f7ff fead 	bl	1a00353c <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a0037e2:	2033      	movs	r0, #51	; 0x33
1a0037e4:	2100      	movs	r1, #0
1a0037e6:	f7ff fea9 	bl	1a00353c <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a0037ea:	2034      	movs	r0, #52	; 0x34
1a0037ec:	2100      	movs	r1, #0
1a0037ee:	f7ff fea5 	bl	1a00353c <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a0037f2:	2035      	movs	r0, #53	; 0x35
1a0037f4:	2100      	movs	r1, #0
1a0037f6:	f7ff fea1 	bl	1a00353c <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a0037fa:	2036      	movs	r0, #54	; 0x36
1a0037fc:	2101      	movs	r1, #1
1a0037fe:	f7ff fe9d 	bl	1a00353c <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a003802:	2037      	movs	r0, #55	; 0x37
1a003804:	2101      	movs	r1, #1
1a003806:	f7ff fe99 	bl	1a00353c <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a00380a:	2038      	movs	r0, #56	; 0x38
1a00380c:	2101      	movs	r1, #1
1a00380e:	f7ff fe95 	bl	1a00353c <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a003812:	2039      	movs	r0, #57	; 0x39
1a003814:	2101      	movs	r1, #1
1a003816:	f7ff fe91 	bl	1a00353c <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a00381a:	203a      	movs	r0, #58	; 0x3a
1a00381c:	2101      	movs	r1, #1
1a00381e:	f7ff fe8d 	bl	1a00353c <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a003822:	203b      	movs	r0, #59	; 0x3b
1a003824:	2101      	movs	r1, #1
1a003826:	f7ff fe89 	bl	1a00353c <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a00382a:	203c      	movs	r0, #60	; 0x3c
1a00382c:	2101      	movs	r1, #1
1a00382e:	f7ff fe85 	bl	1a00353c <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a003832:	203d      	movs	r0, #61	; 0x3d
1a003834:	2101      	movs	r1, #1
1a003836:	f7ff fe81 	bl	1a00353c <gpioInit>
1a00383a:	bd08      	pop	{r3, pc}
1a00383c:	10004434 	.word	0x10004434

1a003840 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a003840:	2301      	movs	r3, #1
1a003842:	4083      	lsls	r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a003844:	4a01      	ldr	r2, [pc, #4]	; (1a00384c <clearInterrupt+0xc>)
1a003846:	6253      	str	r3, [r2, #36]	; 0x24
1a003848:	4770      	bx	lr
1a00384a:	bf00      	nop
1a00384c:	40087000 	.word	0x40087000

1a003850 <serveInterrupt>:
}

static void serveInterrupt(uint8_t irqChannel)
{
1a003850:	b570      	push	{r4, r5, r6, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a003852:	4b13      	ldr	r3, [pc, #76]	; (1a0038a0 <serveInterrupt+0x50>)
1a003854:	5c1b      	ldrb	r3, [r3, r0]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a003856:	4a13      	ldr	r2, [pc, #76]	; (1a0038a4 <serveInterrupt+0x54>)
1a003858:	69d2      	ldr	r2, [r2, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a00385a:	2401      	movs	r4, #1
1a00385c:	4084      	lsls	r4, r0
1a00385e:	4214      	tst	r4, r2
1a003860:	d00a      	beq.n	1a003878 <serveInterrupt+0x28>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a003862:	4a11      	ldr	r2, [pc, #68]	; (1a0038a8 <serveInterrupt+0x58>)
1a003864:	6892      	ldr	r2, [r2, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a003866:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a00386a:	00db      	lsls	r3, r3, #3
1a00386c:	490f      	ldr	r1, [pc, #60]	; (1a0038ac <serveInterrupt+0x5c>)
1a00386e:	440b      	add	r3, r1
1a003870:	605a      	str	r2, [r3, #4]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a003872:	4b0c      	ldr	r3, [pc, #48]	; (1a0038a4 <serveInterrupt+0x54>)
1a003874:	61dc      	str	r4, [r3, #28]
1a003876:	e00f      	b.n	1a003898 <serveInterrupt+0x48>
1a003878:	4a0b      	ldr	r2, [pc, #44]	; (1a0038a8 <serveInterrupt+0x58>)
1a00387a:	6891      	ldr	r1, [r2, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00387c:	4d0b      	ldr	r5, [pc, #44]	; (1a0038ac <serveInterrupt+0x5c>)
1a00387e:	005e      	lsls	r6, r3, #1
1a003880:	18f2      	adds	r2, r6, r3
1a003882:	00d2      	lsls	r2, r2, #3
1a003884:	442a      	add	r2, r5
1a003886:	6091      	str	r1, [r2, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a003888:	6852      	ldr	r2, [r2, #4]
1a00388a:	1a89      	subs	r1, r1, r2
1a00388c:	4433      	add	r3, r6
1a00388e:	00db      	lsls	r3, r3, #3
1a003890:	442b      	add	r3, r5
1a003892:	60d9      	str	r1, [r3, #12]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a003894:	4b03      	ldr	r3, [pc, #12]	; (1a0038a4 <serveInterrupt+0x54>)
1a003896:	621c      	str	r4, [r3, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a003898:	f7ff ffd2 	bl	1a003840 <clearInterrupt>
1a00389c:	bd70      	pop	{r4, r5, r6, pc}
1a00389e:	bf00      	nop
1a0038a0:	1a004230 	.word	0x1a004230
1a0038a4:	40087000 	.word	0x40087000
1a0038a8:	40084000 	.word	0x40084000
1a0038ac:	1000015c 	.word	0x1000015c

1a0038b0 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a0038b0:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0038b2:	2000      	movs	r0, #0
1a0038b4:	f7ff ffcc 	bl	1a003850 <serveInterrupt>
1a0038b8:	bd08      	pop	{r3, pc}
1a0038ba:	bf00      	nop

1a0038bc <GPIO1_IRQHandler>:
}

void GPIO1_IRQHandler(void)
{
1a0038bc:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0038be:	2001      	movs	r0, #1
1a0038c0:	f7ff ffc6 	bl	1a003850 <serveInterrupt>
1a0038c4:	bd08      	pop	{r3, pc}
1a0038c6:	bf00      	nop

1a0038c8 <GPIO2_IRQHandler>:
}

void GPIO2_IRQHandler(void)
{
1a0038c8:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0038ca:	2002      	movs	r0, #2
1a0038cc:	f7ff ffc0 	bl	1a003850 <serveInterrupt>
1a0038d0:	bd08      	pop	{r3, pc}
1a0038d2:	bf00      	nop

1a0038d4 <__aeabi_uldivmod>:
1a0038d4:	b953      	cbnz	r3, 1a0038ec <__aeabi_uldivmod+0x18>
1a0038d6:	b94a      	cbnz	r2, 1a0038ec <__aeabi_uldivmod+0x18>
1a0038d8:	2900      	cmp	r1, #0
1a0038da:	bf08      	it	eq
1a0038dc:	2800      	cmpeq	r0, #0
1a0038de:	bf1c      	itt	ne
1a0038e0:	f04f 31ff 	movne.w	r1, #4294967295
1a0038e4:	f04f 30ff 	movne.w	r0, #4294967295
1a0038e8:	f000 b83c 	b.w	1a003964 <__aeabi_idiv0>
1a0038ec:	b082      	sub	sp, #8
1a0038ee:	46ec      	mov	ip, sp
1a0038f0:	e92d 5000 	stmdb	sp!, {ip, lr}
1a0038f4:	f000 f81e 	bl	1a003934 <__gnu_uldivmod_helper>
1a0038f8:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0038fc:	b002      	add	sp, #8
1a0038fe:	bc0c      	pop	{r2, r3}
1a003900:	4770      	bx	lr
1a003902:	bf00      	nop

1a003904 <__gnu_ldivmod_helper>:
1a003904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003908:	9c06      	ldr	r4, [sp, #24]
1a00390a:	4615      	mov	r5, r2
1a00390c:	4606      	mov	r6, r0
1a00390e:	460f      	mov	r7, r1
1a003910:	4698      	mov	r8, r3
1a003912:	f000 f829 	bl	1a003968 <__divdi3>
1a003916:	fb05 f301 	mul.w	r3, r5, r1
1a00391a:	fb00 3808 	mla	r8, r0, r8, r3
1a00391e:	fba5 2300 	umull	r2, r3, r5, r0
1a003922:	1ab2      	subs	r2, r6, r2
1a003924:	4443      	add	r3, r8
1a003926:	eb67 0303 	sbc.w	r3, r7, r3
1a00392a:	e9c4 2300 	strd	r2, r3, [r4]
1a00392e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003932:	bf00      	nop

1a003934 <__gnu_uldivmod_helper>:
1a003934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003938:	9c06      	ldr	r4, [sp, #24]
1a00393a:	4690      	mov	r8, r2
1a00393c:	4606      	mov	r6, r0
1a00393e:	460f      	mov	r7, r1
1a003940:	461d      	mov	r5, r3
1a003942:	f000 f95f 	bl	1a003c04 <__udivdi3>
1a003946:	fb00 f505 	mul.w	r5, r0, r5
1a00394a:	fba0 2308 	umull	r2, r3, r0, r8
1a00394e:	fb08 5501 	mla	r5, r8, r1, r5
1a003952:	1ab2      	subs	r2, r6, r2
1a003954:	442b      	add	r3, r5
1a003956:	eb67 0303 	sbc.w	r3, r7, r3
1a00395a:	e9c4 2300 	strd	r2, r3, [r4]
1a00395e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003962:	bf00      	nop

1a003964 <__aeabi_idiv0>:
1a003964:	4770      	bx	lr
1a003966:	bf00      	nop

1a003968 <__divdi3>:
1a003968:	2900      	cmp	r1, #0
1a00396a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00396e:	f2c0 80a6 	blt.w	1a003abe <__divdi3+0x156>
1a003972:	2600      	movs	r6, #0
1a003974:	2b00      	cmp	r3, #0
1a003976:	f2c0 809c 	blt.w	1a003ab2 <__divdi3+0x14a>
1a00397a:	4688      	mov	r8, r1
1a00397c:	4694      	mov	ip, r2
1a00397e:	469e      	mov	lr, r3
1a003980:	4615      	mov	r5, r2
1a003982:	4604      	mov	r4, r0
1a003984:	460f      	mov	r7, r1
1a003986:	2b00      	cmp	r3, #0
1a003988:	d13d      	bne.n	1a003a06 <__divdi3+0x9e>
1a00398a:	428a      	cmp	r2, r1
1a00398c:	d959      	bls.n	1a003a42 <__divdi3+0xda>
1a00398e:	fab2 f382 	clz	r3, r2
1a003992:	b13b      	cbz	r3, 1a0039a4 <__divdi3+0x3c>
1a003994:	f1c3 0220 	rsb	r2, r3, #32
1a003998:	409f      	lsls	r7, r3
1a00399a:	fa20 f202 	lsr.w	r2, r0, r2
1a00399e:	409d      	lsls	r5, r3
1a0039a0:	4317      	orrs	r7, r2
1a0039a2:	409c      	lsls	r4, r3
1a0039a4:	0c29      	lsrs	r1, r5, #16
1a0039a6:	0c22      	lsrs	r2, r4, #16
1a0039a8:	fbb7 fef1 	udiv	lr, r7, r1
1a0039ac:	b2a8      	uxth	r0, r5
1a0039ae:	fb01 771e 	mls	r7, r1, lr, r7
1a0039b2:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a0039b6:	fb00 f30e 	mul.w	r3, r0, lr
1a0039ba:	42bb      	cmp	r3, r7
1a0039bc:	d90a      	bls.n	1a0039d4 <__divdi3+0x6c>
1a0039be:	197f      	adds	r7, r7, r5
1a0039c0:	f10e 32ff 	add.w	r2, lr, #4294967295
1a0039c4:	f080 8105 	bcs.w	1a003bd2 <__divdi3+0x26a>
1a0039c8:	42bb      	cmp	r3, r7
1a0039ca:	f240 8102 	bls.w	1a003bd2 <__divdi3+0x26a>
1a0039ce:	f1ae 0e02 	sub.w	lr, lr, #2
1a0039d2:	442f      	add	r7, r5
1a0039d4:	1aff      	subs	r7, r7, r3
1a0039d6:	b2a4      	uxth	r4, r4
1a0039d8:	fbb7 f3f1 	udiv	r3, r7, r1
1a0039dc:	fb01 7713 	mls	r7, r1, r3, r7
1a0039e0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a0039e4:	fb00 f003 	mul.w	r0, r0, r3
1a0039e8:	42b8      	cmp	r0, r7
1a0039ea:	d908      	bls.n	1a0039fe <__divdi3+0x96>
1a0039ec:	197f      	adds	r7, r7, r5
1a0039ee:	f103 32ff 	add.w	r2, r3, #4294967295
1a0039f2:	f080 80f0 	bcs.w	1a003bd6 <__divdi3+0x26e>
1a0039f6:	42b8      	cmp	r0, r7
1a0039f8:	f240 80ed 	bls.w	1a003bd6 <__divdi3+0x26e>
1a0039fc:	3b02      	subs	r3, #2
1a0039fe:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a003a02:	2200      	movs	r2, #0
1a003a04:	e003      	b.n	1a003a0e <__divdi3+0xa6>
1a003a06:	428b      	cmp	r3, r1
1a003a08:	d90f      	bls.n	1a003a2a <__divdi3+0xc2>
1a003a0a:	2200      	movs	r2, #0
1a003a0c:	4613      	mov	r3, r2
1a003a0e:	1c34      	adds	r4, r6, #0
1a003a10:	bf18      	it	ne
1a003a12:	2401      	movne	r4, #1
1a003a14:	4260      	negs	r0, r4
1a003a16:	f04f 0500 	mov.w	r5, #0
1a003a1a:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a003a1e:	4058      	eors	r0, r3
1a003a20:	4051      	eors	r1, r2
1a003a22:	1900      	adds	r0, r0, r4
1a003a24:	4169      	adcs	r1, r5
1a003a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a003a2a:	fab3 f283 	clz	r2, r3
1a003a2e:	2a00      	cmp	r2, #0
1a003a30:	f040 8086 	bne.w	1a003b40 <__divdi3+0x1d8>
1a003a34:	428b      	cmp	r3, r1
1a003a36:	d302      	bcc.n	1a003a3e <__divdi3+0xd6>
1a003a38:	4584      	cmp	ip, r0
1a003a3a:	f200 80db 	bhi.w	1a003bf4 <__divdi3+0x28c>
1a003a3e:	2301      	movs	r3, #1
1a003a40:	e7e5      	b.n	1a003a0e <__divdi3+0xa6>
1a003a42:	b912      	cbnz	r2, 1a003a4a <__divdi3+0xe2>
1a003a44:	2301      	movs	r3, #1
1a003a46:	fbb3 f5f2 	udiv	r5, r3, r2
1a003a4a:	fab5 f085 	clz	r0, r5
1a003a4e:	2800      	cmp	r0, #0
1a003a50:	d13b      	bne.n	1a003aca <__divdi3+0x162>
1a003a52:	1b78      	subs	r0, r7, r5
1a003a54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003a58:	fa1f fc85 	uxth.w	ip, r5
1a003a5c:	2201      	movs	r2, #1
1a003a5e:	fbb0 f8fe 	udiv	r8, r0, lr
1a003a62:	0c21      	lsrs	r1, r4, #16
1a003a64:	fb0e 0718 	mls	r7, lr, r8, r0
1a003a68:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a003a6c:	fb0c f308 	mul.w	r3, ip, r8
1a003a70:	42bb      	cmp	r3, r7
1a003a72:	d907      	bls.n	1a003a84 <__divdi3+0x11c>
1a003a74:	197f      	adds	r7, r7, r5
1a003a76:	f108 31ff 	add.w	r1, r8, #4294967295
1a003a7a:	d202      	bcs.n	1a003a82 <__divdi3+0x11a>
1a003a7c:	42bb      	cmp	r3, r7
1a003a7e:	f200 80bd 	bhi.w	1a003bfc <__divdi3+0x294>
1a003a82:	4688      	mov	r8, r1
1a003a84:	1aff      	subs	r7, r7, r3
1a003a86:	b2a4      	uxth	r4, r4
1a003a88:	fbb7 f3fe 	udiv	r3, r7, lr
1a003a8c:	fb0e 7713 	mls	r7, lr, r3, r7
1a003a90:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a003a94:	fb0c fc03 	mul.w	ip, ip, r3
1a003a98:	45bc      	cmp	ip, r7
1a003a9a:	d907      	bls.n	1a003aac <__divdi3+0x144>
1a003a9c:	197f      	adds	r7, r7, r5
1a003a9e:	f103 31ff 	add.w	r1, r3, #4294967295
1a003aa2:	d202      	bcs.n	1a003aaa <__divdi3+0x142>
1a003aa4:	45bc      	cmp	ip, r7
1a003aa6:	f200 80a7 	bhi.w	1a003bf8 <__divdi3+0x290>
1a003aaa:	460b      	mov	r3, r1
1a003aac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003ab0:	e7ad      	b.n	1a003a0e <__divdi3+0xa6>
1a003ab2:	4252      	negs	r2, r2
1a003ab4:	ea6f 0606 	mvn.w	r6, r6
1a003ab8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a003abc:	e75d      	b.n	1a00397a <__divdi3+0x12>
1a003abe:	4240      	negs	r0, r0
1a003ac0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003ac4:	f04f 36ff 	mov.w	r6, #4294967295
1a003ac8:	e754      	b.n	1a003974 <__divdi3+0xc>
1a003aca:	f1c0 0220 	rsb	r2, r0, #32
1a003ace:	fa24 f102 	lsr.w	r1, r4, r2
1a003ad2:	fa07 f300 	lsl.w	r3, r7, r0
1a003ad6:	4085      	lsls	r5, r0
1a003ad8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003adc:	40d7      	lsrs	r7, r2
1a003ade:	4319      	orrs	r1, r3
1a003ae0:	fbb7 f2fe 	udiv	r2, r7, lr
1a003ae4:	0c0b      	lsrs	r3, r1, #16
1a003ae6:	fb0e 7712 	mls	r7, lr, r2, r7
1a003aea:	fa1f fc85 	uxth.w	ip, r5
1a003aee:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a003af2:	fb0c f702 	mul.w	r7, ip, r2
1a003af6:	429f      	cmp	r7, r3
1a003af8:	fa04 f400 	lsl.w	r4, r4, r0
1a003afc:	d907      	bls.n	1a003b0e <__divdi3+0x1a6>
1a003afe:	195b      	adds	r3, r3, r5
1a003b00:	f102 30ff 	add.w	r0, r2, #4294967295
1a003b04:	d274      	bcs.n	1a003bf0 <__divdi3+0x288>
1a003b06:	429f      	cmp	r7, r3
1a003b08:	d972      	bls.n	1a003bf0 <__divdi3+0x288>
1a003b0a:	3a02      	subs	r2, #2
1a003b0c:	442b      	add	r3, r5
1a003b0e:	1bdf      	subs	r7, r3, r7
1a003b10:	b289      	uxth	r1, r1
1a003b12:	fbb7 f8fe 	udiv	r8, r7, lr
1a003b16:	fb0e 7318 	mls	r3, lr, r8, r7
1a003b1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a003b1e:	fb0c f708 	mul.w	r7, ip, r8
1a003b22:	429f      	cmp	r7, r3
1a003b24:	d908      	bls.n	1a003b38 <__divdi3+0x1d0>
1a003b26:	195b      	adds	r3, r3, r5
1a003b28:	f108 31ff 	add.w	r1, r8, #4294967295
1a003b2c:	d25c      	bcs.n	1a003be8 <__divdi3+0x280>
1a003b2e:	429f      	cmp	r7, r3
1a003b30:	d95a      	bls.n	1a003be8 <__divdi3+0x280>
1a003b32:	f1a8 0802 	sub.w	r8, r8, #2
1a003b36:	442b      	add	r3, r5
1a003b38:	1bd8      	subs	r0, r3, r7
1a003b3a:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a003b3e:	e78e      	b.n	1a003a5e <__divdi3+0xf6>
1a003b40:	f1c2 0320 	rsb	r3, r2, #32
1a003b44:	fa2c f103 	lsr.w	r1, ip, r3
1a003b48:	fa0e fe02 	lsl.w	lr, lr, r2
1a003b4c:	fa20 f703 	lsr.w	r7, r0, r3
1a003b50:	ea41 0e0e 	orr.w	lr, r1, lr
1a003b54:	fa08 f002 	lsl.w	r0, r8, r2
1a003b58:	fa28 f103 	lsr.w	r1, r8, r3
1a003b5c:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a003b60:	4338      	orrs	r0, r7
1a003b62:	fbb1 f8f5 	udiv	r8, r1, r5
1a003b66:	0c03      	lsrs	r3, r0, #16
1a003b68:	fb05 1118 	mls	r1, r5, r8, r1
1a003b6c:	fa1f f78e 	uxth.w	r7, lr
1a003b70:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a003b74:	fb07 f308 	mul.w	r3, r7, r8
1a003b78:	428b      	cmp	r3, r1
1a003b7a:	fa0c fc02 	lsl.w	ip, ip, r2
1a003b7e:	d909      	bls.n	1a003b94 <__divdi3+0x22c>
1a003b80:	eb11 010e 	adds.w	r1, r1, lr
1a003b84:	f108 39ff 	add.w	r9, r8, #4294967295
1a003b88:	d230      	bcs.n	1a003bec <__divdi3+0x284>
1a003b8a:	428b      	cmp	r3, r1
1a003b8c:	d92e      	bls.n	1a003bec <__divdi3+0x284>
1a003b8e:	f1a8 0802 	sub.w	r8, r8, #2
1a003b92:	4471      	add	r1, lr
1a003b94:	1ac9      	subs	r1, r1, r3
1a003b96:	b280      	uxth	r0, r0
1a003b98:	fbb1 f3f5 	udiv	r3, r1, r5
1a003b9c:	fb05 1113 	mls	r1, r5, r3, r1
1a003ba0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a003ba4:	fb07 f703 	mul.w	r7, r7, r3
1a003ba8:	428f      	cmp	r7, r1
1a003baa:	d908      	bls.n	1a003bbe <__divdi3+0x256>
1a003bac:	eb11 010e 	adds.w	r1, r1, lr
1a003bb0:	f103 30ff 	add.w	r0, r3, #4294967295
1a003bb4:	d216      	bcs.n	1a003be4 <__divdi3+0x27c>
1a003bb6:	428f      	cmp	r7, r1
1a003bb8:	d914      	bls.n	1a003be4 <__divdi3+0x27c>
1a003bba:	3b02      	subs	r3, #2
1a003bbc:	4471      	add	r1, lr
1a003bbe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003bc2:	1bc9      	subs	r1, r1, r7
1a003bc4:	fba3 890c 	umull	r8, r9, r3, ip
1a003bc8:	4549      	cmp	r1, r9
1a003bca:	d309      	bcc.n	1a003be0 <__divdi3+0x278>
1a003bcc:	d005      	beq.n	1a003bda <__divdi3+0x272>
1a003bce:	2200      	movs	r2, #0
1a003bd0:	e71d      	b.n	1a003a0e <__divdi3+0xa6>
1a003bd2:	4696      	mov	lr, r2
1a003bd4:	e6fe      	b.n	1a0039d4 <__divdi3+0x6c>
1a003bd6:	4613      	mov	r3, r2
1a003bd8:	e711      	b.n	1a0039fe <__divdi3+0x96>
1a003bda:	4094      	lsls	r4, r2
1a003bdc:	4544      	cmp	r4, r8
1a003bde:	d2f6      	bcs.n	1a003bce <__divdi3+0x266>
1a003be0:	3b01      	subs	r3, #1
1a003be2:	e7f4      	b.n	1a003bce <__divdi3+0x266>
1a003be4:	4603      	mov	r3, r0
1a003be6:	e7ea      	b.n	1a003bbe <__divdi3+0x256>
1a003be8:	4688      	mov	r8, r1
1a003bea:	e7a5      	b.n	1a003b38 <__divdi3+0x1d0>
1a003bec:	46c8      	mov	r8, r9
1a003bee:	e7d1      	b.n	1a003b94 <__divdi3+0x22c>
1a003bf0:	4602      	mov	r2, r0
1a003bf2:	e78c      	b.n	1a003b0e <__divdi3+0x1a6>
1a003bf4:	4613      	mov	r3, r2
1a003bf6:	e70a      	b.n	1a003a0e <__divdi3+0xa6>
1a003bf8:	3b02      	subs	r3, #2
1a003bfa:	e757      	b.n	1a003aac <__divdi3+0x144>
1a003bfc:	f1a8 0802 	sub.w	r8, r8, #2
1a003c00:	442f      	add	r7, r5
1a003c02:	e73f      	b.n	1a003a84 <__divdi3+0x11c>

1a003c04 <__udivdi3>:
1a003c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003c08:	2b00      	cmp	r3, #0
1a003c0a:	d144      	bne.n	1a003c96 <__udivdi3+0x92>
1a003c0c:	428a      	cmp	r2, r1
1a003c0e:	4615      	mov	r5, r2
1a003c10:	4604      	mov	r4, r0
1a003c12:	d94f      	bls.n	1a003cb4 <__udivdi3+0xb0>
1a003c14:	fab2 f782 	clz	r7, r2
1a003c18:	460e      	mov	r6, r1
1a003c1a:	b14f      	cbz	r7, 1a003c30 <__udivdi3+0x2c>
1a003c1c:	f1c7 0320 	rsb	r3, r7, #32
1a003c20:	40b9      	lsls	r1, r7
1a003c22:	fa20 f603 	lsr.w	r6, r0, r3
1a003c26:	fa02 f507 	lsl.w	r5, r2, r7
1a003c2a:	430e      	orrs	r6, r1
1a003c2c:	fa00 f407 	lsl.w	r4, r0, r7
1a003c30:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003c34:	0c23      	lsrs	r3, r4, #16
1a003c36:	fbb6 f0fe 	udiv	r0, r6, lr
1a003c3a:	b2af      	uxth	r7, r5
1a003c3c:	fb0e 6110 	mls	r1, lr, r0, r6
1a003c40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003c44:	fb07 f100 	mul.w	r1, r7, r0
1a003c48:	4299      	cmp	r1, r3
1a003c4a:	d909      	bls.n	1a003c60 <__udivdi3+0x5c>
1a003c4c:	195b      	adds	r3, r3, r5
1a003c4e:	f100 32ff 	add.w	r2, r0, #4294967295
1a003c52:	f080 80ec 	bcs.w	1a003e2e <__udivdi3+0x22a>
1a003c56:	4299      	cmp	r1, r3
1a003c58:	f240 80e9 	bls.w	1a003e2e <__udivdi3+0x22a>
1a003c5c:	3802      	subs	r0, #2
1a003c5e:	442b      	add	r3, r5
1a003c60:	1a5a      	subs	r2, r3, r1
1a003c62:	b2a4      	uxth	r4, r4
1a003c64:	fbb2 f3fe 	udiv	r3, r2, lr
1a003c68:	fb0e 2213 	mls	r2, lr, r3, r2
1a003c6c:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a003c70:	fb07 f703 	mul.w	r7, r7, r3
1a003c74:	4297      	cmp	r7, r2
1a003c76:	d908      	bls.n	1a003c8a <__udivdi3+0x86>
1a003c78:	1952      	adds	r2, r2, r5
1a003c7a:	f103 31ff 	add.w	r1, r3, #4294967295
1a003c7e:	f080 80d8 	bcs.w	1a003e32 <__udivdi3+0x22e>
1a003c82:	4297      	cmp	r7, r2
1a003c84:	f240 80d5 	bls.w	1a003e32 <__udivdi3+0x22e>
1a003c88:	3b02      	subs	r3, #2
1a003c8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a003c8e:	2600      	movs	r6, #0
1a003c90:	4631      	mov	r1, r6
1a003c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003c96:	428b      	cmp	r3, r1
1a003c98:	d847      	bhi.n	1a003d2a <__udivdi3+0x126>
1a003c9a:	fab3 f683 	clz	r6, r3
1a003c9e:	2e00      	cmp	r6, #0
1a003ca0:	d148      	bne.n	1a003d34 <__udivdi3+0x130>
1a003ca2:	428b      	cmp	r3, r1
1a003ca4:	d302      	bcc.n	1a003cac <__udivdi3+0xa8>
1a003ca6:	4282      	cmp	r2, r0
1a003ca8:	f200 80cd 	bhi.w	1a003e46 <__udivdi3+0x242>
1a003cac:	2001      	movs	r0, #1
1a003cae:	4631      	mov	r1, r6
1a003cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003cb4:	b912      	cbnz	r2, 1a003cbc <__udivdi3+0xb8>
1a003cb6:	2501      	movs	r5, #1
1a003cb8:	fbb5 f5f2 	udiv	r5, r5, r2
1a003cbc:	fab5 f885 	clz	r8, r5
1a003cc0:	f1b8 0f00 	cmp.w	r8, #0
1a003cc4:	d177      	bne.n	1a003db6 <__udivdi3+0x1b2>
1a003cc6:	1b4a      	subs	r2, r1, r5
1a003cc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003ccc:	b2af      	uxth	r7, r5
1a003cce:	2601      	movs	r6, #1
1a003cd0:	fbb2 f0fe 	udiv	r0, r2, lr
1a003cd4:	0c23      	lsrs	r3, r4, #16
1a003cd6:	fb0e 2110 	mls	r1, lr, r0, r2
1a003cda:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a003cde:	fb07 f300 	mul.w	r3, r7, r0
1a003ce2:	428b      	cmp	r3, r1
1a003ce4:	d907      	bls.n	1a003cf6 <__udivdi3+0xf2>
1a003ce6:	1949      	adds	r1, r1, r5
1a003ce8:	f100 32ff 	add.w	r2, r0, #4294967295
1a003cec:	d202      	bcs.n	1a003cf4 <__udivdi3+0xf0>
1a003cee:	428b      	cmp	r3, r1
1a003cf0:	f200 80ba 	bhi.w	1a003e68 <__udivdi3+0x264>
1a003cf4:	4610      	mov	r0, r2
1a003cf6:	1ac9      	subs	r1, r1, r3
1a003cf8:	b2a4      	uxth	r4, r4
1a003cfa:	fbb1 f3fe 	udiv	r3, r1, lr
1a003cfe:	fb0e 1113 	mls	r1, lr, r3, r1
1a003d02:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a003d06:	fb07 f703 	mul.w	r7, r7, r3
1a003d0a:	42a7      	cmp	r7, r4
1a003d0c:	d908      	bls.n	1a003d20 <__udivdi3+0x11c>
1a003d0e:	1964      	adds	r4, r4, r5
1a003d10:	f103 32ff 	add.w	r2, r3, #4294967295
1a003d14:	f080 808f 	bcs.w	1a003e36 <__udivdi3+0x232>
1a003d18:	42a7      	cmp	r7, r4
1a003d1a:	f240 808c 	bls.w	1a003e36 <__udivdi3+0x232>
1a003d1e:	3b02      	subs	r3, #2
1a003d20:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a003d24:	4631      	mov	r1, r6
1a003d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003d2a:	2600      	movs	r6, #0
1a003d2c:	4630      	mov	r0, r6
1a003d2e:	4631      	mov	r1, r6
1a003d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003d34:	f1c6 0420 	rsb	r4, r6, #32
1a003d38:	fa22 f504 	lsr.w	r5, r2, r4
1a003d3c:	40b3      	lsls	r3, r6
1a003d3e:	432b      	orrs	r3, r5
1a003d40:	fa20 fc04 	lsr.w	ip, r0, r4
1a003d44:	fa01 f706 	lsl.w	r7, r1, r6
1a003d48:	fa21 f504 	lsr.w	r5, r1, r4
1a003d4c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a003d50:	ea4c 0707 	orr.w	r7, ip, r7
1a003d54:	fbb5 f8fe 	udiv	r8, r5, lr
1a003d58:	0c39      	lsrs	r1, r7, #16
1a003d5a:	fb0e 5518 	mls	r5, lr, r8, r5
1a003d5e:	fa1f fc83 	uxth.w	ip, r3
1a003d62:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a003d66:	fb0c f108 	mul.w	r1, ip, r8
1a003d6a:	42a9      	cmp	r1, r5
1a003d6c:	fa02 f206 	lsl.w	r2, r2, r6
1a003d70:	d904      	bls.n	1a003d7c <__udivdi3+0x178>
1a003d72:	18ed      	adds	r5, r5, r3
1a003d74:	f108 34ff 	add.w	r4, r8, #4294967295
1a003d78:	d367      	bcc.n	1a003e4a <__udivdi3+0x246>
1a003d7a:	46a0      	mov	r8, r4
1a003d7c:	1a6d      	subs	r5, r5, r1
1a003d7e:	b2bf      	uxth	r7, r7
1a003d80:	fbb5 f4fe 	udiv	r4, r5, lr
1a003d84:	fb0e 5514 	mls	r5, lr, r4, r5
1a003d88:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a003d8c:	fb0c fc04 	mul.w	ip, ip, r4
1a003d90:	458c      	cmp	ip, r1
1a003d92:	d904      	bls.n	1a003d9e <__udivdi3+0x19a>
1a003d94:	18c9      	adds	r1, r1, r3
1a003d96:	f104 35ff 	add.w	r5, r4, #4294967295
1a003d9a:	d35c      	bcc.n	1a003e56 <__udivdi3+0x252>
1a003d9c:	462c      	mov	r4, r5
1a003d9e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a003da2:	ebcc 0101 	rsb	r1, ip, r1
1a003da6:	fba4 2302 	umull	r2, r3, r4, r2
1a003daa:	4299      	cmp	r1, r3
1a003dac:	d348      	bcc.n	1a003e40 <__udivdi3+0x23c>
1a003dae:	d044      	beq.n	1a003e3a <__udivdi3+0x236>
1a003db0:	4620      	mov	r0, r4
1a003db2:	2600      	movs	r6, #0
1a003db4:	e76c      	b.n	1a003c90 <__udivdi3+0x8c>
1a003db6:	f1c8 0420 	rsb	r4, r8, #32
1a003dba:	fa01 f308 	lsl.w	r3, r1, r8
1a003dbe:	fa05 f508 	lsl.w	r5, r5, r8
1a003dc2:	fa20 f704 	lsr.w	r7, r0, r4
1a003dc6:	40e1      	lsrs	r1, r4
1a003dc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003dcc:	431f      	orrs	r7, r3
1a003dce:	fbb1 f6fe 	udiv	r6, r1, lr
1a003dd2:	0c3a      	lsrs	r2, r7, #16
1a003dd4:	fb0e 1116 	mls	r1, lr, r6, r1
1a003dd8:	fa1f fc85 	uxth.w	ip, r5
1a003ddc:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a003de0:	fb0c f206 	mul.w	r2, ip, r6
1a003de4:	429a      	cmp	r2, r3
1a003de6:	fa00 f408 	lsl.w	r4, r0, r8
1a003dea:	d907      	bls.n	1a003dfc <__udivdi3+0x1f8>
1a003dec:	195b      	adds	r3, r3, r5
1a003dee:	f106 31ff 	add.w	r1, r6, #4294967295
1a003df2:	d237      	bcs.n	1a003e64 <__udivdi3+0x260>
1a003df4:	429a      	cmp	r2, r3
1a003df6:	d935      	bls.n	1a003e64 <__udivdi3+0x260>
1a003df8:	3e02      	subs	r6, #2
1a003dfa:	442b      	add	r3, r5
1a003dfc:	1a9b      	subs	r3, r3, r2
1a003dfe:	b2bf      	uxth	r7, r7
1a003e00:	fbb3 f0fe 	udiv	r0, r3, lr
1a003e04:	fb0e 3310 	mls	r3, lr, r0, r3
1a003e08:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a003e0c:	fb0c f100 	mul.w	r1, ip, r0
1a003e10:	4299      	cmp	r1, r3
1a003e12:	d907      	bls.n	1a003e24 <__udivdi3+0x220>
1a003e14:	195b      	adds	r3, r3, r5
1a003e16:	f100 32ff 	add.w	r2, r0, #4294967295
1a003e1a:	d221      	bcs.n	1a003e60 <__udivdi3+0x25c>
1a003e1c:	4299      	cmp	r1, r3
1a003e1e:	d91f      	bls.n	1a003e60 <__udivdi3+0x25c>
1a003e20:	3802      	subs	r0, #2
1a003e22:	442b      	add	r3, r5
1a003e24:	1a5a      	subs	r2, r3, r1
1a003e26:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a003e2a:	4667      	mov	r7, ip
1a003e2c:	e750      	b.n	1a003cd0 <__udivdi3+0xcc>
1a003e2e:	4610      	mov	r0, r2
1a003e30:	e716      	b.n	1a003c60 <__udivdi3+0x5c>
1a003e32:	460b      	mov	r3, r1
1a003e34:	e729      	b.n	1a003c8a <__udivdi3+0x86>
1a003e36:	4613      	mov	r3, r2
1a003e38:	e772      	b.n	1a003d20 <__udivdi3+0x11c>
1a003e3a:	40b0      	lsls	r0, r6
1a003e3c:	4290      	cmp	r0, r2
1a003e3e:	d2b7      	bcs.n	1a003db0 <__udivdi3+0x1ac>
1a003e40:	1e60      	subs	r0, r4, #1
1a003e42:	2600      	movs	r6, #0
1a003e44:	e724      	b.n	1a003c90 <__udivdi3+0x8c>
1a003e46:	4630      	mov	r0, r6
1a003e48:	e722      	b.n	1a003c90 <__udivdi3+0x8c>
1a003e4a:	42a9      	cmp	r1, r5
1a003e4c:	d995      	bls.n	1a003d7a <__udivdi3+0x176>
1a003e4e:	f1a8 0802 	sub.w	r8, r8, #2
1a003e52:	441d      	add	r5, r3
1a003e54:	e792      	b.n	1a003d7c <__udivdi3+0x178>
1a003e56:	458c      	cmp	ip, r1
1a003e58:	d9a0      	bls.n	1a003d9c <__udivdi3+0x198>
1a003e5a:	3c02      	subs	r4, #2
1a003e5c:	4419      	add	r1, r3
1a003e5e:	e79e      	b.n	1a003d9e <__udivdi3+0x19a>
1a003e60:	4610      	mov	r0, r2
1a003e62:	e7df      	b.n	1a003e24 <__udivdi3+0x220>
1a003e64:	460e      	mov	r6, r1
1a003e66:	e7c9      	b.n	1a003dfc <__udivdi3+0x1f8>
1a003e68:	3802      	subs	r0, #2
1a003e6a:	4429      	add	r1, r5
1a003e6c:	e743      	b.n	1a003cf6 <__udivdi3+0xf2>
1a003e6e:	bf00      	nop

1a003e70 <__libc_init_array>:
1a003e70:	b570      	push	{r4, r5, r6, lr}
1a003e72:	4b0e      	ldr	r3, [pc, #56]	; (1a003eac <__libc_init_array+0x3c>)
1a003e74:	4c0e      	ldr	r4, [pc, #56]	; (1a003eb0 <__libc_init_array+0x40>)
1a003e76:	1ae4      	subs	r4, r4, r3
1a003e78:	10a4      	asrs	r4, r4, #2
1a003e7a:	2500      	movs	r5, #0
1a003e7c:	461e      	mov	r6, r3
1a003e7e:	42a5      	cmp	r5, r4
1a003e80:	d004      	beq.n	1a003e8c <__libc_init_array+0x1c>
1a003e82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003e86:	4798      	blx	r3
1a003e88:	3501      	adds	r5, #1
1a003e8a:	e7f8      	b.n	1a003e7e <__libc_init_array+0xe>
1a003e8c:	f7fc ff28 	bl	1a000ce0 <_init>
1a003e90:	4c08      	ldr	r4, [pc, #32]	; (1a003eb4 <__libc_init_array+0x44>)
1a003e92:	4b09      	ldr	r3, [pc, #36]	; (1a003eb8 <__libc_init_array+0x48>)
1a003e94:	1ae4      	subs	r4, r4, r3
1a003e96:	10a4      	asrs	r4, r4, #2
1a003e98:	2500      	movs	r5, #0
1a003e9a:	461e      	mov	r6, r3
1a003e9c:	42a5      	cmp	r5, r4
1a003e9e:	d004      	beq.n	1a003eaa <__libc_init_array+0x3a>
1a003ea0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003ea4:	4798      	blx	r3
1a003ea6:	3501      	adds	r5, #1
1a003ea8:	e7f8      	b.n	1a003e9c <__libc_init_array+0x2c>
1a003eaa:	bd70      	pop	{r4, r5, r6, pc}
1a003eac:	1a004234 	.word	0x1a004234
1a003eb0:	1a004234 	.word	0x1a004234
1a003eb4:	1a004238 	.word	0x1a004238
1a003eb8:	1a004234 	.word	0x1a004234

1a003ebc <memcpy>:
1a003ebc:	b510      	push	{r4, lr}
1a003ebe:	1e43      	subs	r3, r0, #1
1a003ec0:	440a      	add	r2, r1
1a003ec2:	4291      	cmp	r1, r2
1a003ec4:	d004      	beq.n	1a003ed0 <memcpy+0x14>
1a003ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
1a003eca:	f803 4f01 	strb.w	r4, [r3, #1]!
1a003ece:	e7f8      	b.n	1a003ec2 <memcpy+0x6>
1a003ed0:	bd10      	pop	{r4, pc}

1a003ed2 <memset>:
1a003ed2:	4402      	add	r2, r0
1a003ed4:	4603      	mov	r3, r0
1a003ed6:	4293      	cmp	r3, r2
1a003ed8:	d002      	beq.n	1a003ee0 <memset+0xe>
1a003eda:	f803 1b01 	strb.w	r1, [r3], #1
1a003ede:	e7fa      	b.n	1a003ed6 <memset+0x4>
1a003ee0:	4770      	bx	lr
1a003ee2:	0000      	movs	r0, r0
1a003ee4:	6b736174 	.word	0x6b736174
1a003ee8:	7579614d 	.word	0x7579614d
1a003eec:	6c756373 	.word	0x6c756373
1a003ef0:	00007361 	.word	0x00007361
1a003ef4:	6b736174 	.word	0x6b736174
1a003ef8:	756e694d 	.word	0x756e694d
1a003efc:	6c756373 	.word	0x6c756373
1a003f00:	00007361 	.word	0x00007361
1a003f04:	6b736174 	.word	0x6b736174
1a003f08:	696c6156 	.word	0x696c6156
1a003f0c:	52726164 	.word	0x52726164
1a003f10:	00000078 	.word	0x00000078
1a003f14:	6b736174 	.word	0x6b736174
1a003f18:	696c6156 	.word	0x696c6156
1a003f1c:	54726164 	.word	0x54726164
1a003f20:	00000078 	.word	0x00000078
1a003f24:	6b736174 	.word	0x6b736174
1a003f28:	6964654d 	.word	0x6964654d
1a003f2c:	72655072 	.word	0x72655072
1a003f30:	6d726f66 	.word	0x6d726f66
1a003f34:	65636e61 	.word	0x65636e61
1a003f38:	00000000 	.word	0x00000000
1a003f3c:	454c4449 	.word	0x454c4449
1a003f40:	00000000 	.word	0x00000000
1a003f44:	51726d54 	.word	0x51726d54
1a003f48:	00000000 	.word	0x00000000
1a003f4c:	20726d54 	.word	0x20726d54
1a003f50:	00637653 	.word	0x00637653

1a003f54 <OscRateIn>:
1a003f54:	00b71b00                                ....

1a003f58 <ExtRateIn>:
1a003f58:	00000000                                ....

1a003f5c <InitClkStates>:
1a003f5c:	01010f01                                ....

1a003f60 <pinmuxing>:
1a003f60:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a003f70:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a003f80:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a003f90:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a003fa0:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a003fb0:	00d50301 00d50401 00160107 00560207     ..............V.
1a003fc0:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a003fd0:	00570206                                ..W.

1a003fd4 <UART_BClock>:
1a003fd4:	01a201c2 01620182                       ......b.

1a003fdc <UART_PClock>:
1a003fdc:	00820081 00a200a1 08040201 0f0f0f03     ................
1a003fec:	000000ff                                ....

1a003ff0 <periph_to_base>:
1a003ff0:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a004000:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a004010:	000100e0 01000100 01200003 00060120     .......... . ...
1a004020:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a004030:	01820013 00120182 01a201a2 01c20011     ................
1a004040:	001001c2 01e201e2 0202000f 000e0202     ................
1a004050:	02220222 0223000d 001c0223              "."...#.#...

1a00405c <InitClkStates>:
1a00405c:	00010100 00010909 0001090a 01010701     ................
1a00406c:	00010902 00010906 0101090c 0001090d     ................
1a00407c:	0001090e 0001090f 00010910 00010911     ................
1a00408c:	00010912 00010913 00011114 00011119     ................
1a00409c:	0001111a 0001111b                       ........

1a0040a4 <lpcUarts>:
1a0040a4:	40081000 06020406 00180205 40081000     ...@...........@
1a0040b4:	09070509 00180706 40082000 00000000     ......... .@....
1a0040c4:	00190000 400c1000 07060107 001a0602     .......@........
1a0040d4:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0040e4:	02020302 001b0204 636b6974 69547265     ........tikcerTi
1a0040f4:	0072656d                                mer.

1a0040f8 <gpioPinsInit>:
1a0040f8:	02000104 00050701 05010d03 04080100     ................
1a004108:	02020002 02000304 00000403 04070002     ................
1a004118:	030c0300 09050402 05040103 04030208     ................
1a004128:	04020305 06040504 0802000c 03000b06     ................
1a004138:	00090607 07060503 060f0504 03030004     ................
1a004148:	02000404 00050404 06040502 04060200     ................
1a004158:	0c050408 05040a04 0003010e 14010a00     ................
1a004168:	010f0000 0d000012 00001101 0010010c     ................
1a004178:	07070300 000f0300 01000001 00000000     ................
1a004188:	000a0600 08060603 06100504 04030005     ................
1a004198:	03000106 04090400 04010d05 010b0000     ................
1a0041a8:	0200000f 00000001 00010104 02010800     ................
1a0041b8:	01090000 09010006 05040002 04010200     ................
1a0041c8:	02020105 02020504 0e00000a 01000b02     ................
1a0041d8:	000c020b 00040c01 04000200 01020001     ................
1a0041e8:	02000204 00030402 03070302 070b0300     ................
1a0041f8:	0c030004 03000507 0006070d 01020e03     ................
1a004208:	04010504 06020006 02000504 00040405     ................
1a004218:	08040402 040c0504 0d050409 05040a04     ................
1a004228:	0005010e 00000801                       ........

1a004230 <ultrasonicSensorsIrqMap>:
1a004230:	00020100                                ....
